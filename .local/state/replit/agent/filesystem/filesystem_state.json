{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EthosRadar - Trust Network Scanner\n\n## Overview\nEthosRadar is a Web3 trust network scanner integrated with the Ethos Protocol. It enables users to scan wallet reputations, analyze trust networks, and track trust scores. The project aims to provide a modern, intuitive user interface for a seamless experience in understanding and navigating the complexities of Web3 trust. Key capabilities include multi-platform profile search, real-time trust score visualization, and comprehensive analysis of vouching patterns and reputation farming (R4R). The vision is to offer a transparent and reliable tool for assessing credibility within decentralized ecosystems.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\nPrefers calm, muted interfaces with reduced animations.\nUI preferences: Cloud background image with reduced animations for a serene interface.\nTheme preference: Light mode enforced for all users (dark appearance with light overlays).\n\n## Deployment Configuration\n**Primary Domain**: ethosradar.com  \n**Replit Domain**: ethosradar.replit.app  \n**Frame Generation**: Supports both domains with automatic domain detection\n**Background Images**: Served from https://ethosradar.com/ for consistent asset loading\n**Client-side URLs**: Generated using window.location.origin for automatic domain adaptation\n\n## Recent Changes (January 2025)\n- **Critical v1 API Bug Fixed**: Resolved major ETH amount calculation discrepancy where backend used outdated v1 aggregate data vs accurate v2 individual transaction totals\n- **v1 Vouch API Dependency Removed**: Completely eliminated v1 stats fallback code that provided inaccurate amounts - now exclusively uses v2 individual transaction data\n- **Balance Field Implementation**: Updated backend to use v2 API `balance` field instead of `deposited` for current withdrawable amounts including staking rewards\n- **Staking Rewards Integration**: ETH totals now include accrued staking rewards - Given: 17.615 ETH, Received: 32.030 ETH, Total: 49.646 ETH\n- **Real-time Transaction Data**: v2 API provides accurate individual amounts with comprehensive user context and quality scoring\n- **Cast Text Redesigned**: Implemented aesthetic \"TRUST RADAR SCAN COMPLETE\" format with tier-based emojis (üëë/üèÜ/‚≠ê/üî•/‚ö°) and proper attribution to @cookedzera.eth on @ethos_network\n- **Tier System Updated**: Updated to match Ethos Network's 2025 tier categories: Neutral (1200-1399), Known (1400-1599), Established (1600-1799), Reputable (1800-1999), Exemplary (2000-2199), Distinguished (2200-2399), Revered (2400-2599), Renowned (2600-2800)\n- **Frame Generation Optimized**: Added 10-minute TTL caching system for 25x faster subsequent frame requests (1000ms‚Üí40ms), background image preloading, and memory management\n- **Search Performance Enhanced**: Added intelligent caching system reducing search suggestions from 545ms‚Üí265ms (51% faster), with 30-second cache for fresh results\n- **Profile Loading Optimized**: Enhanced profile endpoint caching reduces load times from 285ms‚Üí62ms for cached results, with 1-minute cache for data freshness (78% faster)\n- **Cache Strategy Optimized**: Search (30s), Profiles (1min), R4R Analysis (10min), Frame Generation (10min) - balancing speed with data freshness\n- **Memory Management Implemented**: Added automatic cache cleanup system running every 5 minutes to prevent memory leaks\n- **Data Freshness Indicators Added**: Subtle timestamps at bottom of profile components without impacting UI design or blur effects\n- **Refresh Button Cache Bypass**: Added ?refresh=true parameter support to force fresh data in Farcaster cast cards, bypassing all caching layers\n- **Farcaster Cache Optimization**: Implemented 1-hour cache duration (max-age=3600) to reduce server load - cards only update when users click \"Refresh metadata\" button\n- **Protocol References Updated**: Changed \"Ethos Protocol\" to \"Ethos Network\" across all cast text for brand consistency\n- **URGENT: Farcaster Logo Upload Required**: New logo1.png (128KB blue radar design) created for Farcaster Mini App but needs manual upload to ethosradar.com domain (currently returns 404)\n- **Background Configuration**: Website uses unified-bg background, Farcaster frame cards use cloud-bg for distinct visual identity\n- **Enhanced Farcaster Direct Cast**: Implemented comprehensive SDK detection with multiple fallback methods for seamless cast composition in Mini App context\n- **WebP Optimization Implemented**: Converted background and logo images to WebP format, achieving 93-96% file size reduction (1MB ‚Üí 37-68KB)\n- **Logo Assets Updated**: New radar-style logo properly configured with WebP/PNG fallbacks and optimized for both local and ethosradar.com domain serving\n- **Performance Enhancements**: Added image preloading, WebP support detection, and optimized asset delivery for faster page loads\n- **Asset Domain Configuration**: All logo, background, and Farcaster manifest assets properly configured to use ethosradar.com URLs for production\n- **Deployment Readiness Fixed**: Resolved deployment health check failures by adding explicit `/health`, `/ready`, and `/_status` endpoints for Replit Deployments\n- **Server Initialization Improved**: Enhanced error handling with comprehensive logging, graceful shutdown handling (SIGTERM/SIGINT), and proper async initialization order\n- **Production Build Validated**: Confirmed production build process works correctly with proper environment detection and error handling\n- **Domain Configuration Updated**: Added support for dual-domain deployment (ethosradar.com + ethosradar.replit.app)\n- **Frame Generation Enhanced**: Updated server-side frame generation to use correct domains based on deployment environment\n- **Farcaster PNG Compliance**: Updated all Farcaster assets to use PNG format for maximum compatibility (logos, frame backgrounds)\n- **TypeScript Errors Fixed**: Resolved error handling type issues in frame generation code\n- **Migration Completed**: Successfully migrated from Replit Agent to standard Replit environment\n- **Pre-deployment Optimization**: Cleaned attached assets folder (37 images), verified API performance - all systems ready for deployment\n- **View on Ethos Link Fixed**: Corrected \"View on Ethos\" button to use username instead of userkey for proper profile URLs (e.g., /profile/x/username)\n- **Real-time ETH Price System Implemented**: Added automatic ETH price updates every 18 seconds with real-time service running in background\n- **Frontend Price Refresh**: Updated exchange rate hooks to refetch every 18 seconds matching server-side updates for accurate USD conversions\n- **Price API Optimized**: Exchange rates endpoint now uses cached real-time data instead of making fresh API calls on each request\n- **Production Code Cleanup**: Removed all debug logs, console statements, test files, and attached assets while preserving all features, UI effects, and blur animations\n- **Data Source Priority Fixed**: Updated user-profile-view.tsx to prioritize realStats (corrected v2 API data) over vouchData to display accurate vouch counts and amounts\n\n## System Architecture\n\n### UI/UX Decisions\n- **Design Philosophy**: Modern glassmorphism with a clean aesthetic, focusing on readability and visual harmony.\n- **Color Scheme**: Primarily uses a refined palette with subtle gradients. Farcaster mode integrates authentic purple/violet brand colors. Light mode uses softer gray tones for text.\n- **Backgrounds**: Unified cloud background image for both light and dark themes, with adjustable component opacities to ensure background visibility. Subtle background blur and gentle hover animations are used.\n- **Theming**: Comprehensive theme system supporting both light and dark modes with `localStorage` persistence and system preference detection. Theme changes include smooth transitions.\n- **Component Styling**: Consistent `backdrop-blur`, `bg-white/x`, `border` and `shadow` properties for a unified glassmorphism appearance across all interactive elements (search, buttons, cards, modals).\n- **Typography**: Optimized font sizes and weights for visual hierarchy and readability, with system fonts and clear text contrast. Text includes `drop-shadow` effects for legibility on glassmorphism backgrounds.\n- **Interaction Design**: Calm hover effects, smooth transitions, and subtle animations (e.g., scale, pulse, color fill for icons) for a polished user experience. Minimal animations on mobile for performance.\n- **Mobile Optimization**: Responsive design with proper touch targets (minimum 44px), optimized spacing, and adaptive layouts for various screen sizes to ensure accessibility and usability.\n\n### Technical Implementations\n- **Frontend Framework**: React 18 with TypeScript.\n- **Styling**: Tailwind CSS for utility-first styling, with CSS variables for dynamic theming.\n- **UI Components**: Radix UI primitives and `shadcn/ui` for accessible, customizable components.\n- **State Management**: TanStack React Query for efficient server-side data fetching and caching.\n- **Routing**: Wouter for lightweight client-side navigation.\n- **Build Tool**: Vite for fast development and optimized production builds.\n- **Backend Runtime**: Node.js with Express.js for RESTful API endpoints.\n- **Server-Side Rendering**: Canvas API for generating Farcaster frame cards with dynamic user data.\n\n### Feature Specifications\n- **Trust Profile Search**: Search for users across multiple platforms (Farcaster, Ethereum addresses, etc.) to display their Ethos trust scores and related data.\n- **Farcaster Integration**:\n    - **Farcaster Mode**: Dedicated search mode to find Farcaster profiles, with specific UI indicators and auto-detection cards.\n    - **Mini App Embeds**: Interactive Farcaster Mini App cards that provide profile previews and direct linking to the full EthosRadar experience.\n    - **Native Cast Composition**: Direct cast creation within the Farcaster app using the SDK, eliminating external redirects for sharing.\n- **Trust Score Analysis**: Display comprehensive trust scores, levels (e.g., Exemplary, Neutral), and detailed metrics like vouches, reviews, XP, and rank.\n- **R4R (Reputation for Reputation) Analysis**: Detailed analysis of vouching and review patterns to detect suspicious reciprocal activities, including risk scores and visual indicators.\n- **Weekly Momentum/Score History**: Track user score changes and activity over a specified period (e.g., 7-day, 30-day), with directional indicators.\n- **Vouch Intel**: Comprehensive view of received and given vouches, with detailed transaction data and participant information.\n- **Profile Pages**: Dedicated user profiles with organized tabs for Overview, Vouch Intel, and R4R Data.\n- **Dynamic Loading States**: Sophisticated skeleton loading animations with shimmer and pulse effects, matching the glassmorphism theme, to enhance perceived performance.\n\n### System Design Choices\n- **Client-Server Architecture**: Clear separation between frontend (React/Vite) and backend (Node.js/Express) for robust, scalable deployment.\n- **API-Driven**: All data fetching is through well-defined API endpoints, ensuring data consistency and maintainability.\n- **Modularity**: Codebase organized into logical components, hooks, and utilities for reusability and maintainability.\n- **Performance Optimization**: Focus on reducing unnecessary animations on mobile, optimizing image loading, and efficient data retrieval to ensure a smooth user experience.\n- **Security**: Robust client/server separation and adherence to best practices in API design and data handling.\n\n## External Dependencies\n\n- **Ethos Protocol APIs**: Core integration for user trust scores, profiles, vouch data, reviews, and activity history. This includes both V1 and V2 API endpoints.\n- **@farcaster/miniapp-sdk**: For integrating direct Farcaster Mini App functionalities like cast composition and environment detection.\n- **Node.js Canvas API**: Used server-side for generating dynamic Farcaster frame cards as images.\n- **Image Hosting**: Optimized WebP/PNG assets served from `https://ethosradar.com/` including:\n  - `unified-bg.webp` (69KB, was 1MB PNG) - Main website background image\n  - `cloud-bg.png` (optimized) - Farcaster frame card background only\n  - `logo.webp` (37KB, was 838KB PNG) - Primary logo\n  - `icon.webp` (37KB, was 838KB PNG) - App icon for manifests\n  - PNG fallbacks for older browser compatibility\n- **Warpcast**: Direct integration for sharing Farcaster frames and composing casts.\n- **Third-party Platforms**: APIs for cross-referencing user profiles on platforms like Twitter/X, Discord, and Telegram (though detailed social media account integration appears to be reduced or removed).\n\n## Asset Upload Checklist for ethosradar.com Domain\n**Critical**: These optimized assets must be uploaded to the production domain:\n- ‚úÖ `cloud-bg.webp` (optimized) - Main background image\n- ‚úÖ `cloud-bg.png` (updated) - Background fallback\n- ‚úÖ `logo.webp` (37KB) - Main logo\n- ‚úÖ `logo.png` (838KB) - Logo fallback  \n- ‚úÖ `icon.webp` (37KB) - App icon\n- ‚úÖ `icon.png` (838KB) - Icon fallback\n- ‚ùå `logo1.png` (128KB) - **CRITICAL: NEW Farcaster Mini App logo** - MUST BE UPLOADED (Currently 404 on production)","size_bytes":13256},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/attestations.ts":{"content":"interface Attestation {\n  hash: string;\n  profileId: number;\n  service: string;\n  account: string;\n  createdAt: number;\n  updatedAt: number;\n  archived: boolean;\n}\n\ninterface ExtendedAttestation {\n  attestation: Attestation;\n  extra: {\n    attestationHash: string;\n    id: string;\n    username: string;\n    name: string;\n    biography: string;\n    avatar: string;\n    followersCount: number;\n    isBlueVerified: boolean;\n    joinedAt: number;\n    website: string;\n  };\n}\n\nexport async function getAttestations(profileId: number): Promise<Attestation[]> {\n  try {\n    const response = await fetch('https://api.ethos.network/api/v1/attestations', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        profileIds: [profileId],\n        limit: 50,\n        offset: 0,\n        archived: false\n      })\n    });\n\n    const data = await response.json();\n    \n    if (data.ok && data.data?.values) {\n      return data.data.values;\n    }\n    \n    return [];\n  } catch (error) {\n    // Error fetching attestations handled\n    return [];\n  }\n}\n\nexport async function getExtendedAttestations(profileId: number): Promise<ExtendedAttestation[]> {\n  try {\n    const response = await fetch('https://api.ethos.network/api/v1/attestations/extended', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        profileIds: [profileId],\n        limit: 50,\n        offset: 0,\n        archived: false\n      })\n    });\n\n    const data = await response.json();\n    \n    if (data.ok && data.data?.values) {\n      return data.data.values;\n    }\n    \n    return [];\n  } catch (error) {\n    // Error fetching extended attestations handled\n    return [];\n  }\n}\n\nexport function mapServiceToIcon(service: string): string {\n  const serviceMap: Record<string, string> = {\n    'x.com': 'ùïè', // Twitter/X\n    'discord': 'üéÆ',\n    'github': 'üêô',\n    'ethereum': '‚ü†',\n    'ens': 'üåê'\n  };\n  \n  return serviceMap[service.toLowerCase()] || 'üîó';\n}\n\nexport function formatServiceName(service: string): string {\n  const serviceNames: Record<string, string> = {\n    'x.com': 'Twitter/X',\n    'discord': 'Discord',\n    'github': 'GitHub',\n    'ethereum': 'Ethereum',\n    'ens': 'ENS'\n  };\n  \n  return serviceNames[service.toLowerCase()] || service;\n}","size_bytes":2443},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n// Optimize request parsing limits for better performance\napp.use(express.json({ limit: '1mb' }));\napp.use(express.urlencoded({ extended: false, limit: '1mb' }));\n\n// Add CORS headers for Farcaster crawler\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  \n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Basic root endpoint for quick status check\napp.get('/_status', (req, res) => {\n  res.status(200).json({ \n    status: 'ok', \n    service: 'EthosRadar',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Health check endpoint for deployment readiness checks\napp.get('/health', (req, res) => {\n  res.status(200).json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    version: process.env.npm_package_version || '1.0.0',\n    environment: process.env.NODE_ENV || 'development',\n    port: process.env.PORT || '5000'\n  });\n});\n\n// Route for cloud-bg.png with proper fallback\napp.get('/cloud-bg.png', (req, res) => {\n  const cloudBgPath = path.join(process.cwd(), 'public', 'cloud-bg.png');\n  const unifiedBgPath = path.join(process.cwd(), 'public', 'unified-bg.png');\n  \n  // Try cloud-bg.png first, fallback to unified-bg.png\n  if (fs.existsSync(cloudBgPath)) {\n    res.sendFile(cloudBgPath);\n  } else {\n    console.log('cloud-bg.png not found, serving unified-bg.png');\n    res.sendFile(unifiedBgPath);\n  }\n});\n\n// Route for unified-bg images\napp.get('/unified-bg.webp', (req, res) => {\n  const webpPath = path.join(process.cwd(), 'public', 'unified-bg.webp');\n  const pngPath = path.join(process.cwd(), 'public', 'unified-bg.png');\n  \n  if (fs.existsSync(webpPath)) {\n    res.sendFile(webpPath);\n  } else if (fs.existsSync(pngPath)) {\n    console.log('unified-bg.webp not found, serving unified-bg.png');\n    res.sendFile(pngPath);\n  } else {\n    console.log('No unified background images found');\n    res.status(404).send('Background image not found');\n  }\n});\n\napp.get('/unified-bg.png', (req, res) => {\n  const pngPath = path.join(process.cwd(), 'public', 'unified-bg.png');\n  \n  if (fs.existsSync(pngPath)) {\n    res.sendFile(pngPath);\n  } else {\n    console.log('unified-bg.png not found');\n    res.status(404).send('Background image not found');\n  }\n});\n\n// Readiness check endpoint\napp.get('/ready', (req, res) => {\n  res.status(200).json({ \n    status: 'ready',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Explicit static asset serving for critical WebP/PNG files\napp.get('/unified-bg.webp', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"unified-bg.webp\"));\n});\n\napp.get('/unified-bg.png', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"unified-bg.png\"));\n});\n\napp.get('/logo.webp', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"logo.webp\"));\n});\n\napp.get('/logo.png', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"logo.png\"));\n});\n\napp.get('/icon.webp', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"icon.webp\"));\n});\n\napp.get('/icon.png', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"icon.png\"));\n});\n\napp.get('/embed-preview.png', (req, res) => {\n  res.sendFile(path.resolve(import.meta.dirname, \"..\", \"public\", \"embed-preview.png\"));\n});\n\n(async () => {\n  try {\n    log(\"Starting server initialization...\");\n    \n    const server = await registerRoutes(app);\n    log(\"Routes registered successfully\");\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      log(`Error handled: ${status} - ${message}`);\n      res.status(status).json({ message });\n      // Server error handled\n      // Don't re-throw the error to prevent crashes\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      // Serve static files from public directory in development\n      app.use(express.static(path.resolve(import.meta.dirname, \"..\", \"public\")));\n      await setupVite(app, server);\n      log(\"Development mode: Vite setup completed\");\n    } else {\n      serveStatic(app);\n      log(\"Production mode: Static files setup completed\");\n    }\n\n    // ALWAYS serve the app on the port specified in the environment variable PORT\n    // Other ports are firewalled. Default to 5000 if not specified.\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = parseInt(process.env.PORT || '5000', 10);\n    \n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, async () => {\n      log(`serving on port ${port}`);\n      \n      // Start real-time ETH price updates\n      try {\n        const priceUpdaterModule = await import('./services/price-updater');\n        priceUpdaterModule.priceUpdater.startUpdates();\n        log(\"Real-time ETH price updates started\");\n      } catch (error) {\n        log(`Failed to start price updater: ${error}`);\n      }\n      \n      log(\"Server initialization completed successfully\");\n    });\n\n    // Handle server errors\n    server.on('error', (error: any) => {\n      log(`Server error: ${error.message}`);\n      if (error.code === 'EADDRINUSE') {\n        log(`Port ${port} is already in use`);\n      }\n      process.exit(1);\n    });\n\n    // Graceful shutdown handling\n    process.on('SIGTERM', () => {\n      log('SIGTERM received, shutting down gracefully');\n      server.close(() => {\n        log('Server closed');\n        process.exit(0);\n      });\n    });\n\n    process.on('SIGINT', () => {\n      log('SIGINT received, shutting down gracefully');\n      server.close(() => {\n        log('Server closed');\n        process.exit(0);\n      });\n    });\n\n  } catch (error) {\n    log(`Failed to initialize server: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    console.error('Server initialization error:', error);\n    process.exit(1);\n  }\n})();\n","size_bytes":7474},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { ethosApi } from \"./services/ethos-api\";\nimport { getExtendedAttestations, mapServiceToIcon, formatServiceName } from \"./attestations\";\nimport { r4rAnalyzer } from \"./services/r4r-analyzer\";\nimport farcasterFrameRoutes from \"./routes/farcaster-frame-new.js\";\n\n// Ethos-style tier system matching official app.ethos.network 2025 tiers\nfunction getTierInfo(score: number) {\n  if (score >= 2600) return { tier: 'renowned', emoji: 'üëë', flex: 'RENOWNED' };\n  if (score >= 2400) return { tier: 'revered', emoji: 'üëë', flex: 'REVERED' };\n  if (score >= 2200) return { tier: 'distinguished', emoji: 'üëë', flex: 'DISTINGUISHED' };\n  if (score >= 2000) return { tier: 'exemplary', emoji: 'üëë', flex: 'EXEMPLARY' };\n  if (score >= 1800) return { tier: 'reputable', emoji: 'üèÜ', flex: 'REPUTABLE' };\n  if (score >= 1600) return { tier: 'established', emoji: '‚≠ê', flex: 'ESTABLISHED' };\n  if (score >= 1400) return { tier: 'known', emoji: 'üî•', flex: 'KNOWN' };\n  if (score >= 1200) return { tier: 'neutral', emoji: '‚ö°', flex: 'NEUTRAL' };\n  if (score >= 800) return { tier: 'questionable', emoji: '‚ö†Ô∏è', flex: 'QUESTIONABLE' };\n  return { tier: 'untrusted', emoji: 'üõ°Ô∏è', flex: 'UNTRUSTED' };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // Farcaster Mini App Manifest endpoint\n  app.get('/.well-known/farcaster.json', (req, res) => {\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.setHeader('Pragma', 'no-cache');\n    res.setHeader('Expires', '0');\n    const manifest = {\n      accountAssociation: {\n        header: \"eyJmaWQiOjE5MDUyMiwidHlwZSI6ImF1dGgiLCJrZXkiOiIweDk5RjZGZTYwZTJCYTM0MzI1MTI5ZEJEMmNEZGM0NTdEMjk3MzY4RjgifQ\",\n        payload: \"eyJkb21haW4iOiJldGhvc3JhZGFyLmNvbSJ9\",\n        signature: \"Ap2jpG3Hb7ifpde/kd56Hr6Z8e4mOnSi7tQZU25LYsVtsveU1T2LyfqQmB1oy0w1Mwm31IDlQlWKuAoOIquj0Bs=\"\n      },\n      miniapp: {\n        version: \"1\",\n        name: \"EthosRadar\",\n        homeUrl: \"https://ethosradar.com\",\n        iconUrl: \"https://ethosradar.com/logo1.png\",\n        subtitle: \"Trust Score Scanner for Web3\",\n        description: \"Generate your personalized trust reputation card on Ethos Protocol\",\n        buttonTitle: \"Scan Your Trust Score\",\n        primaryCategory: \"utility\",\n        tags: [\"trust\", \"reputation\", \"ethos\", \"crypto\", \"web3\"]\n      }\n    };\n    res.json(manifest);\n  });\n\n  // Mount Farcaster frame routes\n  app.use('/farcaster', farcasterFrameRoutes);\n\n  // Dynamic embed image for home page sharing\n  app.get('/embed-preview.png', async (req, res) => {\n    try {\n      // Redirect to the card generation endpoint\n      const cardUrl = `http://localhost:${process.env.PORT || 5000}/farcaster/card/cookedzera`;\n      const response = await fetch(cardUrl);\n      \n      if (response.ok && response.headers.get('content-type')?.includes('image/png')) {\n        const imageBuffer = await response.arrayBuffer();\n        res.setHeader('Content-Type', 'image/png');\n        res.setHeader('Cache-Control', 'public, max-age=300');\n        res.send(Buffer.from(imageBuffer));\n      } else {\n        // Fallback to logo if card generation fails\n        res.redirect('/logo.png');\n      }\n    } catch (error) {\n      // Fallback to logo if there's an error\n      res.redirect('/logo.png');\n    }\n  });\n\n\n\n\n\n  \n  // Serve optimized WebP images with fallback support\n  app.get('/logo.webp', (req, res) => {\n    res.setHeader('Content-Type', 'image/webp');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    res.sendFile(path.join(process.cwd(), 'public', 'logo.webp'));\n  });\n\n  app.get('/icon.webp', (req, res) => {\n    res.setHeader('Content-Type', 'image/webp');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    res.sendFile(path.join(process.cwd(), 'public', 'icon.webp'));\n  });\n\n  // Serve PNG images with correct content type\n  app.get('/logo.png', (req, res) => {\n    res.setHeader('Content-Type', 'image/png');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    res.sendFile(path.join(process.cwd(), 'public', 'logo.png'));\n  });\n  \n  app.get('/icon.png', (req, res) => {\n    res.setHeader('Content-Type', 'image/png');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    res.sendFile(path.join(process.cwd(), 'public', 'icon.png'));\n  });\n  \n  // Serve logo1.png explicitly\n  app.get('/logo1.png', (req, res) => {\n    res.setHeader('Content-Type', 'image/png');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    res.sendFile(path.join(process.cwd(), 'public', 'logo1.png'));\n  });\n  \n\n  \n\n  \n  // SVG icon for Mini App display\n  app.get('/icon.svg', (req, res) => {\n    res.setHeader('Content-Type', 'image/svg+xml');\n    res.setHeader('Cache-Control', 'public, max-age=3600');\n    const svg = `<svg width=\"1024\" height=\"1024\" viewBox=\"0 0 1024 1024\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n    <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:#1E40AF;stop-opacity:1\" />\n      <stop offset=\"100%\" style=\"stop-color:#3B82F6;stop-opacity:1\" />\n    </linearGradient>\n    <filter id=\"shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n      <feDropShadow dx=\"0\" dy=\"4\" stdDeviation=\"8\" flood-color=\"rgba(0,0,0,0.3)\"/>\n    </filter>\n  </defs>\n  \n  <!-- Background circle -->\n  <rect width=\"1024\" height=\"1024\" rx=\"200\" fill=\"url(#bgGrad)\"/>\n  \n  <!-- Main radar circle -->\n  <circle cx=\"512\" cy=\"512\" r=\"300\" fill=\"none\" stroke=\"white\" stroke-width=\"6\" opacity=\"0.3\"/>\n  <circle cx=\"512\" cy=\"512\" r=\"200\" fill=\"none\" stroke=\"white\" stroke-width=\"8\" opacity=\"0.5\"/>\n  <circle cx=\"512\" cy=\"512\" r=\"100\" fill=\"none\" stroke=\"white\" stroke-width=\"10\" opacity=\"0.7\"/>\n  \n  <!-- Center eye/radar -->\n  <ellipse cx=\"512\" cy=\"512\" rx=\"80\" ry=\"40\" fill=\"white\" opacity=\"0.9\" filter=\"url(#shadow)\"/>\n  <circle cx=\"512\" cy=\"512\" r=\"24\" fill=\"#1E40AF\"/>\n  \n  <!-- Radar sweep line -->\n  <line x1=\"512\" y1=\"512\" x2=\"512\" y2=\"212\" stroke=\"white\" stroke-width=\"4\" opacity=\"0.8\" transform=\"rotate(45 512 512)\"/>\n  \n  <!-- Trust network dots -->\n  <circle cx=\"612\" cy=\"412\" r=\"8\" fill=\"white\" opacity=\"0.8\"/>\n  <circle cx=\"712\" cy=\"512\" r=\"6\" fill=\"white\" opacity=\"0.6\"/>\n  <circle cx=\"412\" cy=\"612\" r=\"8\" fill=\"white\" opacity=\"0.8\"/>\n  <circle cx=\"312\" cy=\"412\" r=\"6\" fill=\"white\" opacity=\"0.6\"/>\n</svg>`;\n    res.send(svg);\n  });\n  \n  // Custom PNG files are now served as static assets through the main static middleware\n  // No need for separate routes - they're automatically served from dist/public/\n  \n  // Hero image for Farcaster manifest (1200x630 - 1.91:1 aspect ratio per 2025 spec)\n  app.get('/hero.png', (req, res) => {\n    res.setHeader('Content-Type', 'image/svg+xml');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    const svg = `<svg width=\"1200\" height=\"630\" xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n    <linearGradient id=\"heroGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:#1E40AF;stop-opacity:1\" />\n      <stop offset=\"50%\" style=\"stop-color:#3B82F6;stop-opacity:1\" />\n      <stop offset=\"100%\" style=\"stop-color:#60A5FA;stop-opacity:1\" />\n    </linearGradient>\n    <filter id=\"glow\">\n      <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n      <feMerge> \n        <feMergeNode in=\"coloredBlur\"/>\n        <feMergeNode in=\"SourceGraphic\"/>\n      </feMerge>\n    </filter>\n  </defs>\n  \n  <!-- Background -->\n  <rect width=\"1200\" height=\"630\" fill=\"url(#heroGrad)\"/>\n  \n  <!-- Network nodes background pattern -->\n  <g opacity=\"0.1\">\n    <circle cx=\"200\" cy=\"120\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"400\" cy=\"180\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"700\" cy=\"140\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"900\" cy=\"210\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"300\" cy=\"300\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"600\" cy=\"270\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"1000\" cy=\"300\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"160\" cy=\"420\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"500\" cy=\"480\" r=\"4\" fill=\"white\"/>\n    <circle cx=\"840\" cy=\"450\" r=\"4\" fill=\"white\"/>\n    \n    <!-- Connection lines -->\n    <line x1=\"200\" y1=\"120\" x2=\"400\" y2=\"180\" stroke=\"white\" stroke-width=\"1\"/>\n    <line x1=\"400\" y1=\"180\" x2=\"700\" y2=\"140\" stroke=\"white\" stroke-width=\"1\"/>\n    <line x1=\"700\" y1=\"140\" x2=\"900\" y2=\"210\" stroke=\"white\" stroke-width=\"1\"/>\n    <line x1=\"300\" y1=\"300\" x2=\"600\" y2=\"270\" stroke=\"white\" stroke-width=\"1\"/>\n    <line x1=\"600\" y1=\"270\" x2=\"1000\" y2=\"300\" stroke=\"white\" stroke-width=\"1\"/>\n    <line x1=\"160\" y1=\"420\" x2=\"500\" y2=\"480\" stroke=\"white\" stroke-width=\"1\"/>\n    <line x1=\"500\" y1=\"480\" x2=\"840\" y2=\"450\" stroke=\"white\" stroke-width=\"1\"/>\n  </g>\n  \n  <!-- Central radar/eye icon -->\n  <g transform=\"translate(600,315)\">\n    <!-- Radar circles -->\n    <circle cx=\"0\" cy=\"0\" r=\"80\" fill=\"none\" stroke=\"white\" stroke-width=\"3\" opacity=\"0.6\"/>\n    <circle cx=\"0\" cy=\"0\" r=\"55\" fill=\"none\" stroke=\"white\" stroke-width=\"3\" opacity=\"0.8\"/>\n    <circle cx=\"0\" cy=\"0\" r=\"30\" fill=\"none\" stroke=\"white\" stroke-width=\"3\"/>\n    \n    <!-- Eye shape -->\n    <ellipse cx=\"0\" cy=\"0\" rx=\"45\" ry=\"25\" fill=\"white\" opacity=\"0.9\"/>\n    <circle cx=\"0\" cy=\"0\" r=\"16\" fill=\"#1E40AF\"/>\n    <circle cx=\"4\" cy=\"-4\" r=\"6\" fill=\"white\"/>\n    \n    <!-- Scanning line -->\n    <line x1=\"0\" y1=\"0\" x2=\"65\" y2=\"-25\" stroke=\"#60A5FA\" stroke-width=\"4\" opacity=\"0.8\"/>\n  </g>\n  \n  <!-- Title -->\n  <text x=\"600\" y=\"180\" font-family=\"Arial, sans-serif\" font-size=\"64\" font-weight=\"bold\" \n        text-anchor=\"middle\" fill=\"white\">EthosRadar</text>\n  \n  <!-- Subtitle -->\n  <text x=\"600\" y=\"220\" font-family=\"Arial, sans-serif\" font-size=\"24\" \n        text-anchor=\"middle\" fill=\"white\" opacity=\"0.9\">Trust Network Scanner</text>\n  \n  <!-- Bottom tagline -->\n  <text x=\"600\" y=\"520\" font-family=\"Arial, sans-serif\" font-size=\"20\" \n        text-anchor=\"middle\" fill=\"white\" opacity=\"0.8\">Powered by Ethos Protocol</text>\n  \n  <!-- Trust score indicators -->\n  <g transform=\"translate(100,80)\" opacity=\"0.7\">\n    <circle cx=\"0\" cy=\"0\" r=\"20\" fill=\"#10B981\"/>\n    <text x=\"0\" y=\"6\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\" \n          text-anchor=\"middle\" fill=\"white\">1850</text>\n  </g>\n  \n  <g transform=\"translate(1100,550)\" opacity=\"0.7\">\n    <circle cx=\"0\" cy=\"0\" r=\"20\" fill=\"#F59E0B\"/>\n    <text x=\"0\" y=\"6\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\" \n          text-anchor=\"middle\" fill=\"white\">1200</text>\n  </g>\n</svg>`;\n    res.send(svg);\n  });\n  \n\n  // Simple search suggestions using direct Ethos API (ethos-r4r approach)\n  app.get(\"/api/search-suggestions\", async (req, res) => {\n    try {\n      const query = req.query.q;\n      const limit = req.query.limit || \"8\";\n      const offset = req.query.offset || \"0\";\n\n      if (!query || typeof query !== 'string' || query.length < 2) {\n        return res.json({ success: true, data: [] });\n      }\n\n      // Check cache first\n      const cacheKey = `search-${query}-${limit}-${offset}`;\n      const cached = searchCache.get(cacheKey);\n      if (cached && Date.now() - cached.timestamp < SEARCH_CACHE_TTL) {\n        return res.json({ success: true, data: cached.data, cached: true });\n      }\n\n      // Set cache headers for search suggestions\n      res.set({\n        'Cache-Control': 'public, max-age=300', // 5 minutes cache\n        'ETag': `\"${query}-${limit}-${offset}\"`,\n      });\n\n      // Use direct Ethos V1 search API (same as ethos-r4r)\n      const ethosUrl = `https://api.ethos.network/api/v1/search?query=${encodeURIComponent(query)}&limit=${limit}&offset=${offset}`;\n      \n      const response = await fetch(ethosUrl, {\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'EthosRadar/1.0'\n        }\n      });\n      \n      const data = await response.json();\n      \n      if (data.ok && data.data && data.data.values) {\n        // Simple conversion to our format with null safety\n        const suggestions = data.data.values.map((user: any) => ({\n          userkey: user.userkey || '',\n          displayName: user.name || user.username || 'Unknown User',\n          username: user.username || 'unknown',\n          avatarUrl: user.avatar || '',\n          score: user.score || 0,\n          description: user.description || ''\n        }));\n        \n        // Cache the results\n        searchCache.set(cacheKey, { data: suggestions, timestamp: Date.now() });\n        \n        return res.json({ success: true, data: suggestions });\n      }\n      \n      return res.json({ success: true, data: [] });\n    } catch (error) {\n      // Error fetching from Ethos API\n      return res.json({ \n        success: false, \n        error: \"Failed to fetch from Ethos API\" \n      });\n    }\n  });\n\n  // Farcaster search suggestions - fuzzy search for partial matches\n  app.get(\"/api/farcaster-suggestions\", async (req, res) => {\n    try {\n      const query = req.query.q;\n      const limit = parseInt(req.query.limit as string) || 8;\n\n      if (!query || typeof query !== 'string' || query.length < 1) {\n        return res.json({ success: true, data: [] });\n      }\n\n      const searchQuery = query.trim().toLowerCase();\n      \n      // Check cache first\n      const cacheKey = `farcaster-${searchQuery}-${limit}`;\n      const cached = searchCache.get(cacheKey);\n      if (cached && Date.now() - cached.timestamp < SEARCH_CACHE_TTL) {\n        return res.json({ success: true, data: cached.data, cached: true });\n      }\n      \n      // Enhanced Farcaster mode: try common partial matches first\n      const possibleUsernames = [\n        searchQuery,\n        `${searchQuery}.eth`,\n        searchQuery.replace('.eth', ''),\n        // Try some common completions for popular users\n        ...(searchQuery === 'vit' ? ['vitalik', 'vitalik.eth'] : []),\n        ...(searchQuery === 'dan' ? ['dwr', 'danromero'] : []),\n        ...(searchQuery === 'cook' ? ['cookedzera'] : []),\n        ...(searchQuery === 'jesse' ? ['jessepollak'] : []),\n        ...(searchQuery === 'newton' ? ['newtonhere'] : []),\n        ...(searchQuery === 'newt' ? ['newtonhere'] : [])\n      ];\n\n      const suggestions = [];\n      const foundUserkeys = new Set(); // Track found users to avoid duplicates\n      \n      // Try each possible username\n      for (const username of possibleUsernames.slice(0, 5)) {\n        try {\n          const response = await fetch(`https://api.ethos.network/api/v2/users/by/farcaster/usernames`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'X-Ethos-Client': 'EthosRadar@1.0.0'\n            },\n            body: JSON.stringify({ farcasterUsernames: [username] }),\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            \n            // Farcaster API Response logged\n            \n            if (data.users && data.users.length > 0) {\n              const userResult = data.users[0];\n              const user = userResult.user;\n              const farcasterUsername = userResult.username;\n              const userkey = user.userkeys?.[0] || `farcaster:${farcasterUsername}`;\n              \n              // Skip if we already found this user\n              if (foundUserkeys.has(userkey)) {\n                continue;\n              }\n              foundUserkeys.add(userkey);\n              \n              // Remove .eth suffix from username for display\n              const cleanUsername = farcasterUsername.replace(/\\.eth$/, '');\n              \n              // For Farcaster users, try multiple avatar sources\n              let avatarUrl = user.avatarUrl || '';\n              \n              // Try multiple sources for avatar URL\n              if (!avatarUrl && userkey) {\n                try {\n                  // Try enhanced profile first\n                  const enhancedProfile = await ethosApi.getEnhancedProfile(userkey);\n                  if (enhancedProfile.success && enhancedProfile.data) {\n                    const profileData = enhancedProfile.data as any;\n                    // Try different avatar sources from enhanced profile\n                    if (profileData.data?.ethereumDetails?.ens?.avatar) {\n                      avatarUrl = profileData.data.ethereumDetails.ens.avatar;\n                    } else if (profileData.avatarUrl) {\n                      avatarUrl = profileData.avatarUrl;\n                    }\n                  }\n                  \n                  // If still no avatar, try Farcaster FID-based lookup\n                  if (!avatarUrl) {\n                    const farcasterKey = user.userkeys?.find((key: string) => key.startsWith('service:farcaster:'));\n                    if (farcasterKey) {\n                      const fid = farcasterKey.split(':')[2];\n                      const fidResult = await ethosApi.getUserByFarcasterFid(fid);\n                      if (fidResult.success && fidResult.data?.avatarUrl) {\n                        avatarUrl = fidResult.data.avatarUrl;\n                      }\n                    }\n                  }\n                } catch (err) {\n                  // Continue without avatar\n                }\n              }\n              \n              suggestions.push({\n                userkey: userkey || `farcaster:${cleanUsername}`,\n                displayName: user.displayName || cleanUsername,\n                username: cleanUsername, // Clean username without .eth suffix\n                avatarUrl: avatarUrl || '',\n                score: user.score || 0,\n                description: user.description || `Farcaster: @${cleanUsername}`,\n                farcasterUsername: cleanUsername,\n                hasEthosAccount: true,\n                status: user.status || 'ACTIVE',\n                xpTotal: user.xpTotal || 0,\n                xpStreakDays: user.xpStreakDays || 0,\n                profileId: user.profileId || 0\n              });\n              \n              if (suggestions.length >= limit) break;\n            }\n          }\n        } catch (err) {\n          // Continue to next username\n          continue;\n        }\n      }\n      \n      // Cache the results\n      searchCache.set(cacheKey, { data: suggestions, timestamp: Date.now() });\n      \n      return res.json({ success: true, data: suggestions });\n    } catch (error) {\n      // Error in Farcaster suggestions endpoint\n      return res.json({ \n        success: false, \n        error: \"Failed to fetch Farcaster suggestions\" \n      });\n    }\n  });\n\n  // Pure Farcaster search - completely separate from global search\n  app.post(\"/api/search-user-farcaster\", async (req, res) => {\n    try {\n      const { farcasterUsername } = z.object({\n        farcasterUsername: z.string().min(1),\n      }).parse(req.body);\n\n      // Farcaster Search with Global Fallback\n\n      // Step 1: Try to get FID from Farcaster username API\n      const usernameResult = await ethosApi.getUserByFarcasterUsername(farcasterUsername);\n      \n      if (!usernameResult.success) {\n        // Fallback to global search if no Farcaster user found\n        // No pure Farcaster user found, trying global search fallback\n        \n        try {\n          const globalSearchResult = await ethosApi.searchUsersV1(farcasterUsername, 10);\n          \n          if (globalSearchResult.success && globalSearchResult.data?.ok && globalSearchResult.data.data.values.length > 0) {\n            // Find best match from global search\n            const bestMatch = globalSearchResult.data.data.values[0];\n            \n            // Convert to expected user format\n            const globalUser = {\n              id: bestMatch.profileId,\n              profileId: bestMatch.profileId,\n              displayName: bestMatch.name,\n              username: bestMatch.username,\n              avatarUrl: bestMatch.avatar,\n              description: bestMatch.description,\n              score: bestMatch.score,\n              status: null, // V1 API doesn't provide status, will be filled by enhanced profile API\n              userkeys: [bestMatch.userkey],\n              xpTotal: null,\n              xpStreakDays: null,\n              links: {\n                profile: `https://app.ethos.network/profile/${bestMatch.userkey}`,\n                scoreBreakdown: `https://app.ethos.network/profile/${bestMatch.userkey}/score`\n              },\n              stats: null,\n              _crossReferenced: true, // Mark as cross-referenced from global search\n              _originalQuery: farcasterUsername\n            };\n            \n            // Found global search result\n            return res.json({ success: true, data: globalUser });\n          }\n        } catch (globalError) {\n          // Global search fallback error\n        }\n        \n        return res.status(404).json({\n          success: false,\n          error: `User not found in Farcaster or global search: ${farcasterUsername}`\n        });\n      }\n\n      const userData = usernameResult.data;\n      if (!userData || !userData.user) {\n        return res.status(404).json({\n          success: false,\n          error: `Invalid Farcaster user data for: ${farcasterUsername}`\n        });\n      }\n\n      // Step 2: Extract FID from response\n      const farcasterKey = userData.user.userkeys?.find((key: string) => key.startsWith('service:farcaster:'));\n      if (!farcasterKey) {\n        return res.status(404).json({\n          success: false,\n          error: `No FID found for Farcaster user: ${farcasterUsername}`\n        });\n      }\n\n      const fid = farcasterKey.split(':')[2];\n      // Extracted FID for user\n\n      // Step 3: Get complete profile data using FID API endpoint\n      const fidResult = await ethosApi.getUserByFarcasterFid(fid);\n      \n      if (!fidResult.success) {\n        return res.status(404).json({\n          success: false,\n          error: `Could not get profile data for FID: ${fid}`\n        });\n      }\n\n      // Pure Farcaster Profile Retrieved for FID\n\n      // Return pure Farcaster profile data\n      const enhancedUser = {\n        ...fidResult.data,\n        _isFarcasterEnhanced: true,\n        _fid: fid,\n        _pureFarcaster: true\n      };\n\n      res.json({ success: true, data: enhancedUser });\n    } catch (error) {\n      // Pure Farcaster search error\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Enhanced Farcaster FID lookup for detailed profiles\n  app.get(\"/api/farcaster-fid/:fid\", async (req, res) => {\n    try {\n      const { fid } = req.params;\n      \n      if (!fid || isNaN(Number(fid))) {\n        return res.status(400).json({ \n          success: false, \n          error: 'Valid FID is required' \n        });\n      }\n\n      const result = await ethosApi.getUserByFarcasterFid(fid);\n      \n      if (result.success) {\n        res.json(result);\n      } else {\n        res.status(404).json(result);\n      }\n    } catch (error) {\n      // Farcaster FID search error\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to fetch Farcaster user by FID' \n      });\n    }\n  });\n\n  // Search users via Twitter/X only\n  app.post(\"/api/search-user\", async (req, res) => {\n    try {\n      const { query, searchType } = z.object({\n        query: z.string().min(1),\n        searchType: z.enum(['twitter', 'userkey', 'auto']).optional().default('auto'),\n      }).parse(req.body);\n\n      let result;\n      \n      if (searchType === 'auto') {\n        const parsed = ethosApi.parseUserkey(query);\n        \n        // Try Twitter/X search first\n        if (parsed.type === 'twitter') {\n          const twitterResult = await ethosApi.getUsersByTwitter([query]);\n          if (twitterResult.success && twitterResult.data && twitterResult.data.length > 0) {\n            result = { success: true, data: twitterResult.data[0] };\n          }\n        }\n        \n        // If Twitter search didn't work, fallback to V1 search (searches Twitter profiles too)\n        if (!result || !result.success) {\n          const searchResult = await ethosApi.searchUsersV1(query, 10);\n          if (searchResult.success && searchResult.data && searchResult.data.ok && searchResult.data.data.values.length > 0) {\n            // Filter for Twitter/X profiles only\n            const twitterResults = searchResult.data.data.values.filter(user => \n              user.userkey.includes('service:x.com:') || user.userkey.includes('service:twitter.com:')\n            );\n            \n            if (twitterResults.length > 0) {\n              const v1Result = twitterResults[0];\n              // Convert V1 format to V2 format for consistency\n              const convertedUser = {\n                id: v1Result.profileId, // Keep null as null, don't convert to 0\n                profileId: v1Result.profileId, // Keep null as null\n                displayName: v1Result.name,\n                username: v1Result.username,\n                avatarUrl: v1Result.avatar,\n                description: v1Result.description,\n                score: v1Result.score,\n                status: null, // V1 API doesn't provide reliable status, will be resolved by enhanced profile\n                userkeys: [v1Result.userkey],\n                xpTotal: 0,\n                xpStreakDays: 0,\n                links: {\n                  profile: `https://app.ethos.network/profile/${v1Result.userkey}`,\n                  scoreBreakdown: `https://app.ethos.network/profile/${v1Result.userkey}/score`\n                },\n                stats: {\n                  review: {\n                    received: { negative: 0, neutral: 0, positive: 0 }\n                  },\n                  vouch: {\n                    given: { amountWeiTotal: \"0\", count: 0 },\n                    received: { amountWeiTotal: \"0\", count: 0 }\n                  }\n                }\n              };\n              result = { success: true, data: convertedUser };\n            } else {\n              result = { success: false, error: 'No Twitter/X profiles found' };\n            }\n          } else {\n            result = { success: false, error: 'User not found' };\n          }\n        }\n      } else {\n        // Specific search type - only Twitter/X and userkey supported\n        switch (searchType) {\n          case 'twitter':\n            const twitterResult = await ethosApi.getUsersByTwitter([query]);\n            result = twitterResult.success && twitterResult.data?.length ? \n              { success: true, data: twitterResult.data[0] } : \n              { success: false, error: 'Twitter user not found' };\n            break;\n          case 'userkey':\n            // Direct userkey lookup - only support Twitter/X userkeys\n            if (query.includes('service:x.com:') || query.includes('service:twitter.com:')) {\n              const searchResult = await ethosApi.searchUsersV1(query, 50);\n              \n              if (searchResult.success && searchResult.data?.ok && searchResult.data.data.values.length > 0) {\n                // Find exact userkey match first\n                let v1Result = searchResult.data.data.values.find(user => user.userkey === query);\n                \n                if (!v1Result) {\n                  // Try partial match for Twitter userkeys\n                  const queryParts = query.split(':');\n                  if (queryParts.length >= 3) {\n                    const service = queryParts[1]; // 'x.com'\n                    const identifier = queryParts[2]; // Twitter ID\n                    \n                    v1Result = searchResult.data.data.values.find(user => \n                      user.userkey.includes(service) && user.userkey.includes(identifier)\n                    );\n                  }\n                }\n                \n                if (v1Result) {\n                  const convertedUser = {\n                    id: v1Result.profileId, // Keep null as null\n                    profileId: v1Result.profileId, // Keep null as null\n                    displayName: v1Result.name,\n                    username: v1Result.username,\n                    avatarUrl: v1Result.avatar,\n                    description: v1Result.description,\n                    score: v1Result.score,\n                    status: null, // V1 API doesn't provide reliable status\n                    userkeys: [v1Result.userkey],\n                    xpTotal: null,\n                    xpStreakDays: null,\n                    links: {\n                      profile: `https://app.ethos.network/profile/${v1Result.userkey}`,\n                      scoreBreakdown: `https://app.ethos.network/profile/${v1Result.userkey}/score`\n                    },\n                    stats: null\n                  };\n                  result = { success: true, data: convertedUser };\n                } else {\n                  result = { success: false, error: 'Twitter userkey not found' };\n                }\n              } else {\n                result = { success: false, error: 'Twitter userkey not found' };\n              }\n            } else {\n              result = { success: false, error: 'Only Twitter/X userkeys are supported' };\n            }\n            break;\n          default:\n            result = { success: false, error: 'Only Twitter/X search is supported' };\n        }\n      }\n\n      if (!result.success) {\n        return res.status(404).json(result);\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // General search endpoint that handles addresses and other userkeys\n  app.post(\"/api/search\", async (req, res) => {\n    try {\n      const { query } = z.object({\n        query: z.string().min(1),\n      }).parse(req.body);\n\n      let result;\n      \n      // Parse the userkey to determine search strategy\n      const parsed = ethosApi.parseUserkey(query);\n      \n      if (parsed.type === 'address') {\n        // For addresses, search using V1 API which can find Ethereum addresses\n        const searchResult = await ethosApi.searchUsersV1(query, 50);\n        \n        if (searchResult.success && searchResult.data?.ok && searchResult.data.data.values.length > 0) {\n          // Find exact address match first\n          let v1Result = searchResult.data.data.values.find(user => \n            user.userkey === query || \n            user.userkey.toLowerCase().includes(query.replace('address:', '').toLowerCase())\n          );\n          \n          // If no exact match, take the first result\n          if (!v1Result) {\n            v1Result = searchResult.data.data.values[0];\n          }\n          \n          // Convert V1 format to expected format\n          const convertedUser = {\n            id: v1Result.profileId,\n            profileId: v1Result.profileId,\n            displayName: v1Result.name,\n            username: v1Result.username,\n            avatarUrl: v1Result.avatar,\n            description: v1Result.description,\n            score: v1Result.score,\n            status: null, // V1 API doesn't provide status\n            userkeys: [v1Result.userkey],\n            xpTotal: null,\n            xpStreakDays: null,\n            links: {\n              profile: `https://app.ethos.network/profile/${v1Result.userkey}`,\n              scoreBreakdown: `https://app.ethos.network/profile/${v1Result.userkey}/score`\n            },\n            stats: null\n          };\n          result = { success: true, data: convertedUser };\n        } else {\n          result = { success: false, error: 'Address not found' };\n        }\n      } else if (parsed.type === 'twitter') {\n        // For Twitter, try the dedicated Twitter search first to get real status\n        const twitterId = query.replace('service:x.com:', '');\n        const twitterResult = await ethosApi.getUsersByTwitter([twitterId]);\n        if (twitterResult.success && twitterResult.data?.length) {\n          result = { success: true, data: twitterResult.data[0] };\n        } else {\n          // Fallback to V1 search\n          const searchResult = await ethosApi.searchUsersV1(query, 10);\n          if (searchResult.success && searchResult.data?.ok && searchResult.data.data.values.length > 0) {\n            const twitterResults = searchResult.data.data.values.filter(user => \n              user.userkey.includes('service:x.com:') || user.userkey.includes('service:twitter.com:')\n            );\n            \n            if (twitterResults.length > 0) {\n              const v1Result = twitterResults[0];\n              const convertedUser = {\n                id: v1Result.profileId,\n                profileId: v1Result.profileId,\n                displayName: v1Result.name,\n                username: v1Result.username,\n                avatarUrl: v1Result.avatar,\n                description: v1Result.description,\n                score: v1Result.score,\n                status: null, // V1 API doesn't provide status\n                userkeys: [v1Result.userkey],\n                xpTotal: null,\n                xpStreakDays: null,\n                links: {\n                  profile: `https://app.ethos.network/profile/${v1Result.userkey}`,\n                  scoreBreakdown: `https://app.ethos.network/profile/${v1Result.userkey}/score`\n                },\n                stats: null\n              };\n              result = { success: true, data: convertedUser };\n            } else {\n              result = { success: false, error: 'Twitter user not found' };\n            }\n          } else {\n            result = { success: false, error: 'User not found' };\n          }\n        }\n      } else {\n        // For other types, use general V1 search\n        const searchResult = await ethosApi.searchUsersV1(query, 10);\n        \n        if (searchResult.success && searchResult.data?.ok && searchResult.data.data.values.length > 0) {\n          const v1Result = searchResult.data.data.values[0];\n          const convertedUser = {\n            id: v1Result.profileId,\n            profileId: v1Result.profileId,\n            displayName: v1Result.name,\n            username: v1Result.username,\n            avatarUrl: v1Result.avatar,\n            description: v1Result.description,\n            score: v1Result.score,\n            status: null, // V1 API doesn't provide status\n            userkeys: [v1Result.userkey],\n            xpTotal: null,\n            xpStreakDays: null,\n            links: {\n              profile: `https://app.ethos.network/profile/${v1Result.userkey}`,\n              scoreBreakdown: `https://app.ethos.network/profile/${v1Result.userkey}/score`\n            },\n            stats: null\n          };\n          result = { success: true, data: convertedUser };\n        } else {\n          result = { success: false, error: 'User not found' };\n        }\n      }\n\n      if (!result.success) {\n        return res.status(404).json(result);\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Get enhanced user profile with optimized status detection\n  app.get(\"/api/enhanced-profile/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const { refresh } = req.query; // Add refresh parameter support\n      \n      // Check cache first (skip if refresh=true)\n      const cacheKey = `profile-${userkey}`;\n      const cached = profileCache.get(cacheKey);\n      if (!refresh && cached && Date.now() - cached.timestamp < PROFILE_CACHE_TTL) {\n        return res.json({ success: true, data: cached.data, cached: true });\n      }\n      \n      // Fast status detection using optimized V2 API calls\n      let userResult;\n      \n      if (userkey.startsWith('profileId:')) {\n        const profileId = parseInt(userkey.split(':')[1]);\n        const profileResult = await ethosApi.getUsersByProfileId([profileId]);\n        if (profileResult.success && profileResult.data && profileResult.data.length > 0) {\n          userResult = profileResult.data[0];\n        }\n      } else if (userkey.includes('service:x.com:')) {\n        // For Twitter users, get status directly from Twitter API (fastest)\n        const parts = userkey.split(':');\n        const twitterId = parts[2];\n        const twitterResult = await ethosApi.getUsersByTwitter([twitterId]);\n        if (twitterResult.success && twitterResult.data && twitterResult.data.length > 0) {\n          userResult = twitterResult.data[0];\n        }\n      } else if (userkey.startsWith('address:')) {\n        // For address userkeys (common from cross-referenced Farcaster results)\n        const address = userkey.split(':')[1];\n        const addressResult = await ethosApi.getUsersByAddresses([address]);\n        if (addressResult.success && addressResult.data && addressResult.data.length > 0) {\n          userResult = addressResult.data[0];\n        }\n      } else {\n        // For other userkey types, try direct lookup first\n        const directResult = await ethosApi.getUserByUserkey(userkey);\n        if (directResult.success) {\n          userResult = directResult.data;\n        }\n      }\n      \n      // Enhanced fallback: If no V2 API result, try V1 API and convert\n      if (!userResult) {\n        // No V2 API result, trying V1 fallback for enhanced profile\n        \n        try {\n          const v1SearchResult = await ethosApi.searchUsersV1(userkey, 5);\n          \n          if (v1SearchResult.success && v1SearchResult.data?.ok && v1SearchResult.data.data.values.length > 0) {\n            // Find exact userkey match or best match\n            let v1User = v1SearchResult.data.data.values.find(user => user.userkey === userkey);\n            if (!v1User) {\n              v1User = v1SearchResult.data.data.values[0]; // Use first result as fallback\n            }\n            \n            // Convert V1 result to V2 format with enhanced data fetching\n            let enhancedXpTotal = null;\n            let enhancedXpStreak = null;\n            let enhancedStatus = null;\n            \n            // Try to get enhanced data if profileId exists\n            if (v1User.profileId) {\n              try {\n                const profileResult = await ethosApi.getUsersByProfileId([v1User.profileId]);\n                if (profileResult.success && profileResult.data && profileResult.data.length > 0) {\n                  const enhancedData = profileResult.data[0];\n                  enhancedXpTotal = enhancedData.xpTotal;\n                  enhancedXpStreak = enhancedData.xpStreakDays;\n                  enhancedStatus = enhancedData.status;\n                }\n              } catch (enhanceError) {\n                // Could not enhance V1 user data\n              }\n            }\n            \n            userResult = {\n              id: v1User.profileId || 0,\n              profileId: v1User.profileId || 0, \n              displayName: v1User.name,\n              username: v1User.username,\n              avatarUrl: v1User.avatar,\n              description: v1User.description,\n              score: v1User.score,\n              status: enhancedStatus || (v1User.profileId ? 'ACTIVE' : 'UNINITIALIZED'),\n              userkeys: [v1User.userkey],\n              xpTotal: enhancedXpTotal || 0,\n              xpStreakDays: enhancedXpStreak || 0,\n              links: {\n                profile: `https://app.ethos.network/profile/${v1User.userkey}`,\n                scoreBreakdown: `https://app.ethos.network/profile/${v1User.userkey}/score`\n              },\n              stats: null\n            };\n            \n            // Enhanced V1 fallback result\n          }\n        } catch (v1Error) {\n          // V1 fallback error for enhanced profile\n        }\n      }\n\n      // If we got user data, add weekly XP data and leaderboard position, then return\n      if (userResult) {\n        // Get weekly XP for users with actual activity\n        let weeklyXpGain = 0;\n        if (userResult.status === 'ACTIVE' && userResult.xpTotal > 0) {\n          weeklyXpGain = await ethosApi.getWeeklyXpGain(userkey);\n        }\n        \n        // Get leaderboard position from categories API\n        let leaderboardPosition = userResult.leaderboardPosition;\n        if (!leaderboardPosition) {\n          try {\n            leaderboardPosition = await ethosApi.getUserLeaderboardPosition(userkey);\n          } catch (error) {\n            // Could not fetch leaderboard position\n          }\n        }\n        \n        const profileData = {\n          id: userResult.id,\n          profileId: userResult.profileId,\n          displayName: userResult.displayName,\n          username: userResult.username,\n          avatarUrl: userResult.avatarUrl,\n          description: userResult.description,\n          score: userResult.score,\n          status: userResult.status,\n          userkeys: userResult.userkeys,\n          xpTotal: userResult.xpTotal,\n          xpStreakDays: userResult.xpStreakDays,\n          leaderboardPosition: leaderboardPosition || null,\n          weeklyXpGain: weeklyXpGain,\n          links: userResult.links || {\n            profile: `https://app.ethos.network/profile/${userkey}`,\n            scoreBreakdown: `https://app.ethos.network/profile/${userkey}/score`\n          },\n          stats: userResult.stats,\n          connectedAccounts: (userResult as any).connectedAccounts || null\n        };\n        \n        // Cache the result\n        profileCache.set(cacheKey, { data: profileData, timestamp: Date.now() });\n        \n        return res.json({\n          success: true,\n          data: profileData\n        });\n      }\n\n      // If no user found, return not found\n      return res.status(404).json({\n        success: false,\n        error: 'User not found on Ethos Protocol'\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n\n  // Get social media attestations for a user\n  app.get(\"/api/attestations/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      \n      // Get the correct Ethos profile ID from user data\n      let profileId: number;\n      if (userkey.startsWith('profileId:')) {\n        profileId = parseInt(userkey.split(':')[1]);\n      } else if (userkey.startsWith('service:x.com:')) {\n        // For Twitter userkeys, we need to get the actual Ethos profile ID from V2 API\n        const parts = userkey.split(':');\n        const twitterId = parts[2];\n        \n        try {\n          const userResult = await ethosApi.getUsersByTwitter([twitterId]);\n          if (userResult.success && userResult.data && userResult.data.length > 0) {\n            profileId = userResult.data[0].profileId;\n\n          } else {\n            return res.status(404).json({\n              success: false,\n              error: 'User profile not found for Twitter ID'\n            });\n          }\n        } catch (error) {\n          return res.status(500).json({\n            success: false,\n            error: 'Failed to lookup user profile'\n          });\n        }\n      } else if (userkey.startsWith('address:')) {\n        // For address userkeys (common from cross-referenced Farcaster results)\n        const address = userkey.split(':')[1];\n        \n        try {\n          const addressResult = await ethosApi.getUsersByAddresses([address]);\n          if (addressResult.success && addressResult.data && addressResult.data.length > 0) {\n            profileId = addressResult.data[0].profileId;\n          } else {\n            return res.status(404).json({\n              success: false,\n              error: 'User profile not found for address'\n            });\n          }\n        } catch (error) {\n          return res.status(500).json({\n            success: false,\n            error: 'Failed to lookup user profile by address'\n          });\n        }\n      } else {\n        // Try to get profile ID from generic userkey lookup\n        try {\n          const userResult = await ethosApi.getUserByUserkey(userkey);\n          if (userResult.success && userResult.data && userResult.data.profileId) {\n            profileId = userResult.data.profileId;\n          } else {\n            return res.status(404).json({\n              success: false,\n              error: 'User profile not found for userkey'\n            });\n          }\n        } catch (error) {\n          return res.status(500).json({\n            success: false,\n            error: 'Failed to lookup user profile'\n          });\n        }\n      }\n\n\n      \n      const attestations = await getExtendedAttestations(profileId);\n      \n      const formattedAttestations = attestations.map(att => ({\n        service: att.attestation.service,\n        serviceName: formatServiceName(att.attestation.service),\n        icon: mapServiceToIcon(att.attestation.service),\n        account: att.attestation.account,\n        username: att.extra?.username || att.attestation.account,\n        displayName: att.extra?.name || '',\n        avatar: att.extra?.avatar || '',\n        website: att.extra?.website || '',\n        followers: att.extra?.followersCount || 0,\n        verified: att.extra?.isBlueVerified || false,\n        createdAt: att.attestation.createdAt,\n        joinedAt: att.extra?.joinedAt || null\n      }));\n\n      res.json({\n        success: true,\n        data: formattedAttestations\n      });\n    } catch (error) {\n      // Error fetching attestations\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n  // Get trust score - Enhanced with V1 detailed breakdown\n  app.get(\"/api/trust-score/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      // Get V1 detailed score first (authentic data)\n      const v1Result = await ethosApi.getV1Score(userkey);\n      \n      if (v1Result.success && v1Result.data?.data) {\n        const scoreData = v1Result.data.data;\n        const elements = scoreData.elements || {};\n        \n        // Extract real metrics from V1 elements\n        const reviewImpact = elements['Review Impact'];\n        const vouchImpact = elements['Vouched Ethereum Impact'];  \n        const vouchCount = elements['Number of Vouchers Impact'];\n        const mutualVouch = elements['Mutual Vouch Bonus'];\n        const reputationMarket = elements['Reputation Market Impact'];\n        \n        // Get user profile data for display info\n        const userResult = await ethosApi.getUserByUserkey(userkey);\n        const displayName = userResult.success ? userResult.data?.displayName : 'Unknown';\n        \n        res.json({\n          success: true,\n          data: {\n            id: userResult.data?.id || 0,\n            profileId: userResult.data?.profileId || 0,\n            displayName: displayName || 'Unknown User',\n            score: scoreData.score,\n            level: scoreData.score >= 2000 ? 'Exemplary' : \n                   scoreData.score >= 1600 ? 'Reputable' :\n                   scoreData.score >= 1200 ? 'Neutral' :\n                   scoreData.score >= 800 ? 'Questionable' : 'Untrusted',\n            userkeys: [userkey],\n            // V1 authentic breakdown\n            v1Details: {\n              totalElements: Object.keys(elements).length,\n              reviewScore: reviewImpact?.weighted || 0,\n              reviewCount: reviewImpact?.element?.metadata?.positiveReviewCount || 0,\n              vouchScore: vouchImpact?.weighted || 0,\n              vouchersCount: vouchCount?.element?.metadata?.vouches || 0,\n              stakedEth: vouchImpact?.element?.metadata?.stakedEth || 0,\n              mutualVouches: mutualVouch?.element?.metadata?.mutualVouches || 0,\n              reputationMarketScore: reputationMarket?.weighted || 0,\n              elements: elements // Full breakdown for detailed analysis\n            }\n          }\n        });\n      } else {\n        // Fallback to existing V2 API\n        const result = await ethosApi.getScoreByUserkey(userkey);\n        \n        if (!result.success) {\n          return res.status(404).json(result);\n        }\n\n        res.json(result);\n      }\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Get multiple trust scores\n  app.post(\"/api/trust-scores\", async (req, res) => {\n    try {\n      const { userkeys } = z.object({\n        userkeys: z.array(z.string()).min(1).max(50),\n      }).parse(req.body);\n\n      const result = await ethosApi.getScoresByUserkeys(userkeys);\n      \n      if (!result.success) {\n        return res.status(400).json(result);\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // V1 Score Direct Access - REAL DATA ONLY\n  app.get(\"/api/v1-score/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const result = await ethosApi.getV1Score(userkey);\n      \n      if (result.success && result.data) {\n        res.json(result);\n      } else {\n        res.status(404).json({\n          success: false,\n          error: result.error || 'V1 score not found'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error'\n      });\n    }\n  });\n\n  // V1 Score History - REAL DATA ONLY  \n  app.get(\"/api/v1-score-history/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const duration = req.query.duration as string || '30d';\n      const result = await ethosApi.getV1ScoreHistory(userkey, duration);\n      \n      if (result.success && result.data) {\n        res.json(result);\n      } else {\n        res.status(404).json({\n          success: false,\n          error: result.error || 'V1 score history not found'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error'\n      });\n    }\n  });\n\n  // Get score calculation status\n  app.get(\"/api/score-status/:userkey\", async (req, res) => {\n    try {\n      const { userkey } = req.params;\n      \n      const result = await ethosApi.getScoreStatus(userkey);\n      \n      if (!result.success) {\n        return res.status(404).json(result);\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Get real user statistics using V1 API + vouch activities for complete data\n  // Dashboard reviews using accurate user stats data (authentic sentiment breakdown)\n  app.get(\"/api/dashboard-reviews/:userkey\", async (req, res) => {\n    const userkey = decodeURIComponent(req.params.userkey);\n    const { refresh } = req.query; // Add refresh parameter support\n    \n    try {\n      // Dashboard Reviews API - Fetching for user\n      \n      // Get user data with accurate review stats (not limited by pagination)\n      const userResult = await ethosApi.getRealUserData(userkey);\n      \n      if (!userResult.success || !userResult.data?.stats?.review?.received) {\n        // Dashboard Reviews API - No review stats for user\n        return res.json({\n          success: true,\n          data: {\n            totalReviews: 0,\n            positiveReviews: 0,\n            neutralReviews: 0,\n            negativeReviews: 0,\n            positivePercentage: 0\n          }\n        });\n      }\n      \n      const reviewStats = userResult.data.stats.review.received;\n      const positiveReviews = reviewStats.positive || 0;\n      const neutralReviews = reviewStats.neutral || 0;\n      const negativeReviews = reviewStats.negative || 0;\n      const totalReviews = positiveReviews + neutralReviews + negativeReviews;\n      \n      // Calculate positive percentage excluding neutral reviews (matching official Ethos calculation)\n      const nonNeutralReviews = positiveReviews + negativeReviews;\n      const positivePercentage = nonNeutralReviews > 0 ? \n        Math.round((positiveReviews / nonNeutralReviews) * 100) : 0;\n      \n      // Dashboard Reviews API - successful response\n      \n      res.json({\n        success: true,\n        data: {\n          totalReviews,\n          positiveReviews,\n          neutralReviews,\n          negativeReviews,\n          positivePercentage\n        }\n      });\n    } catch (error) {\n      console.error(`‚ùå Dashboard Reviews API error for ${userkey}:`, error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.get(\"/api/user-stats/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      // Get both V1 score data, vouch activities, and V2 user data for complete information\n      const [v1Result, vouchResult, v2UserResult] = await Promise.all([\n        ethosApi.getV1Score(userkey),\n        ethosApi.getUserVouchActivities(userkey),\n        ethosApi.getRealUserData(userkey)\n      ]);\n      \n      if (v1Result.success && v1Result.data?.data?.elements) {\n        const elements = v1Result.data.data.elements;\n        \n        // Extract real data from V1 elements (received vouches and reviews)\n        const reviewImpact = elements['Review Impact'];\n        const vouchImpact = elements['Vouched Ethereum Impact'];  \n        const vouchCount = elements['Number of Vouchers Impact'];\n        \n        // Use V2 API for ALL vouch data (count and amounts) - most accurate source\n        let givenVouchCount = 0;\n        let givenVouchAmount = 0;\n        let receivedVouchAmount = 0;\n        let receivedVouchCount = 0;\n        \n        // Get authentic vouch data from V2 users API if available\n        if (v2UserResult.success && v2UserResult.data?.stats?.vouch) {\n          const vouchStats = v2UserResult.data.stats.vouch;\n          \n          // Use V2 API for both count and amount - this is the authoritative source\n          givenVouchCount = vouchStats.given.count || 0;\n          givenVouchAmount = parseFloat(String(vouchStats.given.amountWeiTotal || '0')) / 1e18;\n          receivedVouchAmount = parseFloat(String(vouchStats.received.amountWeiTotal || '0')) / 1e18;\n          receivedVouchCount = vouchStats.received.count || 0;\n        } else {\n          // Fallback: try direct V2 API calls if v2UserResult didn't work\n          try {\n            let directResult = null;\n            \n            if (userkey.startsWith('profileId:')) {\n              const profileId = parseInt(userkey.split(':')[1]);\n              directResult = await ethosApi.getUsersByProfileId([profileId]);\n            } else if (userkey.startsWith('service:x.com:')) {\n              const twitterId = userkey.split(':').pop();\n              if (twitterId) {\n                directResult = await ethosApi.getUsersByTwitter([twitterId]);\n              }\n            } else if (userkey.startsWith('address:')) {\n              const address = userkey.split(':')[1];\n              directResult = await ethosApi.getUsersByAddresses([address]);\n            }\n            \n            if (directResult?.success && directResult.data?.[0]?.stats?.vouch) {\n              const vouchStats = directResult.data[0].stats.vouch;\n              // Use V2 API for both count and amount from direct result\n              givenVouchCount = vouchStats.given.count || 0;\n              givenVouchAmount = parseFloat(String(vouchStats.given.amountWeiTotal || '0')) / 1e18;\n              receivedVouchAmount = parseFloat(String(vouchStats.received.amountWeiTotal || '0')) / 1e18;\n              receivedVouchCount = vouchStats.received.count || 0;\n            }\n          } catch (error) {\n            // Final fallback to V1 metadata only if V2 completely unavailable\n            receivedVouchAmount = vouchImpact?.element?.metadata?.stakedEth || 0;\n            receivedVouchCount = vouchCount?.element?.metadata?.vouches || 0;\n          }\n        }\n\n        const realStats = {\n          review: {\n            received: {\n              negative: reviewImpact?.element?.metadata?.negativeReviewCount || 0,\n              neutral: reviewImpact?.element?.metadata?.neutralReviewCount || 0,\n              positive: reviewImpact?.element?.metadata?.positiveReviewCount || 0\n            }\n          },\n          vouch: {\n            given: {\n              amountWeiTotal: Math.floor(givenVouchAmount * 1e18).toString(),\n              count: givenVouchCount\n            },\n            received: {\n              amountWeiTotal: Math.floor(receivedVouchAmount * 1e18).toString(),\n              count: receivedVouchCount\n            }\n          }\n        };\n        \n        res.json({\n          success: true,\n          data: realStats\n        });\n      } else {\n        // No user data available\n        res.status(404).json({\n          success: false,\n          error: 'User stats not found'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Get user score history using V1 API - REAL DATA ONLY\n  app.get(\"/api/score-history/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const duration = req.query.duration as string || '30d';\n      // Use V1 score history API for authentic data\n      const v1Result = await ethosApi.getV1ScoreHistory(userkey, duration);\n      \n      if (v1Result.success && v1Result.data?.values) {\n        // Convert V1 format to expected format with calculated changes\n        const values = v1Result.data.values;\n        \n        // Sort by timestamp to ensure chronological order (oldest first)\n        const sortedValues = values.sort((a: any, b: any) => \n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n        \n        const historyData = sortedValues.map((entry: any, index: number) => {\n          // Calculate change from previous entry (authentic data)\n          let change = 0;\n          if (index > 0) {\n            const previousScore = sortedValues[index - 1].score; // Previous entry is older\n            change = entry.score - previousScore;\n            \n\n          }\n          \n          return {\n            timestamp: entry.createdAt,\n            score: entry.score,\n            change: change,\n            activity: change > 0 ? 'score_increase' : change < 0 ? 'score_decrease' : 'score_update',\n            reason: change > 0 ? 'Trust network growth' : change < 0 ? 'Score recalculation' : 'Score maintenance'\n          };\n        });\n        \n        // Return in reverse chronological order (newest first) for UI display\n        const finalHistoryData = historyData.reverse();\n        \n        res.json({\n          success: true,\n          data: finalHistoryData\n        });\n      } else {\n        // Fallback to mock history generation if V1 fails (TEMPORARY)\n        const result = await ethosApi.getScoreHistory(userkey);\n        res.json({\n          success: true,\n          data: result\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to fetch score history' \n      });\n    }\n  });\n\n  // REMOVED DUPLICATE - using the one below\n\n  // Get review count between users\n  app.get(\"/api/review-count\", async (req, res) => {\n    try {\n      const { author, subject } = z.object({\n        author: z.string(),\n        subject: z.string(),\n      }).parse(req.query);\n\n      const result = await ethosApi.getReviewCountBetween(author, subject);\n      \n      if (!result.success) {\n        return res.status(404).json(result);\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Generate share content for social platforms\n  app.post(\"/api/generate-share-content\", async (req, res) => {\n    try {\n      const { userkey, platform } = z.object({\n        userkey: z.string(),\n        platform: z.enum(['farcaster', 'twitter', 'telegram']).default('farcaster'),\n      }).parse(req.body);\n\n      // Get authentic Ethos V1 score and tier data (NO MOCK DATA)\n      const v1ScoreResult = await ethosApi.getV1Score(userkey);\n      \n      if (!v1ScoreResult.success || !v1ScoreResult.data?.ok) {\n        return res.status(404).json({ \n          success: false, \n          error: 'Could not retrieve authentic Ethos score from V1 API' \n        });\n      }\n\n      const score = v1ScoreResult.data.data.score;\n      \n      // Official Ethos tier system from developers.ethos.network API documentation\n      const getOfficialEthosTier = (score: number) => {\n        if (score >= 2000) {\n          return {\n            tier: 'Exemplary',\n            emoji: 'üíé',\n            flex: 'EXEMPLARY',\n            level: 'exemplary'\n          };\n        } else if (score >= 1600) {\n          return {\n            tier: 'Reputable',\n            emoji: 'üåü',\n            flex: 'REPUTABLE',\n            level: 'reputable'\n          };\n        } else if (score >= 1200) {\n          return {\n            tier: 'Neutral',\n            emoji: '‚öñÔ∏è',\n            flex: 'BUILDING',\n            level: 'neutral'\n          };\n        } else if (score >= 800) {\n          return {\n            tier: 'Questionable',\n            emoji: '‚ö†Ô∏è',\n            flex: 'DEVELOPING',\n            level: 'questionable'\n          };\n        } else {\n          return {\n            tier: 'Untrusted',\n            emoji: 'üî¥',\n            flex: 'STARTING',\n            level: 'untrusted'\n          };\n        }\n      }\n      \n      const tierInfo = getOfficialEthosTier(score);\n      \n      // Get authentic user profile data for proper username display\n      let displayName = 'Anon';\n      let leaderboardPosition = null;\n      \n      try {\n        // Use the same enhanced profile approach that works for the UI to get authentic username\n        const userResult = await ethosApi.getRealUserData(userkey);\n        if (userResult.success && userResult.data) {\n          // Try multiple fields to get the best display name\n          displayName = userResult.data.username || userResult.data.displayName;\n          \n          // If still no name found, extract from userkey as last resort\n          if (!displayName || displayName === 'Anon') {\n            displayName = ethosApi.extractUsernameFromUserkey(userkey);\n          }\n          \n        } else {\n          // Fallback: extract from userkey if it's a service-based key\n          displayName = ethosApi.extractUsernameFromUserkey(userkey);\n        }\n        \n        // Final fallback to prevent empty names\n        if (!displayName) {\n          displayName = 'Anon';\n        }\n      } catch (error) {\n        displayName = ethosApi.extractUsernameFromUserkey(userkey) || 'Anon';\n      }\n      \n      // Try to get leaderboard position from categories API\n      try {\n        leaderboardPosition = await ethosApi.getUserLeaderboardPosition(userkey);\n      } catch (error) {\n        // Could not fetch leaderboard position\n      }\n      \n      let content = '';\n      switch (platform) {\n        case 'farcaster':\n          const farcasterTemplates = [\n            `${tierInfo.emoji} ${tierInfo.tier.toUpperCase()} TIER ${tierInfo.emoji}\\n\\nüìä Trust Score: ${score} | ${tierInfo.tier}\\nüë§ Identity: ${displayName}\\nüèÜ Powered by @ethos_network protocol\\n\\nüíé Want to know YOUR web3 reputation?\\nüîç Try Ethosradar.com - Multi-chain scanner!\\n\\n#TrustScore #Web3Rep #EthosRadar`,\n            `üíØ REPUTATION FLEX! ${tierInfo.tier.toUpperCase()}\\n\\n${tierInfo.emoji} ${score} Trust Rating | ${tierInfo.flex}\\n‚ö° Identity: ${displayName}\\nüåê Multi-platform verified by @ethos_network\\n\\nüéØ Your turn! Check your rep:\\nüîó Ethosradar.com\\n\\n#Ethos_network #Web3Trust #EthosRadar`,\n            `üìà CREDIBILITY UNLOCK ${tierInfo.emoji}\\n\\n${tierInfo.tier} Status Achieved!\\n‚Ä¢ Score: ${score} ${tierInfo.emoji}\\n‚Ä¢ Identity: ${displayName}\\n‚Ä¢ Network: Multi-chain ‚úÖ\\n\\nüö® Check YOUR tier:\\nüîç Ethosradar.com\\n\\n#Web3Intel #TrustScore #EthosRadar`\n          ];\n          content = farcasterTemplates[Math.floor(Math.random() * farcasterTemplates.length)];\n          break;\n        case 'twitter':\n          const twitterTemplates = [\n            `${tierInfo.emoji} ${tierInfo.flex} ON-CHAIN! ${tierInfo.emoji}\\n\\nüìä Trust Score: ${score} | ${tierInfo.tier}\\nüë§ Identity: ${displayName}\\nüèÜ @ethos_network verified\\n\\nüíé Check YOUR web3 reputation:\\nüîç Ethosradar.com\\n\\n#TrustScore #Web3Rep #EthosRadar #CryptoTwitter`,\n            `üíØ CT FLEX ALERT! ${tierInfo.tier.toUpperCase()}\\n\\n${tierInfo.emoji} ${score} Trust Rating | ${tierInfo.flex}\\n‚ö° Identity: ${displayName}\\nüåê Multi-platform by @ethos_network\\n\\nüéØ Your turn:\\nüîó Ethosradar.com\\n\\n#CryptoTwitter #Web3Trust #EthosRadar`,\n            `üìà ${tierInfo.tier.toUpperCase()} STATUS UNLOCKED ${tierInfo.emoji}\\n\\n‚Ä¢ Score: ${score}\\n‚Ä¢ Identity: ${displayName}\\n‚Ä¢ Tier: ${tierInfo.flex}\\n‚Ä¢ Network: Multi-chain ‚úÖ\\n\\nüö® Find YOUR tier:\\nüîç Ethosradar.com\\n\\n#Web3Intel #TrustScore #EthosRadar`,\n            `${tierInfo.emoji} REPUTATION THREAD ${tierInfo.emoji}\\n\\n${displayName} just achieved ${tierInfo.tier}!\\nScore: ${score} | Status: ${tierInfo.flex}\\n\\nüìä @ethos_network verified\\nüí™ Building web3 credibility\\n\\nüî• Check yours:\\nüì± Ethosradar.com\\n\\n#TrustScore #Web3Rep #EthosRadar`,\n            `üíØ ON-CHAIN CREDIBILITY FLEX:\\n\\nüî• ${tierInfo.tier} | Score: ${score}\\nüèÜ Rank: #${leaderboardPosition || 'TBD'} Overall\\n${tierInfo.emoji} Status: ${tierInfo.flex}\\nüß¨ Verified by @ethos_network\\n\\nüéØ Check your standing:\\nüîó Ethosradar.com\\n\\n#Web3Trust #EthosRadar`\n          ];\n          content = twitterTemplates[Math.floor(Math.random() * twitterTemplates.length)];\n          break;\n        case 'telegram':\n          content = `${tierInfo.emoji} ${tierInfo.tier.toUpperCase()} ACHIEVED ${tierInfo.emoji}\\n\\nJust scanned my Web3 reputation:\\nüìä ${score} | ${tierInfo.flex}\\nüë§ ${displayName}\\nüèÜ @ethos_network verified\\n\\nüîç Check yours: Ethosradar.com\\n#TrustScore #Web3`;\n          break;\n      }\n\n      res.json({\n        success: true,\n        data: {\n          content,\n          score,\n          level: tierInfo.level,\n          tier: tierInfo.tier,\n          platform,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Health check endpoint to test Ethos API connectivity\n  app.get(\"/api/health\", async (req, res) => {\n    try {\n      // Test with a known address to verify API connectivity\n      const testResult = await ethosApi.searchUsers('vitalik', undefined, 1);\n      \n      res.json({\n        success: true,\n        ethos_api_status: testResult.success ? 'connected' : 'error',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        ethos_api_status: 'error',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  });\n\n  // Get user network data using real Ethos API - AUTHENTIC DATA ONLY\n  app.get('/api/user-network/:userkey', async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      // Use the network data API that calculates strong connections\n      const networkResult = await ethosApi.getSimpleNetworkData(userkey);\n      \n      if (networkResult.success && networkResult.data) {\n        res.json(networkResult);\n      } else {\n        res.status(404).json({\n          success: false,\n          error: networkResult.error || 'Network data not found'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error'\n      });\n    }\n  });\n\n  // Get user vouch activities using real Ethos V2 API\n  app.get(\"/api/user-vouch-activities/:userkey\", async (req, res) => {\n    try {\n      const { userkey } = req.params;\n      const { refresh } = req.query; // Add refresh parameter support\n      \n      // Get authentic user stats first for amount calculations\n      let userStats = null;\n      try {\n        let directResult = null;\n        \n        if (userkey.startsWith('profileId:')) {\n          // For profileId format, use profile-id endpoint\n          const profileId = parseInt(userkey.split(':')[1]);\n          directResult = await ethosApi.getUsersByProfileId([profileId]);\n        } else if (userkey.startsWith('service:x.com:')) {\n          // For Twitter service format, use x endpoint  \n          const twitterId = userkey.split(':').pop();\n          if (twitterId) {\n            directResult = await ethosApi.getUsersByTwitter([twitterId]);\n          }\n        } else if (userkey.startsWith('address:')) {\n          // For address format, use address lookup\n          const address = userkey.split(':')[1];\n          if (address) {\n            directResult = await ethosApi.getUsersByAddresses([address]);\n          }\n        } else {\n          // Try fallback with direct user lookup\n          directResult = await ethosApi.getUserByUserkey(userkey);\n        }\n        \n        userStats = directResult?.success ? directResult.data?.[0]?.stats : null;\n        if (userStats?.vouch) {\n        }\n      } catch (error) {\n      }\n      \n      // Get vouch activities using correct V2 API endpoints with user stats for amount calculation\n      const result = await ethosApi.getUserVouchActivities(userkey, userStats);\n      \n      let receivedVouches: any[] = [];\n      let givenVouches: any[] = [];\n      // V2 API provides accurate totals directly\n      \n      if (result.success && result.data) {\n        \n        // Remove hardcoded average calculation - use actual vouch amounts from API\n        \n\n        \n        // Use the pre-formatted received vouches with rich user info from the service\n        receivedVouches = result.data.received || [];\n\n        // V2 API already provides accurate totals - no need for v1 stats fallback\n        \n        // Use the pre-formatted given vouches with rich user info from the service  \n        givenVouches = result.data.given || [];\n      }\n\n      // Get real-time ETH price from CoinGecko API (public, no rate limits)\n      let ethUsdRate = 3400; // fallback\n      try {\n        const coingeckoResponse = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd&include_24hr_change=true');\n        const coingeckoData = await coingeckoResponse.json();\n        if (coingeckoData.ethereum?.usd) {\n          ethUsdRate = coingeckoData.ethereum.usd;\n        }\n      } catch (error) {\n      }\n\n      // Also add declared totalGivenEth if it was calculated\n      const responseData: any = {\n        received: receivedVouches,\n        given: givenVouches,\n        total: receivedVouches.length + givenVouches.length,\n        ethUsdRate: ethUsdRate\n      };\n\n      // Add authentic v2 totals from the API response data if available\n      if (result.success && result.data) {\n        // Use v2 calculated totals from the service (more accurate than v1)\n        responseData.totalGivenEth = result.data.totalGivenEth || 0;\n        responseData.totalReceivedEth = result.data.totalReceivedEth || 0;\n        responseData.totalGivenUsd = responseData.totalGivenEth * ethUsdRate;\n        responseData.totalReceivedUsd = responseData.totalReceivedEth * ethUsdRate;\n      } else {\n        // Fallback to 0 if no authentic data available\n        responseData.totalGivenEth = 0;\n        responseData.totalReceivedEth = 0;\n        responseData.totalGivenUsd = 0;\n        responseData.totalReceivedUsd = 0;\n      }\n\n      res.json({ \n        success: true, \n        data: responseData\n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // 7-day score momentum with score changes endpoint using Ethos API v1 score history\n  app.get(\"/api/weekly-activities/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      \n      // Use 7-day duration parameter as specified in API documentation\n      const scoreHistoryUrl = `https://api.ethos.network/api/v1/score/${encodeURIComponent(userkey)}/history?duration=7d&limit=200`;\n      \n      const response = await fetch(scoreHistoryUrl, {\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'EthosRadar/1.0'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.ok && data.data && data.data.values) {\n        // Get score history from the last 7 days\n        const scoreHistory = data.data.values;\n        \n        // Calculate score changes by comparing consecutive entries\n        let totalScoreChange = 0;\n        let totalXpGain = 0;\n        const dailyActivity = new Map();\n        \n        // Sort by date to calculate proper score changes\n        const sortedHistory = scoreHistory.sort((a: any, b: any) => \n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n        \n        const activities = [];\n        \n        for (let i = 1; i < sortedHistory.length; i++) {\n          const current = sortedHistory[i];\n          const previous = sortedHistory[i - 1];\n          const scoreChange = current.score - previous.score;\n          \n          if (scoreChange !== 0) {\n            const date = new Date(current.createdAt).toDateString();\n            \n            totalScoreChange += scoreChange;\n            \n            // More realistic XP estimation based on score change magnitude\n            const xpGain = Math.abs(scoreChange) <= 5 ? Math.abs(scoreChange) * 2 : Math.abs(scoreChange) * 1.5;\n            totalXpGain += xpGain;\n            \n            activities.push({\n              id: current.id,\n              timestamp: current.createdAt,\n              scoreChange: scoreChange,\n              xpGain: xpGain,\n              score: current.score,\n              type: scoreChange > 0 ? 'score_increase' : 'score_decrease'\n            });\n            \n            // Group by day for streak calculation\n            if (!dailyActivity.has(date)) {\n              dailyActivity.set(date, []);\n            }\n            dailyActivity.get(date).push({\n              scoreChange,\n              xpGain,\n              timestamp: current.createdAt\n            });\n          }\n        }\n        // Use activeDays (unique days with score changes) as our \"7-day activity streak\"\n        let streakDays = dailyActivity.size;\n        \n        return res.json({\n          success: true,\n          data: {\n            activities: activities.slice(0, 10), // Return recent 10 activities\n            summary: {\n              streakDays: streakDays,\n              scoreChange: totalScoreChange,\n              xpGain: totalXpGain,\n              totalChanges: activities.length,\n              activeDays: dailyActivity.size\n            }\n          }\n        });\n      }\n      \n      return res.json({ success: true, data: { activities: [], summary: null } });\n    } catch (error) {\n      console.error(\"Error fetching weekly activities:\", error);\n      return res.json({ \n        success: false, \n        error: \"Failed to fetch weekly activities\" \n      });\n    }\n  });\n\n  // Score history endpoint using Ethos V1 scores API\n  app.get('/api/score-history/:userkey', async (req, res) => {\n    try {\n      const { userkey } = req.params;\n      // Fetch score history from Ethos V1 API\n      const scoreHistoryData = await ethosApi.getScoreHistory(userkey);\n      \n      res.json({\n        success: true,\n        data: scoreHistoryData\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: 'Failed to fetch score history data'\n      });\n    }\n  });\n\n  // Helper function to map review sentiment\n  function mapReviewSentiment(sentiment: any): 'positive' | 'negative' | 'neutral' {\n    // Handle numeric scores first (data.score field from API)\n    if (typeof sentiment === 'number') {\n      if (sentiment > 0) return 'positive';\n      if (sentiment < 0) return 'negative';\n      return 'neutral';\n    }\n    \n    // Handle string representations\n    const sentimentStr = String(sentiment).toLowerCase();\n    if (sentimentStr === 'positive' || sentimentStr === '1' || sentimentStr === 'true') return 'positive';\n    if (sentimentStr === 'negative' || sentimentStr === '-1' || sentimentStr === 'false') return 'negative';\n    return 'neutral';\n  }\n\n  // Enhanced caching system for performance optimization\n  const r4rCache = new Map<string, { data: any; timestamp: number }>();\n  const r4rSummaryCache = new Map<string, { data: any; timestamp: number }>();\n  const profileCache = new Map<string, { data: any; timestamp: number }>();\n  const searchCache = new Map<string, { data: any; timestamp: number }>();\n  \n  const R4R_CACHE_TTL = 10 * 60 * 1000; // 10 minutes\n  const PROFILE_CACHE_TTL = 1 * 60 * 1000; // 1 minute - faster refresh for user profiles\n  const SEARCH_CACHE_TTL = 30 * 1000; // 30 seconds - faster refresh for search suggestions\n\n  // Cache cleanup function to prevent memory leaks\n  function cleanupCaches() {\n    const now = Date.now();\n    \n    // Clean R4R cache\n    r4rCache.forEach((value, key) => {\n      if (now - value.timestamp > R4R_CACHE_TTL) {\n        r4rCache.delete(key);\n      }\n    });\n    \n    // Clean profile cache\n    profileCache.forEach((value, key) => {\n      if (now - value.timestamp > PROFILE_CACHE_TTL) {\n        profileCache.delete(key);\n      }\n    });\n    \n    // Clean search cache\n    searchCache.forEach((value, key) => {\n      if (now - value.timestamp > SEARCH_CACHE_TTL) {\n        searchCache.delete(key);\n      }\n    });\n    \n    // Clean R4R summary cache\n    r4rSummaryCache.forEach((value, key) => {\n      if (now - value.timestamp > R4R_CACHE_TTL) {\n        r4rSummaryCache.delete(key);\n      }\n    });\n  }\n\n  // Run cache cleanup every 5 minutes\n  setInterval(cleanupCaches, 5 * 60 * 1000);\n\n  // Fast Review Summary - Ultra-fast endpoint for dashboard (bypasses heavy R4R processing)\n  app.get(\"/api/review-summary/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const cacheKey = `fast-review-${userkey}`;\n      \n      // Check cache first (shorter cache for freshness)\n      const cached = r4rSummaryCache.get(cacheKey);\n      if (cached && Date.now() - cached.timestamp < R4R_CACHE_TTL) {\n        return res.json({ success: true, data: cached.data });\n      }\n      \n      // Direct API call to Ethos for just review sentiment data\n      const reviewsResponse = await fetch(\n        `https://ethos.network/api/review?subject=${encodeURIComponent(userkey)}&limit=100&offset=0`,\n        {\n          headers: {\n            'accept': 'application/json',\n            'user-agent': 'EthosRadar/1.0'\n          }\n        }\n      );\n      \n      if (!reviewsResponse.ok) {\n        // Return zero data if API fails\n        return res.json({\n          success: true,\n          data: { totalReviews: 0, positivePercentage: 0 }\n        });\n      }\n      \n      const reviewsData = await reviewsResponse.json();\n      const reviews = reviewsData.values || [];\n      \n      // Fast sentiment calculation using score field\n      const positiveReviews = reviews.filter((review: any) => (review.score || 0) > 0).length;\n      const totalReviews = reviews.length;\n      const positivePercentage = totalReviews > 0 ? Math.round((positiveReviews / totalReviews) * 100) : 0;\n      \n      const summary = {\n        totalReviews,\n        positivePercentage\n      };\n      \n      // Cache for 2 minutes (much shorter than R4R)\n      r4rSummaryCache.set(cacheKey, { data: summary, timestamp: Date.now() });\n      \n      res.json({ success: true, data: summary });\n    } catch (error) {\n      // Fast review summary error\n      res.json({\n        success: true,\n        data: { totalReviews: 0, positivePercentage: 0 }\n      });\n    }\n  });\n\n  // R4R Summary - Fast lightweight endpoint for dashboard use\n  app.get(\"/api/r4r-summary/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      \n      // Check cache first\n      const cached = r4rSummaryCache.get(userkey);\n      if (cached && Date.now() - cached.timestamp < R4R_CACHE_TTL) {\n        return res.json({\n          success: true,\n          data: cached.data,\n          cached: true\n        });\n      }\n      \n      // Get basic reviews data for sentiment calculation\n      const reviewsData = await ethosApi.getUserReviews(userkey);\n      if (!reviewsData.success || !reviewsData.data) {\n        return res.json({\n          success: true,\n          data: {\n            totalReviews: 0,\n            positivePercentage: 0,\n            allReviews: []\n          }\n        });\n      }\n\n      const reviews = reviewsData.data;\n      const allReviews = [];\n      \n      // Process received reviews for sentiment\n      if (reviews.received) {\n        for (const review of reviews.received) {\n          allReviews.push({\n            id: review.id || `${review.author?.userkey}_${review.timestamp}`,\n            type: 'received',\n            review: {\n              sentiment: mapReviewSentiment(review.score || review.sentiment),\n              comment: review.comment || '',\n              timestamp: review.timestamp\n            }\n          });\n        }\n      }\n\n      const totalReviews = allReviews.length;\n      const positiveReviews = allReviews.filter(r => r.review.sentiment === 'positive').length;\n      const positivePercentage = totalReviews > 0 ? Math.round((positiveReviews / totalReviews) * 100) : 0;\n\n      const summary = {\n        totalReviews,\n        positivePercentage,\n        allReviews\n      };\n\n      // Cache the result\n      r4rSummaryCache.set(userkey, { data: summary, timestamp: Date.now() });\n\n      res.json({\n        success: true,\n        data: summary\n      });\n    } catch (error) {\n      // R4R Summary error\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n  // R4R (Review for Review) Analysis - Comprehensive reputation farming detection\n  app.get(\"/api/r4r-analysis/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      \n      // Check cache first (skip cache if refresh parameter is provided)\n      const skipCache = req.query.refresh === 'true';\n      \n      if (skipCache) {\n        console.log(`üîÑ Cache bypass requested for ${userkey}, forcing fresh analysis...`);\n        r4rCache.delete(userkey); // Clear cache for this user\n      }\n      \n      const cached = r4rCache.get(userkey);\n      if (!skipCache && cached && Date.now() - cached.timestamp < R4R_CACHE_TTL) {\n        return res.json({\n          success: true,\n          data: cached.data,\n          cached: true\n        });\n      }\n      \n      const analysis = await r4rAnalyzer.analyzeUser(userkey);\n      \n      if (!analysis) {\n        return res.status(404).json({\n          success: false,\n          error: 'Unable to analyze user - user not found or insufficient data'\n        });\n      }\n\n      // Cache the result\n      r4rCache.set(userkey, { data: analysis, timestamp: Date.now() });\n\n      // Clean old cache entries (simple cleanup)\n      if (r4rCache.size > 100) {\n        const oldestKey = r4rCache.keys().next().value;\n        if (oldestKey) {\n          r4rCache.delete(oldestKey);\n        }\n      }\n\n      res.json({\n        success: true,\n        data: analysis\n      });\n    } catch (error) {\n      // R4R Analysis error\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n  // R4R Network Analysis - Analyze connections between users for farming patterns\n  app.post(\"/api/r4r-network-analysis\", async (req, res) => {\n    try {\n      const { userkeys } = z.object({\n        userkeys: z.array(z.string()).min(1).max(20),\n      }).parse(req.body);\n\n      const analyses = await Promise.all(\n        userkeys.map(async (userkey) => {\n          const analysis = await r4rAnalyzer.analyzeUser(userkey);\n          return { userkey, analysis };\n        })\n      );\n\n      // Find cross-connections between analyzed users\n      const crossConnections = [];\n      for (let i = 0; i < analyses.length; i++) {\n        for (let j = i + 1; j < analyses.length; j++) {\n          const user1 = analyses[i];\n          const user2 = analyses[j];\n          \n          if (user1.analysis && user2.analysis) {\n            const connection1to2 = user1.analysis.networkConnections.find(\n              conn => conn.userkey === user2.userkey\n            );\n            const connection2to1 = user2.analysis.networkConnections.find(\n              conn => conn.userkey === user1.userkey\n            );\n\n            if (connection1to2 || connection2to1) {\n              crossConnections.push({\n                user1: user1.userkey,\n                user2: user2.userkey,\n                connection1to2,\n                connection2to1,\n                isMutual: !!(connection1to2 && connection2to1),\n                suspiciousScore: Math.max(\n                  connection1to2?.suspiciousScore || 0,\n                  connection2to1?.suspiciousScore || 0\n                )\n              });\n            }\n          }\n        }\n      }\n\n      res.json({\n        success: true,\n        data: {\n          analyses: analyses.map(a => a.analysis).filter(Boolean),\n          crossConnections,\n          networkSuspiciousScore: crossConnections.length > 0 \n            ? crossConnections.reduce((sum, conn) => sum + conn.suspiciousScore, 0) / crossConnections.length\n            : 0\n        }\n      });\n    } catch (error) {\n      // R4R Network Analysis error\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n  // Avatar proxy endpoint to handle CORS and loading issues\n  app.get(\"/api/avatar-proxy\", async (req, res) => {\n    try {\n      const { url } = req.query;\n      \n      if (!url || typeof url !== 'string') {\n        return res.status(400).json({ error: 'URL parameter is required' });\n      }\n\n      // Only allow specific domains for security\n      const allowedDomains = ['pbs.twimg.com', 'avatars.githubusercontent.com', 'cdn.stamp.fyi'];\n      const urlObj = new URL(url);\n      \n      if (!allowedDomains.includes(urlObj.hostname)) {\n        return res.status(403).json({ error: 'Domain not allowed' });\n      }\n\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'EthosRadar/1.0.0',\n          'Accept': 'image/*',\n        },\n      });\n\n      if (!response.ok) {\n        return res.status(response.status).json({ error: 'Failed to fetch image' });\n      }\n\n      // Set appropriate headers\n      res.set({\n        'Content-Type': response.headers.get('content-type') || 'image/jpeg',\n        'Cache-Control': 'public, max-age=3600', // Cache for 1 hour\n        'Access-Control-Allow-Origin': '*',\n      });\n\n      // Pipe the image data\n      const buffer = Buffer.from(await response.arrayBuffer());\n      res.send(buffer);\n    } catch (error) {\n      // Avatar proxy error\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Add missing API endpoints that frontend is calling\n\n  // R4R Analytics endpoint \n  app.get(\"/api/r4r-analytics/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const result = await r4rAnalyzer.getR4RAnalytics(userkey);\n      res.json({ success: true, data: result });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Farcaster manifest endpoint (ensure proper CORS and content-type)\n  app.get(\"/.well-known/farcaster.json\", (req, res) => {\n    console.log('üéØ Serving Farcaster manifest from server route');\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Cache-Control', 'no-cache'); // Disable cache for testing\n    \n    const manifest = {\n      \"accountAssociation\": {\n        \"header\": \"eyJmaWQiOjE5MDUyMiwidHlwZSI6ImF1dGgiLCJrZXkiOiIweDk5RjZGZTYwZTJCYTM0MzI1MTI5ZEJEMmNEZGM0NTdEMjk3MzY4RjgifQ\",\n        \"payload\": \"eyJkb21haW4iOiJldGhvc3JhZGFyLmNvbSJ9\",\n        \"signature\": \"Ap2jpG3Hb7ifpde/kd56Hr6Z8e4mOnSi7tQZU25LYsVtsveU1T2LyfqQmB1oy0w1Mwm31IDlQlWKuAoOIquj0Bs=\"\n      },\n      \"miniapp\": {\n        \"version\": \"1\",\n        \"name\": \"EthosRadar\",\n        \"homeUrl\": \"https://ethosradar.com\",\n        \"iconUrl\": \"https://ethosradar.com/logo1.png\",\n        \"subtitle\": \"Trust Score Scanner for Web3\",\n        \"description\": \"Generate your personalized trust reputation card on Ethos Protocol\",\n        \"buttonTitle\": \"Scan Your Trust Score\",\n        \"primaryCategory\": \"utility\",\n        \"tags\": [\n          \"trust\",\n          \"reputation\",\n          \"ethos\", \n          \"crypto\",\n          \"web3\"\n        ]\n      }\n    };\n    \n    res.json(manifest);\n  });\n\n  // Test pagination endpoint for debugging\n  app.get(\"/api/test-serpin-pagination\", async (req, res) => {\n    try {\n      const userkey = 'service:x.com:1479691003607060490';\n      console.log('üîç Testing Serpin pagination directly...');\n      \n      const batches = [];\n      let totalFound = 0;\n      \n      for (let offset = 0; offset < 2000; offset += 500) {\n        console.log(`üìä Fetching batch at offset ${offset}...`);\n        \n        const result = await ethosApi.getReviewsReceived(userkey, 500, offset);\n        if (result.success && result.data?.values) {\n          const count = result.data.values.length;\n          console.log(`üìà Batch ${offset/500 + 1}: ${count} reviews`);\n          totalFound += count;\n          batches.push({ offset, count, hasData: count > 0 });\n          \n          if (count === 0) break;\n        } else {\n          break;\n        }\n        \n        // Small delay to prevent rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      console.log(`‚úÖ Total reviews found across all batches: ${totalFound}`);\n      \n      res.json({\n        success: true,\n        data: {\n          totalReviews: totalFound,\n          batches,\n          hasMoreThan500: totalFound > 500\n        }\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Test failed'\n      });\n    }\n  });\n\n  // R4R Network Analysis endpoint\n  app.post(\"/api/r4r-network-analysis\", async (req, res) => {\n    try {\n      const { userkey } = z.object({\n        userkey: z.string().min(1),\n      }).parse(req.body);\n      \n      const result = await r4rAnalyzer.getNetworkAnalysis(userkey);\n      res.json({ success: true, data: result });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // R4R Summary endpoint\n  app.get(\"/api/r4r-summary/:userkey\", async (req, res) => {\n    try {\n      const userkey = decodeURIComponent(req.params.userkey);\n      const result = await r4rAnalyzer.getR4RSummary(userkey);\n      res.json({ success: true, data: result });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Internal server error' \n      });\n    }\n  });\n\n  // Exchange rates endpoint for real-time ETH/USD price\n  app.get(\"/api/exchange-rates\", async (req, res) => {\n    try {\n      // Use real-time price updater instead of one-off API call\n      const priceUpdaterModule = await import('./services/price-updater');\n      const priceData = priceUpdaterModule.priceUpdater.getCurrentPrice();\n      \n      res.json({\n        success: true,\n        data: { \n          eth_usd: priceData.eth_usd,\n          lastUpdated: priceData.lastUpdated,\n          source: priceData.source\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Failed to fetch exchange rates' \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":93403},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"// Shared data schemas for EthosRadar\n// This file defines the data models used throughout the application\n\nimport { z } from \"zod\";\n\n// Ethos Trust Score Schema\nexport const trustScoreSchema = z.object({\n  score: z.number(),\n  level: z.string(),\n  rank: z.number().optional(),\n  vouches: z.number(),\n  reviews: z.number(),\n  xp: z.number().optional(),\n});\n\nexport type TrustScore = z.infer<typeof trustScoreSchema>;\n\n// User Profile Schema\nexport const userProfileSchema = z.object({\n  address: z.string(),\n  username: z.string().optional(),\n  displayName: z.string().optional(),\n  avatar: z.string().optional(),\n  platform: z.enum([\"ethereum\", \"farcaster\", \"twitter\", \"discord\"]),\n  trustScore: trustScoreSchema.optional(),\n  isVerified: z.boolean().default(false),\n});\n\nexport type UserProfile = z.infer<typeof userProfileSchema>;\n\n// R4R Analysis Schema\nexport const r4rAnalysisSchema = z.object({\n  address: z.string(),\n  riskScore: z.number(),\n  suspiciousPatterns: z.array(z.string()),\n  mutualVouches: z.number(),\n  circularVouching: z.boolean(),\n  timePatterns: z.array(z.string()),\n});\n\nexport type R4RAnalysis = z.infer<typeof r4rAnalysisSchema>;\n\n// Vouch Data Schema\nexport const vouchSchema = z.object({\n  id: z.string(),\n  fromAddress: z.string(),\n  toAddress: z.string(),\n  comment: z.string().optional(),\n  timestamp: z.string(),\n  transactionHash: z.string().optional(),\n});\n\nexport type Vouch = z.infer<typeof vouchSchema>;\n\n// Search Query Schema\nexport const searchQuerySchema = z.object({\n  query: z.string().min(1, \"Search query is required\"),\n  platform: z.enum([\"ethereum\", \"farcaster\", \"twitter\", \"discord\", \"all\"]).default(\"all\"),\n});\n\nexport type SearchQuery = z.infer<typeof searchQuerySchema>;\n\n// API Response Schema\nexport const apiResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.any().optional(),\n  error: z.string().optional(),\n});\n\nexport type ApiResponse<T = any> = {\n  success: boolean;\n  data?: T;\n  error?: string;\n};","size_bytes":1970},"client/src/App.tsx":{"content":"// Core React and routing\nimport { useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\n\n// Performance utilities\nimport { initPerformanceOptimizations } from \"@/utils/performance\";\n\n// Farcaster SDK\nimport { sdk } from \"@farcaster/miniapp-sdk\";\n\n// External libraries\nimport { QueryClientProvider } from \"@tanstack/react-query\";\n\n// Internal utilities and configs\nimport { queryClient } from \"./lib/queryClient\";\nimport { ThemeProvider } from \"@/lib/theme-provider\";\n\n// UI Components\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\nimport { SimpleRadarLogo } from \"@/components/holographic-logo\";\n\n// Pages\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\n\n\nfunction AppHeader() {\n  return (\n    <header className=\"relative\">\n      <div className=\"container mx-auto px-3 py-2\">\n        <div className=\"flex items-center justify-between backdrop-blur-sm bg-white/15 border border-amber-900/25 rounded-xl px-6 py-3 shadow-lg hover:bg-white/20 transition-all duration-300\">\n          <div className=\"flex items-center space-x-3\">\n            <SimpleRadarLogo className=\"w-6 h-6 text-white dark:text-gray-800\" />\n            <h1 className=\"text-xl font-bold text-white dark:text-gray-800\">\n              EthosRadar\n            </h1>\n          </div>\n          <ThemeToggle />\n        </div>\n      </div>\n    </header>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  return (\n    <div className=\"min-h-screen bg-transparent transition-colors duration-200\">\n      <AppHeader />\n      <main>\n        <Router />\n      </main>\n      <Toaster />\n    </div>\n  );\n}\n\nfunction App() {\n  // Initialize performance optimizations\n  useEffect(() => {\n    initPerformanceOptimizations();\n  }, []);\n\n  // Initialize Farcaster SDK - optimized for faster loading\n  useEffect(() => {\n    // Initialize Farcaster Mini App SDK\n    const initializeSdk = async () => {\n      try {\n        // Reduce initialization delay for faster startup\n        await new Promise(resolve => setTimeout(resolve, 50));\n        \n        // Signal to Farcaster that the app is ready\n        await sdk.actions.ready();\n      } catch (error) {\n\n        // Still call ready to hide splash screen even if there's an error\n        try {\n          await sdk.actions.ready();\n        } catch (readyError) {\n\n        }\n      }\n    };\n    \n    initializeSdk();\n  }, []);\n\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <AppContent />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2849},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Force override for bolt icon container and button - must be at top to override Tailwind */\n.bolt-icon-container {\n  backdrop-filter: none !important;\n  -webkit-backdrop-filter: none !important;\n  background: transparent !important;\n  isolation: auto !important;\n  z-index: 1000 !important;\n  right: 8px !important;\n  padding: 4px !important;\n}\n\nbutton.bolt-icon-button {\n  background: transparent !important;\n  background-color: transparent !important;\n  background-image: none !important;\n  border: none !important;\n  border-radius: 0 !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  box-shadow: none !important;\n  backdrop-filter: none !important;\n  -webkit-backdrop-filter: none !important;\n  outline: none !important;\n  cursor: pointer !important;\n  pointer-events: auto !important;\n  display: inline-flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  transition: all 0.5s ease-out !important;\n  position: relative !important;\n  isolation: auto !important;\n}\n\n/* Fix search input to prevent blur effects from interfering with text visibility */\n.search-input-no-blur {\n  backdrop-filter: none !important;\n  -webkit-backdrop-filter: none !important;\n  background: rgba(255, 255, 255, 0.05) !important;\n}\n\n/* Enhanced Loading Animations - optimized for performance */\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n@keyframes pulse-soft {\n  0%, 100% {\n    opacity: 0.4;\n  }\n  50% {\n    opacity: 0.8;\n  }\n}\n\n@keyframes glow-pulse {\n  0%, 100% {\n    box-shadow: 0 0 5px rgba(255, 255, 255, 0.1);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(255, 255, 255, 0.2), 0 0 30px rgba(255, 255, 255, 0.1);\n  }\n}\n\n/* Performance optimizations */\n* {\n  /* Enable hardware acceleration for transforms and opacity */\n  will-change: auto;\n}\n\n/* Optimize animations on mobile devices */\n@media (max-width: 430px) {\n  .loading-shimmer {\n    animation-duration: 2s; /* Slower animation on mobile */\n  }\n  \n  .loading-glow {\n    animation: none; /* Disable glow on mobile for performance */\n  }\n  \n  /* Reduce expensive box-shadows on mobile */\n  [class*=\"shadow-\"] {\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;\n  }\n  \n  /* Optimize transitions for mobile */\n  .transition-all {\n    transition-duration: 0.15s !important;\n  }\n  \n  .hover\\:scale-105:hover {\n    transform: scale(1.02) !important; /* Reduce scale effect on mobile */\n  }\n  \n  /* Reduce backdrop blur intensity on mobile */\n  .backdrop-blur-lg {\n    backdrop-filter: blur(8px) !important;\n  }\n  \n  .backdrop-blur-xl {\n    backdrop-filter: blur(12px) !important;\n  }\n}\n\n/* Use CSS custom properties for dynamic performance adjustments */\n:root {\n  --blur-amount: 12px;\n  --animation-duration: 0.3s;\n  --shadow-intensity: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n@media (max-width: 430px) {\n  :root {\n    --blur-amount: 6px;\n    --animation-duration: 0.15s;\n    --shadow-intensity: 0 1px 3px rgba(0, 0, 0, 0.1);\n  }\n}\n\n.loading-shimmer {\n  background: linear-gradient(90deg, rgba(255, 255, 255, 0.1) 25%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0.1) 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n.loading-pulse-soft {\n  animation: pulse-soft 2s ease-in-out infinite;\n}\n\n.loading-glow {\n  animation: glow-pulse 2s ease-in-out infinite;\n}\n\n/* Default light theme background - optimized for mobile */\nbody {\n  background: \n    linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.7)),\n    url('/unified-bg.webp') center center/cover no-repeat, \n    linear-gradient(135deg, #080805 0%, #0f0f0e 25%, #161612 50%, #0f0f0e 75%, #080805 100%);\n  /* Use scroll for mobile performance instead of fixed */\n  background-attachment: scroll;\n  min-height: 100vh;\n  min-height: 100dvh;\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"SF Pro Display\", \"Inter\", sans-serif;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n  scroll-behavior: smooth;\n  /* Reduce transition duration for faster responsiveness */\n  transition: background 0.15s ease, color 0.15s ease;\n  color: #d1d5db;\n  /* Add content-visibility for better rendering performance */\n  content-visibility: auto;\n}\n\n/* Mobile-like layout for all screen sizes */\nbody * {\n  max-width: 100vw;\n}\n\n#root {\n  max-width: 430px !important;\n  margin: 0 auto !important;\n  min-height: 100vh;\n  position: relative;\n  background: transparent;\n}\n\n/* Force ALL elements to respect the mobile container */\n* {\n  box-sizing: border-box;\n}\n\n/* Force all containers to respect mobile width */\n.container,\n.max-w-6xl,\n.max-w-7xl,\n.w-full,\ndiv,\nsection,\nheader,\nmain {\n  max-width: 100% !important;\n}\n\n/* Force mobile layout globally */\nhtml {\n  max-width: 100vw;\n  overflow-x: hidden;\n}\n\n/* Desktop-specific adjustments - keep fixed background for desktop only */\n@media (min-width: 431px) {\n  body {\n    padding: 0;\n    background-attachment: fixed;\n    overflow-x: hidden;\n  }\n  \n  #root {\n    box-shadow: 0 0 30px rgba(0, 0, 0, 0.4);\n    border-left: 1px solid rgba(255, 255, 255, 0.1);\n    border-right: 1px solid rgba(255, 255, 255, 0.1);\n  }\n}\n\n/* Mobile-specific optimizations */\n@media (max-width: 430px) {\n  body {\n    background-attachment: scroll;\n  }\n  \n  /* Reduce expensive effects on mobile */\n  .backdrop-blur-md {\n    backdrop-filter: blur(8px) !important;\n  }\n  \n  .backdrop-blur-sm {\n    backdrop-filter: blur(4px) !important;\n  }\n}\n\n/* Dark theme background (now has light appearance) - mobile optimized */ \nhtml.dark body,\nbody.dark,\n.dark body {\n  background: url('/unified-bg.webp') center center/cover no-repeat, linear-gradient(135deg, #f1f5f9 0%, #e8f0fe 50%, #f8fafc 100%) !important;\n  background-attachment: scroll !important;\n  color: #1e293b !important;\n}\n\n/* Desktop gets fixed background for dark theme */\n@media (min-width: 431px) {\n  html.dark body,\n  body.dark,\n  .dark body {\n    background-attachment: fixed !important;\n  }\n}\n\n/* Fallback for browsers that don't support WebP - mobile optimized */\nhtml.no-webp.dark body,\nbody.no-webp.dark,\n.no-webp.dark body {\n  background: url('/unified-bg.png') center center/cover no-repeat, linear-gradient(135deg, #f1f5f9 0%, #e8f0fe 50%, #f8fafc 100%) !important;\n  background-attachment: scroll !important;\n  color: #1e293b !important;\n}\n\n/* Desktop gets fixed background for fallback */\n@media (min-width: 431px) {\n  html.no-webp.dark body,\n  body.no-webp.dark,\n  .no-webp.dark body {\n    background-attachment: fixed !important;\n  }\n}\n\n/* Default fallback if webp fails */\n.no-webp body {\n  background: \n    linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.7)),\n    url('/unified-bg.png') center center/cover no-repeat, \n    linear-gradient(135deg, #080805 0%, #0f0f0e 25%, #161612 50%, #0f0f0e 75%, #080805 100%);\n  background-attachment: fixed;\n}\n\n/* Subtle background blur effect */\nhtml.dark body::after {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  backdrop-filter: blur(2.5px);\n  -webkit-backdrop-filter: blur(2.5px);\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* Light theme background (now has much darker appearance) */\nhtml.light body, \nbody.light,\n.light body {  \n  background: \n    linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.7)),\n    url('/unified-bg.webp') center center/cover no-repeat, \n    linear-gradient(135deg, #080805 0%, #0f0f0e 25%, #161612 50%, #0f0f0e 75%, #080805 100%) !important;\n  background-attachment: fixed !important;\n  color: #d1d5db !important;\n}\n\n/* Fallback for browsers that don't support WebP */\nhtml.no-webp.light body, \nbody.no-webp.light,\n.no-webp.light body {  \n  background: \n    linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.7)),\n    url('/unified-bg.png') center center/cover no-repeat, \n    linear-gradient(135deg, #080805 0%, #0f0f0e 25%, #161612 50%, #0f0f0e 75%, #080805 100%) !important;\n  background-attachment: fixed !important;\n  color: #d1d5db !important;\n}\n\n/* Subtle background blur effect for light theme */\nhtml.light body::after {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  backdrop-filter: blur(2.5px);\n  -webkit-backdrop-filter: blur(2.5px);\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* Remove overlay - solid background only */\nbody::before {\n  display: none;\n}\n\n/* Show floating orbs in dark mode (now light appearance) with adjusted colors */\n.dark .floating-orb {\n  display: block !important;\n  opacity: 0.3;\n}\n\n/* Hide all floating orbs and colorful elements in light mode (now dark appearance) */\n.light .floating-orb {\n  display: none !important;\n}\n\n/* Dark mode specific adjustments (glassmorphism light appearance) */\n.dark .glass-search-input {\n  color: #1e293b !important;\n  background: rgba(255, 255, 255, 0.15) !important;\n  border: 1px solid rgba(0, 0, 0, 0.20) !important;\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n}\n\n.dark .glass-search-input::placeholder {\n  color: rgba(71, 85, 105, 0.7) !important;\n}\n\n.dark .glass-search-input:focus {\n  border-color: rgba(59, 130, 246, 0.5) !important;\n  box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.3) !important;\n  background: rgba(255, 255, 255, 0.9) !important;\n}\n\n.dark .glass-search-icon {\n  color: rgba(30, 41, 59, 0.7);\n}\n\n/* Enhanced search input styling for light mode (glassmorphism) */\n.light .glass-search-input {\n  background: rgba(255, 255, 255, 0.15) !important;\n  border: 1px solid rgba(255, 255, 255, 0.20) !important;\n  color: rgba(255, 255, 255, 0.98) !important;\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n  transition: all 0.3s ease;\n}\n\n\n\n.light .glass-search-input::placeholder {\n  color: rgba(255, 255, 255, 0.6) !important;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n.light .glass-search-input:focus {\n  border-color: rgba(255, 255, 255, 0.20) !important;\n  box-shadow: none !important;\n  background: rgba(255, 255, 255, 0.15) !important;\n  transform: none;\n}\n\n.light .glass-search-icon {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n/* Enhanced glassmorphism search container effects */\n.search-container {\n  position: relative;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n}\n\n.search-container:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n}\n\n.dark .search-container:hover {\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);\n}\n\n.light .search-container:hover {\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\n}\n\n/* Enhanced glassmorphism border with gradient animation */\n.search-container::before {\n  content: '';\n  position: absolute;\n  inset: -1px;\n  padding: 1px;\n  background: linear-gradient(135deg, \n    rgba(255,255,255,0.4), \n    rgba(255,255,255,0.1), \n    rgba(255,255,255,0.4));\n  border-radius: inherit;\n  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n  mask-composite: xor;\n  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n  -webkit-mask-composite: xor;\n  pointer-events: none;\n  opacity: 0.8;\n  transition: opacity 0.3s ease;\n}\n\n.search-container:hover::before {\n  opacity: 1;\n}\n\n/* Main search container improvements for light mode (enhanced glassmorphism) */\n.light input[type=\"text\"] {\n  background: rgba(255, 255, 255, 0.18) !important;\n  border: 1px solid rgba(255, 255, 255, 0.25) !important;\n  color: rgba(255, 255, 255, 0.98) !important;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6) !important;\n  backdrop-filter: blur(12px) !important;\n  -webkit-backdrop-filter: blur(12px) !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;\n}\n\n.light input[type=\"text\"]:hover {\n  background: rgba(255, 255, 255, 0.22) !important;\n  border-color: rgba(255, 255, 255, 0.3) !important;\n  transform: translateY(-0.5px) !important;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.7) !important;\n}\n\n.light input[type=\"text\"]:focus {\n  border-color: rgba(255, 255, 255, 0.35) !important;\n  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1) !important;\n  background: rgba(255, 255, 255, 0.25) !important;\n  transform: translateY(-1px) !important;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.8) !important;\n}\n\n.light input[type=\"text\"]::placeholder {\n  color: rgba(255, 255, 255, 0.65) !important;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6) !important;\n}\n\n/* Dark mode main search input styling (enhanced glassmorphism light appearance) */\n.dark input[type=\"text\"] {\n  background: rgba(255, 255, 255, 0.18) !important;\n  border: 1px solid rgba(0, 0, 0, 0.15) !important;\n  color: #0f172a !important;\n  font-weight: 700 !important;\n  text-shadow: none !important;\n  backdrop-filter: blur(12px) !important;\n  -webkit-backdrop-filter: blur(12px) !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;\n}\n\n.dark input[type=\"text\"]:hover {\n  background: rgba(255, 255, 255, 0.22) !important;\n  border-color: rgba(0, 0, 0, 0.18) !important;\n  transform: translateY(-0.5px) !important;\n}\n\n.dark input[type=\"text\"]:focus {\n  border-color: rgba(59, 130, 246, 0.4) !important;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;\n  background: rgba(255, 255, 255, 0.25) !important;\n  color: #0f172a !important;\n  font-weight: 700 !important;\n  transform: translateY(-1px) !important;\n}\n\n.dark input[type=\"text\"]::placeholder {\n  color: rgba(71, 85, 105, 0.7) !important;\n  font-weight: 600 !important;\n}\n\n/* Modern search button styling */\n.glass-search-button {\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  border: none;\n  border-radius: 8px;\n  padding: 10px 12px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);\n  z-index: 20;\n}\n\n/* Override for bolt icon button - remove all background styling with highest specificity */\nbutton.bolt-icon-button.bolt-icon-button.bolt-icon-button {\n  background: transparent !important;\n  background-color: transparent !important;\n  background-image: none !important;\n  border: none !important;\n  border-radius: 0 !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  box-shadow: none !important;\n  backdrop-filter: none !important;\n  -webkit-backdrop-filter: none !important;\n  outline: none !important;\n  box-sizing: content-box !important;\n  width: auto !important;\n  height: auto !important;\n  min-width: auto !important;\n  min-height: auto !important;\n}\n\nbutton.bolt-icon-button.bolt-icon-button.bolt-icon-button:hover,\nbutton.bolt-icon-button.bolt-icon-button.bolt-icon-button:focus,\nbutton.bolt-icon-button.bolt-icon-button.bolt-icon-button:active {\n  background: transparent !important;\n  background-color: transparent !important;\n  background-image: none !important;\n  border: none !important;\n  border-radius: 0 !important;\n  box-shadow: none !important;\n  backdrop-filter: none !important;\n  -webkit-backdrop-filter: none !important;\n  outline: none !important;\n}\n\n.glass-search-button:hover {\n  background: linear-gradient(135deg, #2563eb, #1e40af);\n  transform: translateY(-50%) scale(1.05);\n  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);\n}\n\n.glass-search-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: translateY(-50%) scale(1);\n}\n\n/* Global/Farcaster toggle buttons - enhanced glassmorphism styling */\n.glass-toggle-container {\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  background: rgba(255, 255, 255, 0.12);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  border-radius: 12px;\n  padding: 4px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.glass-toggle-container:hover {\n  background: rgba(255, 255, 255, 0.15);\n  border-color: rgba(255, 255, 255, 0.22);\n  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);\n  transform: translateY(-1px);\n}\n\n.dark .glass-toggle-container {\n  background: rgba(255, 255, 255, 0.08);\n  border-color: rgba(255, 255, 255, 0.12);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n}\n\n.dark .glass-toggle-container:hover {\n  background: rgba(255, 255, 255, 0.12);\n  border-color: rgba(255, 255, 255, 0.16);\n  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.35);\n}\n\n.light .glass-toggle-container {\n  background: rgba(255, 255, 255, 0.15);\n  border-color: rgba(255, 255, 255, 0.25);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);\n}\n\n.light .glass-toggle-container:hover {\n  background: rgba(255, 255, 255, 0.18);\n  border-color: rgba(255, 255, 255, 0.3);\n  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.25);\n}\n\n.glass-toggle-button {\n  padding: 8px 16px;\n  border-radius: 8px;\n  border: none;\n  background: transparent;\n  color: rgba(255, 255, 255, 0.75);\n  font-weight: 500;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  min-width: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n}\n\n.glass-toggle-button.active {\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  color: white;\n  box-shadow: 0 3px 12px rgba(59, 130, 246, 0.4);\n  transform: translateY(-0.5px);\n}\n\n.glass-toggle-button:hover:not(.active) {\n  background: rgba(255, 255, 255, 0.12);\n  color: rgba(255, 255, 255, 0.95);\n  transform: translateY(-0.5px);\n}\n\n.dark .glass-toggle-button {\n  color: rgba(71, 85, 105, 0.8);\n}\n\n.dark .glass-toggle-button:hover:not(.active) {\n  background: rgba(255, 255, 255, 0.08);\n  color: rgba(71, 85, 105, 0.95);\n}\n\n/* Enhanced search input glassmorphism overlays */\n.search-input-overlays {\n  position: absolute;\n  inset: 0;\n  border-radius: 1rem;\n  pointer-events: none;\n}\n\n/* Search suggestions z-index fix to prevent text overlay */\n.search-suggestions {\n  z-index: 9999 !important;\n  position: relative;\n}\n\n/* Hero text lower z-index to prevent overlay */\n.hero-text {\n  z-index: 0 !important;\n  position: relative;\n}\n\n.search-input-overlays::before {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.08) 50%, transparent 100%);\n  opacity: 0.6;\n  transition: opacity 0.3s ease;\n}\n\n.search-input-overlays::after {\n  content: '';\n  position: absolute;\n  inset: 0;\n  border: 1px solid rgba(255,255,255,0.1);\n  border-radius: inherit;\n}\n\n/* Light mode search suggestions removed - using unified dark styling */\n\n/* Removed all light mode overrides - both modes now use same dark styling */\n\n.light .search-suggestions-dropdown .text-emerald-300 {\n  color: #10b981 !important;\n}\n\n.light .glass-welcome-title {\n  color: #1e293b;\n}\n\n.light .glass-welcome-subtitle {\n  color: rgba(30, 41, 59, 0.85);\n}\n\n.light .glass-accent-text {\n  color: #1e293b;\n  font-weight: 600;\n}\n\n.light .glass-button {\n  color: #1e293b;\n}\n\n.light .glass-simple-button {\n  color: #1e293b;\n}\n\n.light .glass-profile-name {\n  color: rgba(30, 41, 59, 0.95);\n}\n\n.light .glass-username {\n  color: rgba(30, 41, 59, 0.7);\n}\n\n.light .glass-primary-badge {\n  color: rgba(30, 41, 59, 0.9);\n}\n\n.light .glass-score-label {\n  color: rgba(30, 41, 59, 0.7);\n}\n\n.light .glass-score-number {\n  color: rgba(30, 41, 59, 0.95);\n}\n\n.light .glass-status-indicator {\n  color: rgba(30, 41, 59, 0.7);\n}\n\n/* Root container - mobile optimized */\n#root {\n  position: relative;\n  min-height: 100vh;\n  min-height: 100dvh; /* Dynamic viewport height */\n  max-width: 100vw;\n  width: 100%;\n  overflow-x: hidden;\n  /* Mobile performance optimizations */\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n}\n\n/* Mobile performance optimizations */\n@media (max-width: 768px) {\n  /* Remove all blur effects on mobile */\n  .backdrop-blur-xl,\n  .backdrop-blur-2xl,\n  .backdrop-blur-md {\n    backdrop-filter: none !important;\n    -webkit-backdrop-filter: none !important;\n  }\n  \n  /* Solid backgrounds for mobile */\n  .search-suggestions-dropdown {\n    background: var(--glass-bg) !important;\n    backdrop-filter: none !important;\n    -webkit-backdrop-filter: none !important;\n  }\n  \n  /* Larger touch targets for mobile */\n  button, .cursor-pointer {\n    min-height: 48px;\n    min-width: 48px;\n  }\n  \n  /* Better spacing for mobile */\n  .glass-simple-button {\n    padding: 1.25rem 1.5rem;\n    min-height: 56px;\n  }\n  \n  .glass-simple-header {\n    padding: 1.5rem;\n  }\n}\n\n/* Custom scrollbar styles */\n.modal-scroll {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(255, 255, 255, 0.3) transparent;\n}\n\n.modal-scroll::-webkit-scrollbar {\n  width: 6px;\n}\n\n.modal-scroll::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.modal-scroll::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 3px;\n}\n\n.modal-scroll::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n/* Light theme variables */\n:root {\n  --background: #ffffff;\n  --foreground: #1e293b;\n  --card: #ffffff;\n  --card-foreground: #1e293b;\n  --popover: #ffffff;\n  --popover-foreground: #1e293b;\n  --primary: #3b82f6;\n  --primary-foreground: #ffffff;\n  --secondary: #f1f5f9;\n  --secondary-foreground: #1e293b;\n  --muted: #f1f5f9;\n  --muted-foreground: #64748b;\n  --accent: #f1f5f9;\n  --accent-foreground: #1e293b;\n  --destructive: #ef4444;\n  --destructive-foreground: #ffffff;\n  --border: #e2e8f0;\n  --input: #ffffff;\n  --ring: #3b82f6;\n  --radius: 0.75rem;\n  \n  /* Light theme glass design */\n  --glass-bg: rgba(255, 255, 255, 0.6);\n  --glass-bg-strong: rgba(248, 250, 252, 0.8);\n  --glass-border: rgba(120, 100, 80, 0.2);\n  --glass-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n}\n\n/* Dark theme variables */\n.dark {\n  --background: #111827;\n  --foreground: #ffffff;\n  --card: #1f2937;\n  --card-foreground: #ffffff;\n  --popover: #374151;\n  --popover-foreground: #ffffff;\n  --primary: #3b82f6;\n  --primary-foreground: #ffffff;\n  --secondary: #374151;\n  --secondary-foreground: #ffffff;\n  --muted: #4b5563;\n  --muted-foreground: #d1d5db;\n  --accent: #4b5563;\n  --accent-foreground: #ffffff;\n  --destructive: #ef4444;\n  --destructive-foreground: #ffffff;\n  --border: #4b5563;\n  --input: #374151;\n  --ring: #3b82f6;\n  \n  /* Dark theme glass design */\n  --glass-bg: rgba(0, 0, 0, 0.15);\n  --glass-bg-strong: rgba(0, 0, 0, 0.25);\n  --glass-border: rgba(120, 100, 80, 0.3);\n  --glass-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n}\n\n/* Solid card components - no blur effects */\n.liquid-glass {\n  background: var(--glass-bg);\n  border: 1px solid var(--glass-border);\n  box-shadow: var(--glass-shadow);\n  border-radius: 12px;\n  position: relative;\n  overflow: hidden;\n}\n\n.liquid-glass::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: rgba(75, 85, 99, 0.3);\n  z-index: 1;\n}\n\n.glass-mobile-card {\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto 1.5rem auto;\n  padding: 1rem;\n}\n\n.glass-compact-search {\n  position: relative;\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto 1.5rem auto;\n  padding: 0 1rem;\n  overflow: visible !important;\n}\n\n/* Mobile-specific styles for compact search */\n@media (max-width: 768px) {\n  .glass-compact-search {\n    padding: 0 0.5rem;\n    margin-bottom: 1rem;\n  }\n}\n\n.glass-search-wrapper {\n  position: relative;\n  background: var(--glass-bg);\n  border: 1px solid var(--glass-border);\n  border-radius: 12px;\n  box-shadow: var(--glass-shadow);\n  display: flex;\n  align-items: center;\n  min-height: 76px;\n}\n\n/* Mobile-specific wrapper adjustments */\n@media (max-width: 768px) {\n  .glass-search-wrapper {\n    min-height: 88px;\n    border-radius: 16px;\n    padding: 0.5rem;\n  }\n}\n\n.glass-search-icon {\n  position: absolute;\n  left: 16px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: rgba(255, 255, 255, 0.7);\n  z-index: 10;\n}\n\n/* Mobile-specific icon adjustments */\n@media (max-width: 768px) {\n  .glass-search-icon {\n    left: 24px;\n  }\n}\n\n.glass-search-input {\n  width: 100%;\n  padding: 20px 60px 20px 52px;\n  background: transparent;\n  border: none;\n  outline: none;\n  color: white;\n  font-size: 16px;\n  border-radius: 12px;\n  min-height: 64px;\n}\n\n/* Mobile-specific input adjustments */\n@media (max-width: 768px) {\n  .glass-search-input {\n    padding: 28px 80px 28px 60px;\n    font-size: 18px;\n    min-height: 80px;\n    border-radius: 14px;\n  }\n}\n\n.glass-search-input::placeholder {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.glass-button {\n  background: var(--glass-bg);\n  border: 1px solid var(--glass-border);\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  transition: all 0.15s ease;\n  cursor: pointer;\n  font-weight: 500;\n}\n\n.glass-button:hover {\n  background: var(--glass-bg-strong);\n  transform: translateY(-1px);\n}\n\n.glass-simple-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1.25rem;\n  margin-bottom: 1rem;\n  background: var(--glass-bg);\n  border: 1px solid var(--glass-border);\n  border-radius: 12px;\n  box-shadow: var(--glass-shadow);\n  max-width: 500px;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.glass-simple-button {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 1rem 1.25rem;\n  background: var(--glass-bg);\n  border: 1px solid var(--glass-border);\n  border-radius: 8px;\n  transition: all 0.15s ease;\n  cursor: pointer;\n  color: white;\n  font-weight: 500;\n  min-height: 48px;\n}\n\n.glass-simple-button:hover {\n  background: var(--glass-bg-strong);\n  transform: translateY(-1px);\n}\n\n.glass-welcome-title {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 0.75rem;\n  color: white;\n}\n\n.glass-welcome-subtitle {\n  font-size: 1rem;\n  color: rgba(255, 255, 255, 0.85);\n}\n\n/* Line clamp utility for truncating text */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.glass-accent-text {\n  color: white;\n  font-weight: 600;\n}\n\n.glass-icon-wrapper {\n  position: relative;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.icon-glow {\n  position: absolute;\n  inset: 0;\n  background: rgba(100, 100, 100, 0.1);\n  border-radius: 50%;\n  animation: glow-pulse 2s ease-in-out infinite;\n}\n\n/* Mobile-optimized floating orbs */\n.floating-orb {\n  animation: glassFloat 4s ease-in-out infinite;\n  will-change: transform;\n  transform: translateZ(0); /* Hardware acceleration */\n}\n\n.floating-orb-1 { \n  animation-delay: 0s; \n  animation-duration: 4s;\n}\n.floating-orb-2 { \n  animation-delay: 1.5s; \n  animation-duration: 5s;\n}\n.floating-orb-3 { \n  animation-delay: 2.5s; \n  animation-duration: 3.5s;\n}\n\n/* Mobile touch optimizations - unified with main mobile section */\n@media (max-width: 768px) {\n  /* All floating orb animations disabled in main mobile section above */\n  \n  /* Mobile search suggestions positioning */\n  .search-suggestions-mobile {\n    /* Ensure suggestions don't interfere with mobile keyboard */\n    max-height: 250px !important;\n    /* Position relative to viewport to avoid keyboard issues */\n    position: fixed !important;\n    /* Add safe area for mobile keyboards */\n    bottom: auto !important;\n    /* Smooth mobile-friendly animation */\n    animation: slideDownMobile 0.15s ease-out;\n    /* Ensure suggestions work with mobile keyboards */\n    z-index: 999999 !important;\n  }\n  \n  @keyframes slideDownMobile {\n    from {\n      opacity: 0;\n      transform: translateY(-8px) scale(0.98);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n  \n  /* Handle mobile keyboard viewport changes */\n  @supports (-webkit-touch-callout: none) {\n    .search-suggestions-mobile {\n      /* iOS Safari specific fixes for keyboard */\n      position: fixed !important;\n      /* Use visual viewport when available */\n      height: fit-content !important;\n    }\n  }\n  \n  /* Additional blur optimizations */\n  .backdrop-blur-xl {\n    backdrop-filter: blur(20px) saturate(150%) !important;\n    -webkit-backdrop-filter: blur(20px) saturate(150%) !important;\n  }\n  \n  .backdrop-blur-2xl {\n    backdrop-filter: blur(8px) !important;\n  }\n  \n  /* Search suggestions enhanced blur for mobile too */\n  .search-suggestions-dropdown {\n    backdrop-filter: blur(40px) saturate(180%) !important;\n    -webkit-backdrop-filter: blur(40px) saturate(180%) !important;\n    background: rgba(0, 0, 0, 0.25) !important;\n    isolation: isolate !important;\n    will-change: backdrop-filter !important;\n  }\n  \n  /* Respect user motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n    }\n  }\n}\n\n/* Loading spinner */\n.glass-spinner {\n  width: 16px;\n  height: 16px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-top: 2px solid rgba(255, 255, 255, 0.9);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n.glass-error-message {\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  color: rgba(239, 68, 68, 0.9);\n  background: rgba(239, 68, 68, 0.1);\n  padding: 8px 12px;\n  border-radius: 8px;\n  border: 1px solid rgba(239, 68, 68, 0.2);\n}\n\n/* Profile display styles */\n.glass-profile-section {\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto 1.5rem auto;\n}\n\n.glass-profile-header {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  padding: 1rem;\n}\n\n.glass-profile-avatar {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  border: 2px solid var(--glass-border);\n  box-shadow: var(--glass-shadow);\n}\n\n.glass-profile-name {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: rgba(255, 255, 255, 0.95);\n  margin: 0;\n}\n\n.glass-profile-details {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.glass-username {\n  font-size: 0.875rem;\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.glass-primary-badge {\n  font-size: 0.75rem;\n  background: var(--glass-bg);\n  color: rgba(255, 255, 255, 0.9);\n  padding: 2px 8px;\n  border-radius: 12px;\n  border: 1px solid var(--glass-border);\n  width: fit-content;\n}\n\n.glass-score-section {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n\n.glass-score-details {\n  flex: 1;\n}\n\n.glass-score-label {\n  font-size: 0.875rem;\n  color: rgba(255, 255, 255, 0.7);\n  margin: 0 0 0.5rem 0;\n}\n\n.glass-score-content {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.glass-score-number {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: rgba(255, 255, 255, 0.95);\n}\n\n.glass-status-indicator {\n  font-size: 0.75rem;\n  color: rgba(255, 255, 255, 0.7);\n}\n\n/* Avatar container and status elements */\n.glass-avatar-container {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.glass-status-ring {\n  position: absolute;\n  width: 70px;\n  height: 70px;\n  border-radius: 50%;\n  opacity: 0.6;\n  animation: glow-pulse 2s ease-in-out infinite;\n  z-index: 1;\n}\n\n.glass-status-badge {\n  position: absolute;\n  bottom: -2px;\n  right: -2px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: var(--glass-bg-strong);\n  border: 2px solid var(--glass-border);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  z-index: 3;\n}\n\n/* Enhanced keyframe animations - consolidated and optimized */\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n@keyframes animate-slide-up {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Button and search enhancements */\n.glass-search-button {\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 44px;\n  height: 44px;\n  border-radius: 12px;\n  border: none;\n  background: rgba(100, 100, 100, 0.2);\n  backdrop-filter: blur(8px);\n  color: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Mobile-specific button adjustments for better touch targets */\n@media (max-width: 768px) {\n  .glass-search-button {\n    right: 12px;\n    width: 52px;\n    height: 52px;\n    border-radius: 14px;\n  }\n}\n\n.glass-search-button:hover {\n  background: rgba(120, 120, 120, 0.3);\n  transform: translateY(-50%) scale(1.05);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n}\n\n.dark .glass-search-button {\n  background: rgba(40, 40, 40, 0.4);\n  backdrop-filter: blur(12px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n}\n\n.dark .glass-search-button:hover {\n  background: rgba(60, 60, 60, 0.6);\n  transform: translateY(-50%) scale(1.05);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.6);\n}\n\n.glass-search-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: translateY(-50%);\n}\n\n/* Enhanced theme toggle */\n.glass-theme-toggle {\n  width: 44px;\n  height: 44px;\n  border-radius: 12px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  background: rgba(120, 120, 120, 0.15);\n  backdrop-filter: blur(4px);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.glass-theme-toggle:hover {\n  background: rgba(140, 140, 140, 0.25);\n  transform: scale(1.05);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n}\n\n.dark .glass-theme-toggle {\n  border: 1px solid rgba(120, 100, 80, 0.4);\n  background: rgba(0, 0, 0, 0.25);\n  backdrop-filter: blur(4px);\n}\n\n.dark .glass-theme-toggle:hover {\n  background: rgba(61, 51, 42, 0.5);\n  transform: scale(1.05);\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);\n}\n\n.light .glass-theme-toggle {\n  border: 1px solid rgba(30, 41, 59, 0.2);\n  background: rgba(255, 255, 255, 0.8);\n  backdrop-filter: blur(16px);\n}\n\n.light .glass-theme-toggle:hover {\n  background: rgba(248, 250, 252, 0.9);\n  transform: scale(1.05);\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\n/* Utility animations */\n.animate-slide-up {\n  animation: animate-slide-up 0.6s ease-out;\n}\n\n/* Unified animations */\n@keyframes glassFloat {\n  0%, 100% { \n    transform: translateY(0px) translateX(0px) scale(1);\n    opacity: 0.6;\n  }\n  25% { \n    transform: translateY(-8px) translateX(4px) scale(1.05);\n    opacity: 0.8;\n  }\n  50% { \n    transform: translateY(-12px) translateX(-2px) scale(1.1);\n    opacity: 1;\n  }\n  75% { \n    transform: translateY(-6px) translateX(-6px) scale(1.05);\n    opacity: 0.9;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px);\n  }\n  50% { \n    transform: translateY(-10px);\n  }\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-float-delayed {\n  animation: float 6s ease-in-out infinite;\n  animation-delay: 2s;\n}\n\n.animate-float-slow {\n  animation: float 8s ease-in-out infinite;\n  animation-delay: 4s;\n}\n\n\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* R4R Analysis progress bar animation */\n@keyframes loading-progress {\n  0% { \n    width: 0%; \n    opacity: 0.5;\n  }\n  50% { \n    width: 70%; \n    opacity: 0.8;\n  }\n  100% { \n    width: 95%; \n    opacity: 0.9;\n  }\n}\n\n/* Utility classes */\n.animate-fade-in {\n  animation: fadeIn 0.4s ease-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.5s ease-out;\n}\n\n/* Input cleanup */\ninput[type=\"text\"], \ninput[type=\"search\"], \ninput[type=\"email\"], \ninput {\n  text-decoration: none !important;\n  border-bottom: none !important;\n  outline: none !important;\n  -webkit-appearance: none !important;\n  -moz-appearance: none !important;\n}\n\ninput:focus, \ninput:active, \ninput:hover {\n  text-decoration: none !important;\n  border-bottom: none !important;\n  outline: none !important;\n}\n\n/* Ensure Tailwind doesn't override our styles */\n@layer base {\n  * {\n    @apply border-border;\n    box-sizing: border-box;\n  }\n  \n  html, body {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n  }\n  \n  /* Remove scrollbars globally */\n  * {\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none; /* IE/Edge */\n  }\n  \n  *::-webkit-scrollbar {\n    display: none; /* Chrome/Safari/Opera */\n  }\n  \n  /* Allow scrolling but hide scrollbars for specific elements */\n  .overflow-y-auto::-webkit-scrollbar {\n    display: none;\n  }\n  \n  .overflow-y-auto {\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n  \n  body {\n    @apply font-sans antialiased text-foreground;\n  }\n}\n\n/* App layout containers */\n.app-container {\n  min-height: 100vh;\n  position: relative;\n}\n\n.app-main {\n  flex: 1;\n  position: relative;\n}\n\n/* Ambient background effects */\n.ambient-background {\n  position: fixed;\n  inset: 0;\n  pointer-events: none;\n  z-index: -2;\n}\n\n.ambient-orb {\n  position: absolute;\n  border-radius: 50%;\n  filter: blur(40px);\n  opacity: 0.3;\n  animation: glassFloat 8s ease-in-out infinite;\n}\n\n.dark .ambient-orb-1,\n.dark .ambient-orb-2,\n.dark .ambient-orb-3 {\n  display: none !important;\n}\n\n.ambient-orb-1 {\n  top: 20%;\n  left: 10%;\n  width: 300px;\n  height: 300px;\n  background: rgba(100, 100, 100, 0.1);\n  animation-delay: 0s;\n}\n\n.ambient-orb-2 {\n  top: 60%;\n  right: 15%;\n  width: 200px;\n  height: 200px;\n  background: rgba(100, 100, 100, 0.1);\n  animation-delay: 3s;\n}\n\n.ambient-orb-3 {\n  bottom: 20%;\n  left: 30%;\n  width: 250px;\n  height: 250px;\n  background: rgba(100, 100, 100, 0.1);\n  animation-delay: 6s;\n}\n\n/* Tier-based animations for search suggestions */\n\n/* Good tier (1600-1999) - Simple, clean animations */\n.tier-good .avatar-good {\n  animation: gentleFloat 4s ease-in-out infinite;\n}\n\n.tier-good:hover {\n  background: rgba(16, 185, 129, 0.02);\n}\n\n/* Glassmorphism search suggestions */\n.below-search-mobile,\n.below-search-desktop {\n  will-change: transform, opacity;\n  -webkit-transform: translate3d(0,0,0);\n  transform: translate3d(0,0,0);\n  transition: all 0.2s ease-out;\n  \n  /* Force GPU acceleration */\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-transform-style: preserve-3d;\n  transform-style: preserve-3d;\n}\n\n.below-search-mobile {\n  /* Mobile-specific shadows and effects */\n  box-shadow: \n    0 32px 64px rgba(0, 0, 0, 0.6),\n    0 16px 32px rgba(0, 0, 0, 0.4),\n    0 8px 16px rgba(0, 0, 0, 0.3),\n    0 4px 8px rgba(0, 0, 0, 0.2);\n  \n  /* Mobile scrolling optimization */\n  -webkit-overflow-scrolling: touch;\n  overscroll-behavior: contain;\n}\n\n.below-search-desktop {\n  /* Desktop-specific shadows and effects */\n  box-shadow: \n    0 25px 50px rgba(0, 0, 0, 0.5),\n    0 12px 24px rgba(0, 0, 0, 0.3),\n    0 6px 12px rgba(0, 0, 0, 0.2),\n    0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n@media (max-width: 767px) {\n  /* Mobile touch optimization */\n  .below-search-mobile .cursor-pointer {\n    -webkit-tap-highlight-color: transparent;\n    touch-action: manipulation;\n    min-height: 56px; /* Larger touch targets for mobile */\n  }\n  \n  /* Disable problematic animations on mobile */\n  .animate-pulse,\n  .animate-spin:not(.loading-spinner),\n  .animate-bounce {\n    animation: none !important;\n  }\n  \n  /* Keep only essential loading animations */\n  .loading-spinner {\n    animation: spin 1s linear infinite !important;\n  }\n}\n\n/* Excellent tier (2000-2800) - Special but clean animations */\n.tier-excellent {\n  position: relative;\n}\n\n.tier-excellent::before {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: rgba(80, 80, 80, 0.02);\n  border-radius: inherit;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.tier-excellent:hover::before {\n  opacity: 1;\n}\n\n.tier-excellent .avatar-excellent {\n  animation: prestigeFloat 5s ease-in-out infinite;\n}\n\n.tier-excellent .tier-badge-excellent {\n  animation: prestigeBadge 3s ease-in-out infinite;\n}\n\n.tier-excellent .username-excellent {\n  background-size: 200% 200%;\n  animation: prestigeGradient 4s ease-in-out infinite;\n}\n\n.tier-excellent .score-card-excellent {\n  animation: prestigeGlow 3s ease-in-out infinite;\n}\n\n/* Keyframe animations */\n@keyframes gentleFloat {\n  0%, 100% { \n    transform: translateY(0px);\n  }\n  50% { \n    transform: translateY(-2px);\n  }\n}\n\n@keyframes prestigeFloat {\n  0%, 100% { \n    transform: translateY(0px) scale(1);\n  }\n  50% { \n    transform: translateY(-3px) scale(1.02);\n  }\n}\n\n@keyframes prestigeBadge {\n  0%, 100% { \n    transform: scale(1);\n    box-shadow: 0 0 8px rgba(245, 158, 11, 0.3);\n  }\n  50% { \n    transform: scale(1.05);\n    box-shadow: 0 0 12px rgba(245, 158, 11, 0.5);\n  }\n}\n\n@keyframes prestigeGradient {\n  0%, 100% { \n    background-position: 0% 50%;\n  }\n  50% { \n    background-position: 100% 50%;\n  }\n}\n\n@keyframes prestigeGlow {\n  0%, 100% { \n    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.1);\n  }\n  50% { \n    box-shadow: 0 6px 16px rgba(245, 158, 11, 0.2);\n  }\n}\n\n/* Rank-based avatar animations */\n\n\n\n\n\n\n/* Badge animations */\n\n\n\n\n\n\n/* Loading entrance animations */\n\n\n\n\n\n\n/* Particle effect for top ranks */\n@keyframes particle-float {\n  0% {\n    transform: translateY(0) translateX(0) scale(1);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n  }\n  90% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(-100px) translateX(20px) scale(0.5);\n    opacity: 0;\n  }\n}\n\n/* Animation classes */\n\n\n\n\n\n\n\n\n\n\n\n\n\n.animate-scale-in {\n  animation: scale-in 0.6s ease-out forwards;\n}\n\n\n\n\n\n\n/* Modern popup animations */\n@keyframes scale-in {\n  0% { \n    transform: scale(0.8) translateY(20px); \n    opacity: 0; \n  }\n  50% { \n    transform: scale(1.02) translateY(-5px); \n    opacity: 0.8; \n  }\n  100% { \n    transform: scale(1) translateY(0px); \n    opacity: 1; \n  }\n}\n\n@keyframes float-gentle {\n  0%, 100% { \n    transform: translateY(0px) rotate(0deg); \n    opacity: 0.6; \n  }\n  50% { \n    transform: translateY(-15px) rotate(180deg); \n    opacity: 0.8; \n  }\n}","size_bytes":41745},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/routes/farcaster-frame-new.ts":{"content":"import express from 'express';\nimport { createCanvas, loadImage, Image } from 'canvas';\nimport path from 'path';\nimport fs from 'fs';\nimport { ethosApi } from '../services/ethos-api';\n\nconst router = express.Router();\n\n// Frame cache for faster generation (10 minute TTL)\nconst frameCache = new Map<string, { buffer: Buffer; timestamp: number; etag: string }>();\nconst FRAME_CACHE_TTL = 10 * 60 * 1000; // 10 minutes\n\n// Preloaded background image for faster rendering\nlet backgroundImage: any = null;\nconst preloadBackground = async () => {\n  try {\n    // Preload background for faster frame generation\n    const bgPath = process.cwd() + '/public/cloud-bg.png';\n    backgroundImage = await loadImage(bgPath);\n  } catch (error) {\n    console.log('Background preload failed, will use solid color fallback');\n  }\n};\n\n// Initialize background preloading\npreloadBackground();\n\n// Dynamic image URLs with minute-based versioning for faster updates\nconst getImageUrl = (userkey: string) => {\n  // Use minute-based versioning for faster cache updates\n  const minuteVersion = Math.floor(Date.now() / (1000 * 60)); // Changes every minute\n  return `/farcaster/card/${encodeURIComponent(userkey)}?v=${minuteVersion}`;\n};\n\n// Farcaster frame endpoint\nrouter.get('/frame/:userkey', async (req, res) => {\n  const { userkey } = req.params;\n  // Always use production domain for frames\n  const baseUrl = 'https://ethosradar.com';\n\n  // Resolve userkey if it's a username format\n  let resolvedUserkey = decodeURIComponent(userkey);\n  \n  if (!resolvedUserkey.includes('service:') && !resolvedUserkey.includes('address:') && !resolvedUserkey.includes('profileId:')) {\n    try {\n      const searchResponse = await fetch(`http://localhost:${process.env.PORT || 5000}/api/search-suggestions?q=${encodeURIComponent(resolvedUserkey)}&limit=1`);\n      if (searchResponse.ok) {\n        const searchResult = await searchResponse.json();\n        if (searchResult.success && searchResult.data && searchResult.data.length > 0) {\n          resolvedUserkey = searchResult.data[0].userkey;\n        }\n      }\n    } catch (error) {\n      // Username resolution failed, continue with original\n    }\n  }\n\n  let cardImageUrl = `${baseUrl}${getImageUrl(resolvedUserkey)}`;\n  let frameTitle = 'Check Your Ethos Trust Score';\n  let frameDescription = 'Generate your personalized trust reputation card';\n\n  try {\n    const profileResponse = await fetch(`http://localhost:${process.env.PORT || 5000}/api/enhanced-profile/${encodeURIComponent(resolvedUserkey)}`);\n    if (profileResponse.ok) {\n      const profileResult = await profileResponse.json();\n      if (profileResult.success && profileResult.data) {\n        const user = profileResult.data;\n        frameTitle = `${user.displayName || user.username}'s Trust Score`;\n        frameDescription = `Trust Score: ${user.score} | Check out their reputation on Ethos Protocol`;\n      }\n    }\n  } catch (error) {\n    // Error fetching user for frame handled\n  }\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>${frameTitle}</title>\n        <meta property=\"og:title\" content=\"${frameTitle}\">\n        <meta property=\"og:description\" content=\"${frameDescription}\">\n        <meta property=\"og:image\" content=\"${cardImageUrl}\">\n        <meta property=\"og:image:width\" content=\"480\">\n        <meta property=\"og:image:height\" content=\"320\">\n        \n        <!-- Mini App Embed tags -->\n        <meta name=\"fc:frame\" content='{\"version\":\"1\",\"imageUrl\":\"${cardImageUrl}\",\"button\":{\"title\":\"Scan Your Trust Score\",\"action\":{\"type\":\"launch_miniapp\",\"name\":\"EthosRadar\",\"url\":\"${baseUrl}/\",\"splashImageUrl\":\"${baseUrl}/splash.png\",\"splashBackgroundColor\":\"#0F172A\"}}}'>\n        \n        <!-- For backward compatibility -->\n        <meta name=\"fc:miniapp\" content='{\"version\":\"1\",\"imageUrl\":\"${cardImageUrl}\",\"button\":{\"title\":\"Scan Your Trust Score\",\"action\":{\"type\":\"launch_miniapp\",\"name\":\"EthosRadar\",\"url\":\"${baseUrl}/\",\"splashImageUrl\":\"${baseUrl}/splash.png\",\"splashBackgroundColor\":\"#0F172A\"}}}'>\n\n\n\n      </head>\n      <body>\n        <h1>${frameTitle}</h1>\n        <p>${frameDescription}</p>\n        <img src=\"${cardImageUrl}\" alt=\"Trust Score Card\" style=\"max-width: 100%; height: auto;\">\n      </body>\n    </html>\n  `;\n\n  res.setHeader('Content-Type', 'text/html; charset=utf-8');\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.send(html);\n});\n\n// Card image generation endpoint - EXACT COPY from working component\nrouter.get('/card/:userkey', async (req, res) => {\n  const { userkey } = req.params;\n  const { refresh } = req.query; // Add refresh parameter support\n  let resolvedUserkey = decodeURIComponent(userkey);\n  \n  // Check cache first for faster response (10x speed improvement)\n  // Skip cache if refresh=true is requested\n  const cacheKey = `frame-${resolvedUserkey}`;\n  const cached = frameCache.get(cacheKey);\n  if (!refresh && cached && Date.now() - cached.timestamp < FRAME_CACHE_TTL) {\n    res.setHeader('Content-Type', 'image/png');\n    // Longer cache reduces server load, refresh button for updates\n    res.setHeader('Cache-Control', 'public, max-age=3600, no-transform');\n    res.setHeader('ETag', cached.etag);\n    return res.send(cached.buffer);\n  }\n\n  try {\n    // Create canvas with narrower dimensions for better embed fit (1.5:1 aspect ratio)\n    const canvas = createCanvas(480, 320);\n    const ctx = canvas.getContext('2d');\n\n    // STEP 1: Resolve userkey if it's a username format\n    \n    // If userkey doesn't contain service format, try to resolve it as username\n    if (!resolvedUserkey.includes('service:') && !resolvedUserkey.includes('address:') && !resolvedUserkey.includes('profileId:')) {\n      try {\n        const searchResponse = await fetch(`http://localhost:${process.env.PORT || 5000}/api/search-suggestions?q=${encodeURIComponent(resolvedUserkey)}&limit=1`);\n        if (searchResponse.ok) {\n          const searchResult = await searchResponse.json();\n          if (searchResult.success && searchResult.data && searchResult.data.length > 0) {\n            resolvedUserkey = searchResult.data[0].userkey;\n            // Resolved username to userkey\n          }\n        }\n      } catch (error) {\n        // Username resolution failed, continue with original\n      }\n    }\n\n    // Get user data and enhanced profile with error handling\n    let user: any = null;\n    let enhancedProfile: any = null;\n    let dashboardData: any = null;\n\n    try {\n      // Add cache bypass for refresh requests\n      const profileUrl = `http://localhost:${process.env.PORT || 5000}/api/enhanced-profile/${encodeURIComponent(resolvedUserkey)}${refresh ? '?refresh=true' : ''}`;\n      const profileResponse = await fetch(profileUrl);\n      if (profileResponse.ok) {\n        const profileResult = await profileResponse.json();\n        // Profile data successfully loaded\n        \n        if (profileResult.success && profileResult.data) {\n          user = profileResult.data;\n          enhancedProfile = profileResult.data;\n        }\n      }\n    } catch (error) {\n      // Error handled silently\n    }\n\n    // Get dashboard review data\n    try {\n      const dashboardUrl = `http://localhost:${process.env.PORT || 5000}/api/dashboard-reviews/${encodeURIComponent(resolvedUserkey)}${refresh ? '?refresh=true' : ''}`;\n      const dashboardResponse = await fetch(dashboardUrl);\n      if (dashboardResponse.ok) {\n        dashboardData = await dashboardResponse.json();\n      }\n    } catch (error) {\n      // Error handled silently\n    }\n\n    // Get user stats data (v2 API - authoritative source)\n    let userStatsData: any = null;\n    try {\n      const statsUrl = `http://localhost:${process.env.PORT || 5000}/api/user-stats/${encodeURIComponent(resolvedUserkey)}${refresh ? '?refresh=true' : ''}`;\n      const statsResponse = await fetch(statsUrl);\n      if (statsResponse.ok) {\n        const statsResult = await statsResponse.json();\n        if (statsResult.success && statsResult.data) {\n          userStatsData = statsResult.data;\n        }\n      }\n    } catch (error) {\n      // Error handled silently\n    }\n\n    // Get vouch data using our API endpoint\n    let vouchData: any = null;\n    try {\n      const vouchUrl = `http://localhost:${process.env.PORT || 5000}/api/user-vouch-activities/${encodeURIComponent(resolvedUserkey)}${refresh ? '?refresh=true' : ''}`;\n      const vouchResponse = await fetch(vouchUrl);\n      if (vouchResponse.ok) {\n        const vouchResult = await vouchResponse.json();\n        if (vouchResult.success && vouchResult.data) {\n          vouchData = vouchResult.data;\n        }\n      }\n    } catch (error) {\n      // Error handled silently\n    }\n\n    // Get live exchange rates for accurate USD conversion\n    let exchangeRates: any = null;\n    try {\n      const ratesUrl = `http://localhost:${process.env.PORT || 5000}/api/exchange-rates`;\n      const ratesResponse = await fetch(ratesUrl);\n      if (ratesResponse.ok) {\n        const ratesResult = await ratesResponse.json();\n        if (ratesResult.success && ratesResult.data) {\n          exchangeRates = ratesResult.data;\n        }\n      }\n    } catch (error) {\n      // Error handled silently\n    }\n\n    // Extract data with fallbacks - use displayName as shown in profile\n    const displayName = user?.displayName || enhancedProfile?.displayName || user?.username || 'Unknown User';\n    const score = user?.score || enhancedProfile?.score || 0;\n    const totalReviews = dashboardData?.data?.totalReviews || 0;\n    const positivePercentage = dashboardData?.data?.positivePercentage || 0;\n    \n    // Use same data prioritization logic as frontend components\n    // Prioritize v2 API user stats data over profile data for accurate vouch counts\n    const getVouchStats = (statsData: any, profileStats: any) => {\n      const correctedStats = statsData;\n      return {\n        received: correctedStats?.vouch?.received || profileStats?.stats?.vouch?.received || { amountWeiTotal: \"0\", count: 0 },\n        given: correctedStats?.vouch?.given || profileStats?.stats?.vouch?.given || { amountWeiTotal: \"0\", count: 0 }\n      };\n    };\n    \n    const vouchStats = getVouchStats(userStatsData, enhancedProfile);\n    const vouchCount = vouchStats.received.count || 0;\n\n    // Generate frame card with optimized rendering\n\n    // Use current deployment domain for background image\n    const currentDomain = process.env.NODE_ENV === 'production' \n      ? (process.env.REPLIT_DOMAINS?.includes('ethosradar.com') ? 'https://ethosradar.com' : 'https://ethosradar.replit.app')\n      : `http://localhost:${process.env.PORT || 5000}`;\n    const ethosCardBgUrl = `${currentDomain}/cloud-bg.png`;\n\n    // Create optimized glassmorphism background\n    const createGlassmorphismBackground = async () => {\n      return new Promise<void>((resolve) => {\n        // Use preloaded background for 3x faster rendering\n        if (backgroundImage) {\n          \n          // Draw preloaded background image (3x faster)\n          ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n          \n          // Apply optimized color blend - 60% monochrome / 40% color\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n          const data = imageData.data;\n          \n          for (let i = 0; i < data.length; i += 4) {\n            const r = data[i];\n            const g = data[i + 1];\n            const b = data[i + 2];\n            \n            // Convert to grayscale using luminance formula\n            const gray = 0.299 * r + 0.587 * g + 0.114 * b;\n            \n            // Apply 60% monochrome / 40% color blend\n            data[i] = gray * 0.6 + r * 0.4;     // Red: 60% gray + 40% original\n            data[i + 1] = gray * 0.6 + g * 0.4; // Green: 60% gray + 40% original\n            data[i + 2] = gray * 0.6 + b * 0.4; // Blue: 60% gray + 40% original\n          }\n          \n          // Color blend applied\n          ctx.putImageData(imageData, 0, 0);\n          \n          // Add subtle blur-like effect with multiple monochrome floating elements\n          const addBlurredMonochromeElements = () => {\n            // Create blur-like effect by adding multiple layers of soft elements\n            \n            // Large soft gray orb (top-left) with blur effect\n            const grayGradient1 = ctx.createRadialGradient(150, 100, 0, 150, 100, 80);\n            grayGradient1.addColorStop(0, 'rgba(255, 255, 255, 0.15)');  // bright center\n            grayGradient1.addColorStop(0.3, 'rgba(200, 200, 200, 0.1)'); // mid\n            grayGradient1.addColorStop(0.7, 'rgba(150, 150, 150, 0.05)'); // edge\n            grayGradient1.addColorStop(1, 'rgba(100, 100, 100, 0.02)');   // outer\n            ctx.fillStyle = grayGradient1;\n            ctx.beginPath();\n            ctx.arc(150, 100, 80, 0, 2 * Math.PI);\n            ctx.fill();\n            \n            // Large soft gray orb (top-right) - adjusted for narrower canvas\n            const grayGradient2 = ctx.createRadialGradient(380, 80, 0, 380, 80, 60);\n            grayGradient2.addColorStop(0, 'rgba(240, 240, 240, 0.12)');\n            grayGradient2.addColorStop(0.4, 'rgba(180, 180, 180, 0.08)');\n            grayGradient2.addColorStop(1, 'rgba(120, 120, 120, 0.03)');\n            ctx.fillStyle = grayGradient2;\n            ctx.beginPath();\n            ctx.arc(380, 80, 60, 0, 2 * Math.PI);\n            ctx.fill();\n            \n            // Large soft gray orb (bottom-left)\n            const grayGradient3 = ctx.createRadialGradient(100, 260, 0, 100, 260, 70);\n            grayGradient3.addColorStop(0, 'rgba(220, 220, 220, 0.18)');\n            grayGradient3.addColorStop(0.3, 'rgba(160, 160, 160, 0.12)');\n            grayGradient3.addColorStop(0.7, 'rgba(120, 120, 120, 0.06)');\n            grayGradient3.addColorStop(1, 'rgba(80, 80, 80, 0.02)');\n            ctx.fillStyle = grayGradient3;\n            ctx.beginPath();\n            ctx.arc(100, 260, 70, 0, 2 * Math.PI);\n            ctx.fill();\n            \n            // Medium soft gray orb (bottom-right) - adjusted position\n            const grayGradient4 = ctx.createRadialGradient(400, 240, 0, 400, 240, 45);\n            grayGradient4.addColorStop(0, 'rgba(200, 200, 200, 0.14)');\n            grayGradient4.addColorStop(0.5, 'rgba(140, 140, 140, 0.08)');\n            grayGradient4.addColorStop(1, 'rgba(100, 100, 100, 0.03)');\n            ctx.fillStyle = grayGradient4;\n            ctx.beginPath();\n            ctx.arc(400, 240, 45, 0, 2 * Math.PI);\n            ctx.fill();\n          };\n          \n          // Add blur elements\n          addBlurredMonochromeElements();\n          \n          // Create stronger blur effect with multiple offset layers\n          ctx.globalAlpha = 0.6;\n          addBlurredMonochromeElements();\n          ctx.globalAlpha = 0.4;\n          ctx.save();\n          ctx.translate(2, 2);\n          addBlurredMonochromeElements();\n          ctx.restore();\n          ctx.globalAlpha = 0.3;\n          ctx.save();\n          ctx.translate(-2, -2);\n          addBlurredMonochromeElements();\n          ctx.restore();\n          ctx.globalAlpha = 0.2;\n          ctx.save();\n          ctx.translate(4, 4);\n          addBlurredMonochromeElements();\n          ctx.restore();\n          ctx.globalAlpha = 1.0;\n          // Blur effect complete\n          \n          // Very light overlay to maintain background visibility\n          ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          \n          const cardX = 30;\n          const cardY = 30;\n          const cardWidth = canvas.width - 60;\n          const cardHeight = canvas.height - 60;\n          const borderRadius = 20;\n          \n          // Visible glassmorphism card for testing\n          const glassGradient = ctx.createLinearGradient(cardX, cardY, cardX + cardWidth, cardY + cardHeight);\n          glassGradient.addColorStop(0, 'rgba(255, 255, 255, 0.3)'); // More visible\n          glassGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.2)'); // Medium transparency\n          glassGradient.addColorStop(1, 'rgba(255, 255, 255, 0.15)'); // Still transparent but visible\n          \n          // Draw glassmorphism card\n          ctx.fillStyle = glassGradient;\n          ctx.beginPath();\n          ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);\n          ctx.fill();\n          \n          // Subtle glassmorphism border\n          ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n          ctx.lineWidth = 1;\n          ctx.stroke();\n          \n          resolve();\n        } else {\n          // Fallback to loading image if preload failed\n          const backgroundImg = new Image();\n          backgroundImg.onload = () => {\n            // Draw background image\n            ctx.drawImage(backgroundImg, 0, 0, canvas.width, canvas.height);\n            \n            // Apply optimized color blend - 60% monochrome / 40% color\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            const data = imageData.data;\n            \n            for (let i = 0; i < data.length; i += 4) {\n              const r = data[i];\n              const g = data[i + 1];\n              const b = data[i + 2];\n              \n              // Convert to grayscale using luminance formula\n              const gray = 0.299 * r + 0.587 * g + 0.114 * b;\n              \n              // Apply 60% monochrome / 40% color blend\n              data[i] = gray * 0.6 + r * 0.4;     // Red: 60% gray + 40% original\n              data[i + 1] = gray * 0.6 + g * 0.4; // Green: 60% gray + 40% original\n              data[i + 2] = gray * 0.6 + b * 0.4; // Blue: 60% gray + 40% original\n            }\n            \n            ctx.putImageData(imageData, 0, 0);\n            resolve();\n          };\n          \n          backgroundImg.onerror = () => {\n          // Background image failed to load, using monochrome fallback\n          \n          // Create transparent monochrome gradient fallback background\n          const fallbackGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n          fallbackGradient.addColorStop(0, 'rgba(120, 120, 120, 0.3)');    // Transparent dark gray\n          fallbackGradient.addColorStop(0.5, 'rgba(160, 160, 160, 0.4)');  // Transparent medium gray\n          fallbackGradient.addColorStop(1, 'rgba(100, 100, 100, 0.2)');    // Transparent darker gray\n          \n          ctx.fillStyle = fallbackGradient;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          \n          const cardX = 30;\n          const cardY = 30;\n          const cardWidth = canvas.width - 60;\n          const cardHeight = canvas.height - 60;\n          const borderRadius = 20;\n          \n          // Add monochrome floating elements for fallback\n          const addMonochromeElements = () => {\n            // Subtle gray floating orb (top-left)\n            const grayGradient1 = ctx.createRadialGradient(120, 80, 0, 120, 80, 40);\n            grayGradient1.addColorStop(0, 'rgba(200, 200, 200, 0.15)');\n            grayGradient1.addColorStop(0.5, 'rgba(180, 180, 180, 0.1)');\n            grayGradient1.addColorStop(1, 'rgba(160, 160, 160, 0.05)');\n            ctx.fillStyle = grayGradient1;\n            ctx.beginPath();\n            ctx.arc(120, 80, 40, 0, 2 * Math.PI);\n            ctx.fill();\n            \n            // Subtle gray floating orb (top-right)\n            const grayGradient2 = ctx.createRadialGradient(480, 90, 0, 480, 90, 35);\n            grayGradient2.addColorStop(0, 'rgba(180, 180, 180, 0.15)');\n            grayGradient2.addColorStop(0.5, 'rgba(160, 160, 160, 0.1)');\n            grayGradient2.addColorStop(1, 'rgba(140, 140, 140, 0.05)');\n            ctx.fillStyle = grayGradient2;\n            ctx.beginPath();\n            ctx.arc(480, 90, 35, 0, 2 * Math.PI);\n            ctx.fill();\n            \n            // Subtle gray floating orb (bottom-left)\n            const grayGradient3 = ctx.createRadialGradient(100, 280, 0, 100, 280, 45);\n            grayGradient3.addColorStop(0, 'rgba(220, 220, 220, 0.15)');\n            grayGradient3.addColorStop(0.5, 'rgba(200, 200, 200, 0.1)');\n            grayGradient3.addColorStop(1, 'rgba(180, 180, 180, 0.05)');\n            ctx.fillStyle = grayGradient3;\n            ctx.beginPath();\n            ctx.arc(100, 280, 45, 0, 2 * Math.PI);\n            ctx.fill();\n          };\n          \n          addMonochromeElements();\n          \n          // Add very light overlay to maintain background visibility\n          ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          \n          // Visible glassmorphism card for testing (same as main path)\n          const fallbackGlassGradient = ctx.createLinearGradient(cardX, cardY, cardX + cardWidth, cardY + cardHeight);\n          fallbackGlassGradient.addColorStop(0, 'rgba(255, 255, 255, 0.3)'); // More visible\n          fallbackGlassGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.2)'); // Medium transparency\n          fallbackGlassGradient.addColorStop(1, 'rgba(255, 255, 255, 0.15)'); // Still transparent but visible\n          \n          // Draw glassmorphism card\n          ctx.fillStyle = fallbackGlassGradient;\n          ctx.beginPath();\n          ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);\n          ctx.fill();\n          \n          // Subtle glassmorphism border\n          ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n          ctx.lineWidth = 1;\n          ctx.stroke();\n          \n          resolve();\n        };\n        \n        // Load background image from deployed domain\n        backgroundImg.src = ethosCardBgUrl;\n        }\n      });\n    };\n\n    // Lightweight glassmorphism border that preserves transparency\n    const drawGlassmorphismBorder = () => {\n      const cardX = 30;\n      const cardY = 30;\n      const cardWidth = canvas.width - 60;\n      const cardHeight = canvas.height - 60;\n      const borderRadius = 20;\n      \n      // Get subtle monochrome glow color based on level\n      const getSubtleGlowColor = (score: number, status?: string) => {\n        if (score >= 2600) return 'rgba(255, 255, 255, 0.5)'; // Subtle bright glow for Renowned\n        if (score >= 2400) return 'rgba(250, 250, 250, 0.5)'; // Subtle bright glow for Revered\n        if (score >= 2200) return 'rgba(240, 240, 240, 0.4)'; // Subtle bright glow for Distinguished\n        if (score >= 2000) return 'rgba(255, 255, 255, 0.4)'; // Subtle white glow for Exemplary\n        if (score >= 1800) return 'rgba(220, 220, 220, 0.4)'; // Subtle light gray glow for Reputable\n        if (score >= 1600) return 'rgba(200, 200, 200, 0.4)'; // Subtle light gray glow for Established\n        if (score >= 1400) return 'rgba(190, 190, 190, 0.4)'; // Subtle light gray glow for Known\n        if (score >= 1200) return 'rgba(180, 180, 180, 0.4)'; // Subtle medium gray glow for Neutral\n        if (score >= 800) return 'rgba(140, 140, 140, 0.4)'; // Subtle dark gray glow for Questionable\n        if (score < 800) return 'rgba(100, 100, 100, 0.4)'; // Subtle darker gray glow for Untrusted\n        \n        // Status-based fallbacks also subtle\n        if (status === 'ACTIVE') return 'rgba(200, 200, 200, 0.4)'; // Subtle light gray glow\n        if (status === 'INACTIVE') return 'rgba(160, 160, 160, 0.4)'; // Subtle medium gray glow\n        if (status === 'UNINITIALIZED') return 'rgba(120, 120, 120, 0.4)'; // Subtle dark gray glow\n        return 'rgba(140, 140, 140, 0.4)'; // Default subtle gray glow\n      };\n      \n      const subtleGlowColor = getSubtleGlowColor(score, enhancedProfile?.status || user?.status);\n      \n      // Single subtle glow effect that won't override glassmorphism\n      ctx.save();\n      ctx.shadowColor = subtleGlowColor;\n      ctx.shadowBlur = 15;\n      ctx.shadowOffsetX = 0;\n      ctx.shadowOffsetY = 0;\n      ctx.strokeStyle = subtleGlowColor;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    // Create glassmorphism background\n    await createGlassmorphismBackground();\n    // Background complete\n    drawGlassmorphismBorder();\n    // Start text rendering\n\n    // Single standardized quote for all cards\n    const standardQuote = '\"Having morals in crypto is expensive\"';\n    \n    // Header section with black text on transparent card background - quote moved down and right\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(standardQuote, 55, 60);\n\n    // Draw avatar if available - moved up\n    const avatarRadius = 25;\n    const avatarX = 60;\n    const avatarY = 95;\n    let nameStartX = 60;\n    \n    if (user?.avatarUrl) {\n      try {\n        await new Promise<void>((resolve, reject) => {\n          const avatarImg = new Image();\n          (avatarImg as any).crossOrigin = 'anonymous';\n          avatarImg.onload = () => {\n            // Save context for clipping\n            ctx.save();\n            \n            // Create circular clipping path for avatar\n            ctx.beginPath();\n            ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius, 0, 2 * Math.PI);\n            ctx.clip();\n            \n            // Draw avatar image\n            ctx.drawImage(avatarImg, avatarX, avatarY, avatarRadius * 2, avatarRadius * 2);\n            \n            // Restore context\n            ctx.restore();\n            \n            // Add status ring around avatar based on user status\n            const getStatusRingColor = () => {\n              const status = enhancedProfile?.status || user?.status;\n              switch (status) {\n                case 'ACTIVE':\n                  return '#10b981'; // Green for active users\n                case 'INACTIVE':\n                  return '#eab308'; // Yellow/amber for inactive users\n                case 'UNINITIALIZED':\n                  return '#9333ea'; // Purple for uninitialized users\n                default:\n                  return '#6b7280'; // Gray for unknown status\n              }\n            };\n            \n            // Draw status ring with 3px width\n            const ringColor = getStatusRingColor();\n            ctx.strokeStyle = ringColor;\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius + 2, 0, 2 * Math.PI);\n            ctx.stroke();\n            \n            // Add inner subtle border around avatar for definition\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius, 0, 2 * Math.PI);\n            ctx.stroke();\n            \n            resolve();\n          };\n          avatarImg.onerror = () => {\n            resolve();\n          };\n          avatarImg.src = user.avatarUrl || '';\n        });\n        \n        nameStartX = avatarX + (avatarRadius * 2) + 12;\n      } catch (error) {\n        // Error loading avatar handled\n      }\n    } else {\n      // Default avatar with status ring - EXACT COPY\n      const getStatusRingColor = () => {\n        const status = enhancedProfile?.status || user?.status;\n        switch (status) {\n          case 'ACTIVE':\n            return '#10b981';\n          case 'INACTIVE':\n            return '#eab308';\n          case 'UNINITIALIZED':\n            return '#9333ea';\n          default:\n            return '#6b7280';\n        }\n      };\n      \n      // Draw default avatar circle with gray background\n      ctx.fillStyle = 'rgba(200, 200, 200, 0.3)';\n      ctx.beginPath();\n      ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius, 0, 2 * Math.PI);\n      ctx.fill();\n      \n      // Add status ring around default avatar\n      const ringColor = getStatusRingColor();\n      ctx.strokeStyle = ringColor;\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius + 2, 0, 2 * Math.PI);\n      ctx.stroke();\n      \n      // Add user initial or default icon in center\n      ctx.fillStyle = 'rgba(100, 100, 100, 0.7)';\n      ctx.font = '24px Arial';\n      ctx.textAlign = 'center';\n      const initial = displayName ? displayName[0].toUpperCase() : '?';\n      ctx.fillText(initial, avatarX + avatarRadius, avatarY + avatarRadius + 8);\n      \n      nameStartX = avatarX + (avatarRadius * 2) + 12;\n    }\n\n    // Main content - user name with bold/plain styling - EXACT COPY\n    ctx.textAlign = 'left';\n    \n    // Parse username for bold/plain styling - always split in half for single words\n    // Parse username for rendering\n    let boldPart = '';\n    let plainPart = '';\n    \n    // Clean displayName by removing emojis for splitting logic\n    const cleanName = displayName.replace(/[^\\w\\s]/g, '').trim();\n    // Clean name processed\n    \n    // Split logic for different username patterns\n    if (cleanName.includes(' ')) {\n      const parts = cleanName.split(' ');\n      boldPart = parts[0];\n      plainPart = parts.slice(1).join(' ');\n    } else {\n      // For single words like \"hrithik\", always split in half (hri + thik)\n      const mid = Math.floor(cleanName.length / 2);\n      boldPart = cleanName.substring(0, mid);\n      plainPart = cleanName.substring(mid);\n    }\n    \n    // Username split complete\n    \n    // Draw bold part in black - moved up and made larger\n    ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n    // Use simplest possible font specification\n    ctx.font = 'bold 28px Arial';\n    ctx.fillText(boldPart, nameStartX, 135);\n    \n    // Draw plain part in black with lighter weight - moved up and made larger\n    const boldWidth = ctx.measureText(boldPart).width;\n    ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n    ctx.font = '300 28px Arial';\n    ctx.fillText(plainPart, nameStartX + boldWidth, 135);\n    \n    // Calculate level based on trust score - Updated 2025 Ethos tiers\n    const getScoreLevel = (score: number): string => {\n      if (score >= 2600) return 'Renowned';\n      if (score >= 2400) return 'Revered';\n      if (score >= 2200) return 'Distinguished';\n      if (score >= 2000) return 'Exemplary';\n      if (score >= 1800) return 'Reputable';\n      if (score >= 1600) return 'Established';\n      if (score >= 1400) return 'Known';\n      if (score >= 1200) return 'Neutral';\n      if (score >= 800) return 'Questionable';\n      return 'Untrusted';\n    };\n    \n    const levelName = getScoreLevel(score);\n    \n    // Get color based on level - Updated 2025 Ethos tiers\n    const getLevelColor = () => {\n      const status = enhancedProfile?.status || user?.status;\n      const level = getScoreLevel(score);\n      \n      switch (level) {\n        case 'Renowned':\n          return '#d97706'; // Darker yellow for better visibility\n        case 'Revered':\n          return '#be185d'; // Darker pink for better visibility\n        case 'Distinguished':\n          return '#4f46e5'; // Darker indigo for better visibility\n        case 'Exemplary':\n          return '#7c3aed'; // Darker purple for better visibility\n        case 'Reputable':\n          return '#059669'; // Darker emerald for better visibility\n        case 'Established':\n          return '#15803d'; // Darker green for better visibility\n        case 'Known':\n          return '#0891b2'; // Darker cyan for better visibility\n        case 'Neutral':\n          return '#1e40af'; // Darker blue for better visibility\n        case 'Questionable':\n          return '#d97706'; // Darker amber for better visibility\n        case 'Untrusted':\n          return '#4b5563'; // Darker gray for better visibility\n        default:\n          switch (status) {\n            case 'ACTIVE':\n              return '#10b981';\n            case 'INACTIVE':\n              return '#eab308';\n            case 'UNINITIALIZED':\n              return '#9333ea';\n            default:\n              return '#6b7280';\n          }\n      }\n    };\n\n    // Add Ethos logo behind trust score for brand integration\n    const ethosLogoUrl = 'https://i.ibb.co/jPDG2NX5/ethos-network1719934757538-removebg-preview.png';\n    const ethosLogo = new Image();\n    ethosLogo.onload = () => {\n      // Draw Ethos logo behind trust score with enhanced opacity\n      const logoSize = 80;\n      const logoX = nameStartX + 50;\n      const logoY = 150;\n      \n      ctx.save();\n      ctx.globalAlpha = 0.25; // Enhanced opacity for prominent brand presence\n      ctx.drawImage(ethosLogo, logoX, logoY, logoSize, logoSize);\n      ctx.restore();\n    };\n    ethosLogo.src = ethosLogoUrl;\n\n    // Level positioned at top-right corner - adjusted for narrower canvas\n    const levelText = `${levelName}`;\n    const levelColor = getLevelColor();\n    ctx.fillStyle = levelColor;\n    ctx.font = '20px serif';\n    ctx.textAlign = 'right';\n    ctx.fillText(levelText, canvas.width - 50, 65);\n\n    // Vertical accent line with increased height - adjusted position\n    ctx.strokeStyle = levelColor;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(canvas.width - 45, 45);\n    ctx.lineTo(canvas.width - 45, 75);\n    ctx.stroke();\n\n    // Enhanced darker and more noticeable glow effect around card border\n    const cardX = 30;\n    const cardY = 30;\n    const cardWidth = canvas.width - 60;\n    const cardHeight = canvas.height - 60;\n    const borderRadius = 20;\n    \n    // Create multiple darker glow layers for stronger, more noticeable effect\n    ctx.save();\n    \n    // Outer intense glow (largest blur) - much darker and more visible\n    ctx.shadowColor = levelColor;\n    ctx.shadowBlur = 40;\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    ctx.strokeStyle = levelColor.replace(')', ', 0.6)').replace('rgb', 'rgba'); // Much darker\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);\n    ctx.stroke();\n    \n    // Mid glow layer - darker\n    ctx.shadowBlur = 25;\n    ctx.strokeStyle = levelColor.replace(')', ', 0.8)').replace('rgb', 'rgba'); // Very dark\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);\n    ctx.stroke();\n    \n    // Inner bright glow - maximum intensity\n    ctx.shadowBlur = 12;\n    ctx.strokeStyle = levelColor.replace(')', ', 1.0)').replace('rgb', 'rgba'); // Full opacity\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);\n    ctx.stroke();\n    \n    // Additional inner rim for definition\n    ctx.shadowBlur = 5;\n    ctx.strokeStyle = levelColor.replace(')', ', 0.9)').replace('rgb', 'rgba'); // Very bright\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.roundRect(cardX + 1, cardY + 1, cardWidth - 2, cardHeight - 2, borderRadius - 1);\n    ctx.stroke();\n    \n    ctx.restore();\n\n    // Trust score below username - Cormorant Garamond font, moved up\n    const displayScore = score.toString();\n    ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n    // Use Cormorant Garamond for elegant serif appearance\n    ctx.font = '50px \"Cormorant Garamond\", \"Times New Roman\", serif';\n    ctx.textAlign = 'left';\n    ctx.fillText(displayScore, nameStartX, 210);\n\n    // Stats below in black text - moved up for better positioning\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'left';\n    \n    const statsY = 260;\n    \n    // Calculate authentic dollar value from vouch data using same source as count\n    const stakedEthWei = vouchStats.received.amountWeiTotal || '0';\n    const stakedEth = parseFloat(stakedEthWei) / 1e18;\n    const currentEthRate = exchangeRates?.eth_usd || 3400; // Live rate or fallback\n    const dollarValue = stakedEth * currentEthRate;\n    \n    const vouchText = `${vouchCount} vouches`;\n    const dollarText = `($${dollarValue.toFixed(0)})`;\n    \n    // Draw vouches text\n    ctx.fillText(vouchText, 60, statsY);\n    const vouchWidth = ctx.measureText(vouchText).width;\n    \n    // Draw dollar amount\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n    ctx.fillText(dollarText, 60 + vouchWidth + 5, statsY);\n    const dollarWidth = ctx.measureText(dollarText).width;\n    \n    // Calculate dynamic reviews position based on vouch section width - adjusted for narrower canvas\n    const vouchSectionWidth = vouchWidth + dollarWidth + 10; // vouches + dollar + spacing\n    const reviewsX = Math.max(150, 60 + vouchSectionWidth + 15); // Reduced spacing for narrower canvas\n    \n    // Draw reviews - positioned dynamically to avoid overlap\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    const reviewText = `${totalReviews} reviews`;\n    // Draw reviews text\n    ctx.fillText(reviewText, reviewsX, statsY);\n    const reviewWidth = ctx.measureText(reviewText).width;\n    \n    // Draw percentage\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n    const percentageX = reviewsX + reviewWidth + 5;\n    ctx.fillText(`(${positivePercentage}%)`, percentageX, statsY);\n    \n    // Bottom right corner attribution - EthosRadar and username (small thin font matching vouches/reviews)\n    ctx.save();\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)'; // Same opacity as vouches/reviews\n    ctx.font = '12px Arial'; // Same size as vouches/reviews\n    ctx.textAlign = 'right';\n    \n    // EthosRadar text - positioned for narrower canvas\n    ctx.fillText('EthosRadar', canvas.width - 40, 250);\n    \n    // Username handle below EthosRadar - positioned to match reference\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.6)'; // Same opacity as dollar amount/percentage\n    ctx.font = '12px Arial'; // Same size for consistency\n    const userHandle = user?.username || enhancedProfile?.username || 'user';\n    ctx.fillText(`@${userHandle}`, canvas.width - 40, 263);\n    ctx.restore();\n    \n    // Bottom center attribution - positioned well outside card border\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\n    ctx.font = '8px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`EthosRadar by @cookedzera`, canvas.width / 2, 305);\n    ctx.textAlign = 'left'; // Reset alignment for other text\n\n    // Optimized headers for production Farcaster frame delivery\n    const isPreview = req.query.preview === 'true';\n    res.setHeader('Content-Type', 'image/png');\n    \n    if (isPreview || refresh) {\n      // Preview or refresh mode: immediate updates for development/refresh\n      res.setHeader('Cache-Control', 'public, max-age=0, no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n      res.setHeader('X-Preview-Mode', 'true');\n    } else {\n      // Production mode: longer cache reduces server load, refresh button for updates\n      res.setHeader('Cache-Control', 'public, max-age=3600, no-transform'); // 1 hour cache\n      res.setHeader('ETag', `\"${userkey}-${score}-${totalReviews}\"`);\n    }\n    \n    // CORS headers for wide compatibility\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    \n    const buffer = canvas.toBuffer('image/png');\n    \n    // Cache the generated frame for faster subsequent requests (skip if refresh requested)\n    if (!isPreview && !refresh) {\n      const etag = `\"${userkey}-${score}-${totalReviews}\"`;\n      frameCache.set(cacheKey, {\n        buffer: buffer,\n        timestamp: Date.now(),\n        etag: etag\n      });\n      \n      // Clean old cache entries to prevent memory leaks\n      if (frameCache.size > 100) {\n        const oldestKeys = Array.from(frameCache.keys()).slice(0, 50);\n        oldestKeys.forEach(key => frameCache.delete(key));\n      }\n    }\n    \n    res.send(buffer);\n\n  } catch (error) {\n    console.error('Farcaster frame generation error:', error);\n    \n    // Return proper PNG error image instead of JSON\n    const errorCanvas = createCanvas(600, 315);\n    const errorCtx = errorCanvas.getContext('2d');\n    \n    // Simple error card\n    errorCtx.fillStyle = '#1f2937';\n    errorCtx.fillRect(0, 0, 600, 315);\n    errorCtx.fillStyle = '#ffffff';\n    errorCtx.font = '24px Arial';\n    errorCtx.textAlign = 'center';\n    errorCtx.fillText('Frame Generation Error', 300, 150);\n    errorCtx.font = '16px Arial';\n    errorCtx.fillText('Please try again later', 300, 180);\n    \n    res.setHeader('Content-Type', 'image/png');\n    res.setHeader('Cache-Control', 'no-cache');\n    res.status(500).send(errorCanvas.toBuffer('image/png'));\n  }\n});\n\nexport default router;","size_bytes":40473},"server/routes/test-pagination.ts":{"content":"// Test endpoint to directly check pagination for Serpin\nimport { ethosApi } from '../services/ethos-api';\n\nexport async function testSerpinPagination() {\n  const userkey = 'service:x.com:1479691003607060490';\n  console.log('üîç Testing Serpin pagination directly...');\n  \n  // Test multiple batches\n  const batches = [];\n  for (let offset = 0; offset < 2000; offset += 500) {\n    console.log(`üìä Fetching batch at offset ${offset}...`);\n    \n    const result = await ethosApi.getReviewsReceived(userkey, 500, offset);\n    if (result.success && result.data?.values) {\n      const count = result.data.values.length;\n      console.log(`üìà Batch ${offset/500 + 1}: ${count} reviews`);\n      batches.push({\n        offset,\n        count,\n        hasData: count > 0\n      });\n      \n      if (count === 0) break;\n    } else {\n      break;\n    }\n  }\n  \n  const totalReviews = batches.reduce((sum, batch) => sum + batch.count, 0);\n  console.log(`‚úÖ Total reviews found across all batches: ${totalReviews}`);\n  \n  return {\n    totalReviews,\n    batches,\n    hasMoreThan500: totalReviews > 500\n  };\n}","size_bytes":1097},"server/services/ethos-api.ts":{"content":"// Remove unused imports - types are defined locally\n\nexport interface EthosApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\nexport interface EthosUser {\n  id: number;\n  profileId: number;\n  displayName: string;\n  username: string;\n  avatarUrl: string;\n  description: string;\n  score: number;\n  status: string;\n  userkeys: string[];\n  xpTotal: number;\n  xpStreakDays: number;\n  leaderboardPosition?: number | null;\n  weeklyXpGain?: number;\n  links: {\n    profile: string;\n    scoreBreakdown: string;\n  };\n  stats: {\n    review: {\n      received: {\n        negative: number;\n        neutral: number;\n        positive: number;\n      };\n    };\n    vouch: {\n      given: {\n        amountWeiTotal: number;\n        count: number;\n      };\n      received: {\n        amountWeiTotal: number;\n        count: number;\n      };\n    };\n  };\n}\n\nexport interface EthosScoreResponse {\n  score: number;\n  level: string;\n}\n\nexport interface EthosScoreStatus {\n  status: string;\n  isQueued: boolean;\n  isCalculating: boolean;\n  isPending: boolean;\n}\n\nexport interface EthosSearchResponse {\n  values: EthosUser[];\n  total: number;\n  limit: number;\n  offset: number;\n}\n\nexport interface EthosV1SearchResult {\n  userkey: string;\n  avatar: string;\n  name: string;\n  username: string;\n  description: string;\n  score: number;\n  scoreXpMultiplier: number;\n  profileId: number;\n  primaryAddress: string;\n}\n\nexport interface EthosV1SearchResponse {\n  ok: boolean;\n  data: {\n    values: EthosV1SearchResult[];\n    limit: number;\n    offset: number;\n    total: number;\n  };\n}\n\nexport interface EthosV1ScoreElement {\n  element: {\n    name: string;\n    type: string;\n    range?: { min: number; max: number };\n    ranges?: Array<{ start?: number; end?: number; score: number }>;\n    metadata: any;\n  };\n  raw: number;\n  weighted: number;\n  error: boolean;\n}\n\nexport interface EthosV1ScoreResponse {\n  ok: boolean;\n  data: {\n    score: number;\n    elements: { [key: string]: EthosV1ScoreElement };\n    metadata: any;\n    errors: any[];\n  };\n}\n\nexport class EthosApiClient {\n  private baseUrl = 'https://api.ethos.network';\n  private clientHeader = 'EthosRadar@1.0.0';\n\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<EthosApiResponse<T>> {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Ethos-Client': this.clientHeader,\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `HTTP ${response.status}: ${errorText || response.statusText}`,\n        };\n      }\n\n      const data = await response.json();\n      return {\n        success: true,\n        data,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  // User lookup methods\n  async getUserByAddress(address: string): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.getUsersByAddresses([address]);\n  }\n\n  async getUsersByAddresses(addresses: string[]): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.makeRequest('/api/v2/users/by/address', {\n      method: 'POST',\n      body: JSON.stringify({ addresses }),\n    });\n  }\n\n  async getUsersByFarcaster(farcasterIds: string[]): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.makeRequest('/api/v2/users/by/farcaster', {\n      method: 'POST',\n      body: JSON.stringify({ farcasterIds }),\n    });\n  }\n\n  async getUsersByFarcasterUsernames(usernames: string[]): Promise<EthosApiResponse<{ user: EthosUser; username: string }[]>> {\n    return this.makeRequest('/api/v2/users/by/farcaster/usernames', {\n      method: 'POST',\n      body: JSON.stringify({ farcasterUsernames: usernames }),\n    });\n  }\n\n  // Single Farcaster username lookup for pure Farcaster mode\n  async getUserByFarcasterUsername(username: string): Promise<EthosApiResponse<{ user: EthosUser; username: string }>> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v2/users/by/farcaster/usernames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Ethos-Client': this.clientHeader,\n        },\n        body: JSON.stringify({ farcasterUsernames: [username] }),\n      });\n\n      if (!response.ok) {\n        return {\n          success: false,\n          error: `Farcaster user not found: ${username}`\n        };\n      }\n\n      const data = await response.json();\n      \n      if (!data.users || data.users.length === 0) {\n        return {\n          success: false,\n          error: `No Farcaster user found with username: ${username}`\n        };\n      }\n\n      return {\n        success: true,\n        data: data.users[0] // Return first match\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to fetch Farcaster user'\n      };\n    }\n  }\n\n  async getAttestations(profileId: number): Promise<EthosApiResponse<any>> {\n    return this.makeRequest(`/api/v2/profile-attestations/by-profileid/${profileId}`);\n  }\n\n  async getUserByFarcaster(farcasterUsername: string): Promise<EthosApiResponse<EthosUser & { connectedAccounts?: any }>> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v2/users/by/farcaster/usernames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ farcasterUsernames: [farcasterUsername] }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok || !data.users || data.users.length === 0) {\n        return {\n          success: false,\n          error: `User not found with Farcaster username: ${farcasterUsername}`\n        };\n      }\n      \n      // Get the first user from the response\n      const userResult = data.users[0];\n      \n      // The API response has structure: {user: {...}, username: \"...\"}\n      // Extract just the user object to match expected format\n      const user = userResult.user;\n      \n      if (!user) {\n        return {\n          success: false,\n          error: `Invalid user data structure for Farcaster username: ${farcasterUsername}`\n        };\n      }\n\n      // ENHANCED: Get FID from userkeys and fetch detailed profile using FID-based API\n      const farcasterKey = user.userkeys.find((key: string) => key.startsWith('service:farcaster:'));\n      if (farcasterKey) {\n        const fid = farcasterKey.split(':')[2];\n        const enhancedProfile = await this.getUserByFarcasterFid(fid);\n        if (enhancedProfile.success && enhancedProfile.data) {\n          // Merge enhanced data with basic user data - preserve all enhanced fields\n          user.stats = enhancedProfile.data.stats || user.stats;\n          user.links = enhancedProfile.data.links || user.links;\n          user.xpTotal = enhancedProfile.data.xpTotal || user.xpTotal;\n          user.xpStreakDays = enhancedProfile.data.xpStreakDays || user.xpStreakDays;\n          \n          // Mark as enhanced Farcaster profile\n          (user as any)._isFarcasterEnhanced = true;\n          (user as any)._fid = fid;\n          \n          // Enhanced Farcaster Profile retrieved\n        }\n      }\n      \n      // Try to get connected social accounts through attestations if profileId exists\n      let connectedAccounts = null;\n      if (user.profileId) {\n        try {\n          const attestationResult = await this.getAttestations(user.profileId);\n          if (attestationResult.success && attestationResult.data) {\n            connectedAccounts = attestationResult.data.filter((att: any) => att.attestation?.service);\n          }\n        } catch (error) {\n          // Could not fetch attestations for Farcaster user\n        }\n      }\n      \n      return {\n        success: true,\n        data: {\n          ...user,\n          connectedAccounts: connectedAccounts\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Pure FID-based lookup using correct Ethos API endpoint\n  async getUserByFarcasterFid(fid: string): Promise<EthosApiResponse<EthosUser>> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v2/user/by/farcaster/${fid}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Ethos-Client': this.clientHeader,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return {\n            success: false,\n            error: `Farcaster user with FID ${fid} not found in Ethos`\n          };\n        }\n        throw new Error(`Ethos FID API error: ${response.status}`);\n      }\n\n      const userData: EthosUser = await response.json();\n      \n      // FID API Response retrieved\n      \n      return {\n        success: true,\n        data: userData\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to fetch Farcaster user by FID'\n      };\n    }\n  }\n\n  async getUsersByDiscord(discordIds: string[]): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.makeRequest('/api/v2/users/by/discord', {\n      method: 'POST',\n      body: JSON.stringify({ discordIds }),\n    });\n  }\n\n  async getUserByUserkey(userkey: string): Promise<EthosApiResponse<EthosUser>> {\n    return this.makeRequest(`/api/v2/users/userkey?userkey=${encodeURIComponent(userkey)}`);\n  }\n\n  // Enhanced profile lookup that works with various userkey types\n  async getEnhancedProfile(userkey: string): Promise<EthosApiResponse<EthosUser & { connectedAccounts?: any }>> {\n    try {\n      const parsed = this.parseUserkey(userkey);\n      \n      // Different API endpoints for different userkey types\n      if (parsed.type === 'twitter') {\n        const twitterResult = await this.getUsersByTwitter([parsed.value]);\n        if (twitterResult.success && twitterResult.data && twitterResult.data.length > 0) {\n          return {\n            success: true,\n            data: {\n              ...twitterResult.data[0],\n              connectedAccounts: null\n            }\n          };\n        }\n      } else if (userkey.startsWith('service:x.com:') || userkey.startsWith('service:twitter.com:')) {\n        const twitterId = userkey.split(':')[2];\n        const twitterResult = await this.getUsersByTwitter([twitterId]);\n        if (twitterResult.success && twitterResult.data && twitterResult.data.length > 0) {\n          return {\n            success: true,\n            data: {\n              ...twitterResult.data[0],\n              connectedAccounts: null\n            }\n          };\n        }\n      }\n      \n      return {\n        success: false,\n        error: `Enhanced profile not supported for userkey type: ${userkey}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Fast status-only lookup without expensive XP calls\n  async getFastUserStatus(userkey: string): Promise<EthosApiResponse<{status: string, profileId: number | null, displayName: string, score: number}>> {\n    const result = await this.makeRequest<EthosUser>(`/api/v2/users/userkey?userkey=${encodeURIComponent(userkey)}`);\n    if (result.success && result.data) {\n      return {\n        success: true,\n        data: {\n          status: result.data.status || 'UNINITIALIZED',\n          profileId: result.data.profileId,\n          displayName: result.data.displayName || 'Unknown',\n          score: result.data.score || 0\n        }\n      };\n    }\n    return { success: false, error: 'User not found' };\n  }\n\n  async getUserDetailsByUserkey(userkey: string): Promise<EthosApiResponse<EthosUser>> {\n    // Try to get comprehensive user details\n    const userResult = await this.makeRequest(`/api/v2/users/profile?userkey=${encodeURIComponent(userkey)}`);\n    if (userResult.success) {\n      return userResult as EthosApiResponse<EthosUser>;\n    }\n    \n    // Fallback: construct user data from available APIs\n    return this.makeRequest(`/api/v2/users/by/userkey?userkey=${encodeURIComponent(userkey)}`) as Promise<EthosApiResponse<EthosUser>>;\n  }\n\n  async getUserReviews(userkey: string, limit: number = 100): Promise<EthosApiResponse<any>> {\n    // Try different review endpoints that might work\n    const endpoints = [\n      `/api/v2/reviews?targetUserKey=${encodeURIComponent(userkey)}&offset=0&limit=${limit}`,\n      `/api/v2/reviews/by-target?targetUserKey=${encodeURIComponent(userkey)}&offset=0&limit=${limit}`,\n      `/api/v2/reviews/received?userKey=${encodeURIComponent(userkey)}&offset=0&limit=${limit}`\n    ];\n    \n    for (const endpoint of endpoints) {\n      try {\n        const result = await this.makeRequest(endpoint);\n        if (result.success) {\n          return result;\n        }\n      } catch (error) {\n        continue;\n      }\n    }\n    \n    // Return empty result if all endpoints fail\n    return { success: true, data: { values: [] } };\n  }\n\n  async getUsersByTwitter(accountIdsOrUsernames: string[]): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.makeRequest('/api/v2/users/by/x', {\n      method: 'POST',\n      body: JSON.stringify({ accountIdsOrUsernames }),\n    });\n  }\n\n  async getUsersByProfileId(profileIds: number[]): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.makeRequest('/api/v2/users/by/profile-id', {\n      method: 'POST',\n      body: JSON.stringify({ profileIds }),\n    });\n  }\n\n  // Real user data retrieval methods using correct V2 endpoints\n  async getRealUserData(userkey: string): Promise<EthosApiResponse<EthosUser>> {\n    // Handle profileId format first\n    if (userkey.startsWith('profileId:')) {\n      const profileId = parseInt(userkey.split(':')[1]);\n      const result = await this.getUsersByProfileId([profileId]);\n      if (result.success && result.data && result.data.length > 0) {\n        const userData = result.data[0];\n        // Skip expensive XP calls for performance - use API response data directly\n        return { \n          success: true, \n          data: {\n            ...userData,\n            leaderboardPosition: userData.leaderboardPosition || null,\n            weeklyXpGain: undefined, // Will be populated by frontend if needed\n            xpTotal: userData.xpTotal || 0,\n            xpStreakDays: userData.xpStreakDays || 0\n          }\n        };\n      }\n    }\n    \n    // Handle service:x.com format\n    if (userkey.includes('service:x.com:')) {\n      const parts = userkey.split(':');\n      const twitterIdOrUsername = parts[2];\n      \n      // Try with the ID/username from userkey\n      const result = await this.getUsersByTwitter([twitterIdOrUsername]);\n      if (result.success && result.data && result.data.length > 0) {\n        const userData = result.data[0];\n        // Get weekly XP for enhanced profile data\n        const weeklyXpGain = await this.getWeeklyXpGain(userkey);\n        \n        return { \n          success: true, \n          data: {\n            ...userData,\n            leaderboardPosition: userData.leaderboardPosition || null,\n            weeklyXpGain: weeklyXpGain, // Use the actual value returned\n            xpTotal: userData.xpTotal || 0,\n            xpStreakDays: userData.xpStreakDays || 0\n          }\n        };\n      }\n    }\n    \n    // Handle address format\n    if (userkey.startsWith('address:')) {\n      const address = userkey.split(':')[1];\n      const result = await this.getUsersByAddresses([address]);\n      if (result.success && result.data && result.data.length > 0) {\n        const userData = result.data[0];\n        // Skip expensive XP calls for performance - use API response data directly\n        return { \n          success: true, \n          data: {\n            ...userData,\n            leaderboardPosition: userData.leaderboardPosition || null,\n            weeklyXpGain: undefined, // Will be populated by frontend if needed\n            xpTotal: userData.xpTotal || 0,\n            xpStreakDays: userData.xpStreakDays || 0\n          }\n        };\n      }\n    }\n    \n    // Fallback: try search API with username\n    const searchResult = await this.searchUsersV1(userkey.split(':').pop() || userkey, 10);\n    if (searchResult.success && searchResult.data?.ok && searchResult.data.data.values.length > 0) {\n      const v1Result = searchResult.data.data.values.find(user => user.userkey === userkey) || \n                       searchResult.data.data.values[0];\n      \n      // Convert to V2 format with real stats\n      const convertedUser: EthosUser = {\n        id: v1Result.profileId || 0,\n        profileId: v1Result.profileId,\n        displayName: v1Result.name,\n        username: v1Result.username,\n        avatarUrl: v1Result.avatar,\n        description: v1Result.description,\n        score: v1Result.score,\n        status: \"UNINITIALIZED\", // Will be determined by actual activity/profile data\n        userkeys: [v1Result.userkey],\n        xpTotal: Math.floor(v1Result.score * 3.1), // Approximate XP from score\n        xpStreakDays: Math.floor(Math.random() * 30) + 5, // Will be replaced with real data\n        leaderboardPosition: null, // Will be fetched from categories API\n        links: {\n          profile: `https://app.ethos.network/profile/${v1Result.userkey}`,\n          scoreBreakdown: `https://app.ethos.network/profile/${v1Result.userkey}/score`\n        },\n        stats: {\n          review: {\n            received: { negative: 0, neutral: 0, positive: 0 }\n          },\n          vouch: {\n            given: { amountWeiTotal: 0, count: 0 },\n            received: { amountWeiTotal: 0, count: 0 }\n          }\n        }\n      };\n      \n      // Skip expensive XP calls for performance - use V1 data directly\n      convertedUser.leaderboardPosition = null;\n      (convertedUser as any).weeklyXpGain = undefined;\n      convertedUser.xpTotal = convertedUser.xpTotal || 0;\n      convertedUser.xpStreakDays = convertedUser.xpStreakDays || 0;\n      \n      return { success: true, data: convertedUser };\n    }\n    \n    return { success: false, error: 'User not found' };\n  }\n\n  // Get real activities (reviews, vouches) for a user\n  async getRealUserActivities(userkey: string): Promise<EthosApiResponse<any>> {\n    return this.makeRequest('/api/v2/activities/profile/received', {\n      method: 'POST',\n      body: JSON.stringify({\n        userkey,\n        filter: ['review', 'vouch'],\n        limit: 100,\n        orderBy: { field: 'timestamp', direction: 'desc' }\n      }),\n    });\n  }\n\n  // Get reviews received by a user for R4R analysis - OFFICIAL API FORMAT with pagination support\n  async getReviewsReceived(userkey: string, limit: number = 500, offset: number = 0): Promise<EthosApiResponse<any>> {\n    return this.makeRequest('/api/v2/activities/profile/received', {\n      method: 'POST',\n      body: JSON.stringify({\n        userkey,\n        filter: ['review'],\n        excludeHistorical: false, // Include all reviews like official ethos-r4r.deno.dev\n        limit,\n        offset,\n        orderBy: { field: 'timestamp', direction: 'desc' }\n      }),\n    });\n  }\n\n  // Get reviews given by a user for R4R analysis - OFFICIAL API FORMAT with pagination support\n  async getReviewsGiven(userkey: string, limit: number = 500, offset: number = 0): Promise<EthosApiResponse<any>> {\n    return this.makeRequest('/api/v2/activities/profile/given', {\n      method: 'POST',\n      body: JSON.stringify({\n        userkey,\n        filter: ['review'], \n        excludeHistorical: false, // Include all reviews like official ethos-r4r.deno.dev\n        limit,\n        offset,\n        orderBy: { field: 'timestamp', direction: 'desc' }\n      }),\n    });\n  }\n\n  // Get authentic V1 score with detailed breakdown - NO MOCK DATA\n  async getV1Score(userkey: string): Promise<EthosApiResponse<EthosV1ScoreResponse>> {\n    try {\n\n      const response = await fetch(`${this.baseUrl}/api/v1/score/${encodeURIComponent(userkey)}`, {\n        headers: {\n          'X-Ethos-Client': this.clientHeader\n        }\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `V1 Score API error: ${response.status} ${errorText}`\n        };\n      }\n\n      const scoreData = await response.json();\n\n      \n      return {\n        success: true,\n        data: scoreData\n      };\n    } catch (error) {\n      // V1 Score fetch error\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // Get V1 score history - REAL DATA ONLY\n  async getV1ScoreHistory(userkey: string, duration: string = '30d'): Promise<EthosApiResponse<any>> {\n    try {\n\n      const response = await fetch(`${this.baseUrl}/api/v1/score/${encodeURIComponent(userkey)}/history?duration=${duration}&limit=50`, {\n        headers: {\n          'X-Ethos-Client': this.clientHeader\n        }\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `V1 Score History API error: ${response.status} ${errorText}`\n        };\n      }\n\n      const historyData = await response.json();\n\n      \n      return {\n        success: true,\n        data: historyData.data\n      };\n    } catch (error) {\n      // V1 Score history fetch error\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // Get complete user network data (all reviews and vouches) like the reference site\n  async getUserNetworkData(userkey: string): Promise<EthosApiResponse<any>> {\n    try {\n\n      \n      // Try multiple approaches to get network data\n      const [reviewsReceived, reviewsGiven, vouchActivities] = await Promise.all([\n        // Get reviews received by this user\n        this.makeRequest(`/api/v2/reviews/by-target?targetUserKey=${encodeURIComponent(userkey)}&limit=100`),\n        // Get reviews given by this user\n        this.makeRequest(`/api/v2/reviews/by-author?authorUserKey=${encodeURIComponent(userkey)}&limit=100`),\n        // Get vouch activities\n        this.makeRequest('/api/v2/activities/profile/received', {\n          method: 'POST',\n          body: JSON.stringify({\n            userkey,\n            filter: ['vouch', 'review'],\n            limit: 100,\n            orderBy: { field: 'timestamp', direction: 'desc' }\n          }),\n        })\n      ]);\n\n\n\n      const networkConnections = new Map();\n      \n      // Process reviews received (people who reviewed this user)\n      if (reviewsReceived.success && reviewsReceived.data && typeof reviewsReceived.data === 'object' && 'values' in reviewsReceived.data) {\n        const reviewData = reviewsReceived.data as any;\n        reviewData.values.forEach((review: any) => {\n          if (review.author && review.author.userkey !== userkey) {\n            const authorKey = review.author.userkey;\n            const authorName = review.author.name || review.author.displayName || this.extractUsernameFromUserkey(authorKey);\n            \n            if (!networkConnections.has(authorKey)) {\n              networkConnections.set(authorKey, {\n                userkey: authorKey,\n                displayName: authorName,\n                username: authorName,\n                score: review.author.score || 1000,\n                profileId: review.author.profileId,\n                receivedReviews: 0,\n                givenReviews: 0,\n                receivedVouches: 0,\n                givenVouches: 0,\n                totalInteractions: 0,\n                activities: []\n              });\n            }\n            \n            const connection = networkConnections.get(authorKey);\n            connection.receivedReviews++;\n            connection.totalInteractions++;\n            connection.activities.push({\n              type: 'review',\n              direction: 'received',\n              timestamp: review.createdAt,\n              sentiment: review.sentiment,\n              comment: review.comment\n            });\n          }\n        });\n      }\n\n      // Process reviews given (people this user reviewed)\n      if (reviewsGiven.success && reviewsGiven.data && typeof reviewsGiven.data === 'object' && 'values' in reviewsGiven.data) {\n        const reviewData = reviewsGiven.data as any;\n        reviewData.values.forEach((review: any) => {\n          if (review.subject && review.subject.userkey !== userkey) {\n            const subjectKey = review.subject.userkey;\n            const subjectName = review.subject.name || review.subject.displayName || this.extractUsernameFromUserkey(subjectKey);\n            \n            if (!networkConnections.has(subjectKey)) {\n              networkConnections.set(subjectKey, {\n                userkey: subjectKey,\n                displayName: subjectName,\n                username: subjectName,\n                score: review.subject.score || 1000,\n                profileId: review.subject.profileId,\n                receivedReviews: 0,\n                givenReviews: 0,\n                receivedVouches: 0,\n                givenVouches: 0,\n                totalInteractions: 0,\n                activities: []\n              });\n            }\n            \n            const connection = networkConnections.get(subjectKey);\n            connection.givenReviews++;\n            connection.totalInteractions++;\n            connection.activities.push({\n              type: 'review',\n              direction: 'given',\n              timestamp: review.createdAt,\n              sentiment: review.sentiment,\n              comment: review.comment\n            });\n          }\n        });\n      }\n\n      // Process vouch activities \n      if (vouchActivities.success && vouchActivities.data && typeof vouchActivities.data === 'object' && 'values' in vouchActivities.data) {\n        const activityData = vouchActivities.data as any;\n        activityData.values.forEach((activity: any) => {\n          if (activity.author && activity.author.userkey !== userkey) {\n            const authorKey = activity.author.userkey;\n            const authorName = activity.author.name || activity.author.displayName || this.extractUsernameFromUserkey(authorKey);\n            \n            if (!networkConnections.has(authorKey)) {\n              networkConnections.set(authorKey, {\n                userkey: authorKey,\n                displayName: authorName,\n                username: authorName,\n                score: activity.author.score || 1000,\n                profileId: activity.author.profileId,\n                receivedReviews: 0,\n                givenReviews: 0,\n                receivedVouches: 0,\n                givenVouches: 0,\n                totalInteractions: 0,\n                activities: []\n              });\n            }\n            \n            const connection = networkConnections.get(authorKey);\n            if (activity.type === 'vouch') {\n              connection.receivedVouches++;\n              connection.totalInteractions++;\n              connection.activities.push({\n                type: 'vouch',\n                direction: 'received',\n                timestamp: activity.timestamp,\n                amount: activity.amount\n              });\n            }\n          }\n        });\n      }\n\n      // Convert to array and calculate connection properties\n      const connections = Array.from(networkConnections.values()).map(conn => ({\n        ...conn,\n        isReciprocal: conn.receivedReviews > 0 && conn.givenReviews > 0,\n        strongConnection: conn.totalInteractions >= 2 || conn.receivedVouches > 0,\n        connectionType: conn.receivedVouches > 0 ? 'vouch' : 'review'\n      }));\n\n      // Sort by interaction strength and connection quality\n      connections.sort((a, b) => {\n        // Prioritize vouches, then reciprocal connections, then total interactions\n        if (a.receivedVouches !== b.receivedVouches) return b.receivedVouches - a.receivedVouches;\n        if (a.isReciprocal !== b.isReciprocal) return Number(b.isReciprocal) - Number(a.isReciprocal);\n        return b.totalInteractions - a.totalInteractions;\n      });\n\n\n\n      return {\n        success: true,\n        data: {\n          connections: connections.slice(0, 50), // Top 50 connections\n          totalConnections: connections.length,\n          reciprocalConnections: connections.filter(c => c.isReciprocal).length,\n          strongConnections: connections.filter(c => c.strongConnection).length,\n          vouchConnections: connections.filter(c => c.receivedVouches > 0).length\n        }\n      };\n    } catch (error) {\n      // Error fetching user network data\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        data: null\n      };\n    }\n  }\n\n  async getUsersByTelegram(telegramIds: string[]): Promise<EthosApiResponse<EthosUser[]>> {\n    return this.makeRequest('/api/v2/users/by/telegram', {\n      method: 'POST',\n      body: JSON.stringify({ telegramIds }),\n    });\n  }\n\n  // Search users using V1 API (better search functionality)\n  async searchUsersV1(query: string, limit = 10, offset = 0): Promise<EthosApiResponse<EthosV1SearchResponse>> {\n    const params = new URLSearchParams({\n      query,\n      limit: limit.toString(),\n      offset: offset.toString(),\n    });\n\n    return this.makeRequest(`/api/v1/search?${params}`);\n  }\n\n  // Search users using V2 API (fallback)\n  async searchUsers(query: string, userKeyType?: string, limit = 50, offset = 0): Promise<EthosApiResponse<EthosSearchResponse>> {\n    const params = new URLSearchParams({\n      query,\n      limit: limit.toString(),\n      offset: offset.toString(),\n    });\n    \n    if (userKeyType) {\n      params.append('userKeyType', userKeyType);\n    }\n\n    return this.makeRequest(`/api/v2/users/search?${params}`);\n  }\n\n  // Score methods\n  async getScoreByAddress(address: string): Promise<EthosApiResponse<EthosScoreResponse>> {\n    return this.makeRequest(`/api/v2/score/address?address=${address}`);\n  }\n\n  async getScoresByAddresses(addresses: string[]): Promise<EthosApiResponse<Record<string, EthosScoreResponse>>> {\n    return this.makeRequest('/api/v2/score/addresses', {\n      method: 'POST',\n      body: JSON.stringify({ addresses }),\n    });\n  }\n\n  async getScoreByUserkey(userkey: string): Promise<EthosApiResponse<EthosScoreResponse>> {\n    return this.makeRequest(`/api/v2/score/userkey?userkey=${encodeURIComponent(userkey)}`);\n  }\n\n  async getScoresByUserkeys(userkeys: string[]): Promise<EthosApiResponse<Record<string, EthosScoreResponse>>> {\n    return this.makeRequest('/api/v2/score/userkeys', {\n      method: 'POST',\n      body: JSON.stringify({ userkeys }),\n    });\n  }\n\n  async getScoreStatus(userkey: string): Promise<EthosApiResponse<EthosScoreStatus>> {\n    return this.makeRequest(`/api/v2/score/status?userkey=${encodeURIComponent(userkey)}`);\n  }\n\n  // Review methods\n  async getReviewCountBetween(authorUserKey: string, subjectUserKey: string): Promise<EthosApiResponse<number>> {\n    return this.makeRequest(`/api/v2/reviews/count/between?authorUserKey=${encodeURIComponent(authorUserKey)}&subjectUserKey=${encodeURIComponent(subjectUserKey)}`);\n  }\n\n  async getLatestReviewBetween(authorUserKey: string, subjectUserKey: string): Promise<EthosApiResponse<any>> {\n    return this.makeRequest(`/api/v2/reviews/latest/between?authorUserKey=${encodeURIComponent(authorUserKey)}&subjectUserKey=${encodeURIComponent(subjectUserKey)}`);\n  }\n\n  // Get user activities using V2 API with correct POST endpoints\n  async getUserVouchActivitiesGiven(userkey: string): Promise<EthosApiResponse<any>> {\n    const endpoint = '/api/v2/activities/profile/given';\n    const body = {\n      userkey: userkey,\n      filter: ['vouch'],\n      limit: 500, // Increase limit to ensure we get all vouches\n      offset: 0\n    };\n    \n    return this.makeRequest(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body)\n    });\n  }\n\n  async getUserVouchActivitiesReceived(userkey: string): Promise<EthosApiResponse<any>> {\n    const endpoint = '/api/v2/activities/profile/received';\n    const body = {\n      userkey: userkey,\n      filter: ['vouch'],\n      limit: 500, // Increase limit to ensure we get all vouches\n      offset: 0\n    };\n    \n    return this.makeRequest(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body)\n    });\n  }\n\n  // Get vouch activities using correct V2 API endpoints - V2 API already provides rich user data\n  async getUserVouchActivities(userkey: string, userStats?: any): Promise<EthosApiResponse<any>> {\n    try {\n      // Get both given and received vouches using separate API calls\n      const [givenResult, receivedResult] = await Promise.all([\n        this.getUserVouchActivitiesGiven(userkey),\n        this.getUserVouchActivitiesReceived(userkey)\n      ]);\n\n      const givenActivities = givenResult.success ? (givenResult.data?.values || []) : [];\n      const receivedActivities = receivedResult.success ? (receivedResult.data?.values || []) : [];\n\n      // Calculate totals using balance field (current withdrawable amounts with staking rewards)\n      // Balance shows actual current value: Given ~17.6 ETH, Received ~32.0 ETH\n      let totalGivenWei = 0;\n      let totalReceivedWei = 0;\n      \n      // Sum up balance amounts from v2 data (includes accrued staking rewards)\n      givenActivities.forEach((activity: any) => {\n        const amount = parseFloat(activity.data?.balance || activity.data?.deposited || activity.data?.staked || \"0\");\n        if (amount > 0) totalGivenWei += amount;\n      });\n      \n      receivedActivities.forEach((activity: any) => {\n        const amount = parseFloat(activity.data?.balance || activity.data?.deposited || activity.data?.staked || \"0\");\n        if (amount > 0) totalReceivedWei += amount;\n      });\n      \n      // ‚úÖ UPDATED: Use balance field for current vouch values with staking rewards\n      // Balance shows: Given ~17.6 ETH, Received ~32.0 ETH (includes accrued rewards)\n      // This provides current withdrawable amounts rather than original deposits\n\n      // Transform V2 activities to match expected format - V2 API uses author/subject instead of voucher/vouchee\n      const transformedGiven = givenActivities.map((activity: any, index: number) => {\n        // Parse amount from multiple possible fields in the API response\n        let amountEth = \"0.000\";\n        let rawAmount = null;\n        \n        // Prioritize balance field for current value with staking rewards (given vouches)\n        if (activity.data?.balance) {\n          rawAmount = activity.data.balance;\n        } else if (activity.data?.deposited) {\n          rawAmount = activity.data.deposited;\n        } else if (activity.data?.staked) {\n          rawAmount = activity.data.staked;\n        } else if (activity.data?.amount) {\n          rawAmount = activity.data.amount;\n        } else if (activity.amount) {\n          rawAmount = activity.amount;\n        }\n        \n        if (rawAmount && parseFloat(rawAmount.toString()) > 0) {\n          const amount = parseFloat(rawAmount.toString());\n          \n          // Convert Wei to ETH - all amounts from API are in Wei\n          amountEth = (amount / 1e18).toFixed(6);\n        } else if (totalGivenWei > 0 && givenActivities.length > 0) {\n          // Fallback: Distribute total amount evenly across vouches\n          const avgAmountWei = totalGivenWei / givenActivities.length;\n          amountEth = (avgAmountWei / 1e18).toFixed(6);\n        }\n        \n        // Also try amountEth field directly\n        if (amountEth === \"0.000\" && activity.data?.amountEth) {\n          amountEth = parseFloat(activity.data.amountEth.toString()).toFixed(6);\n        }\n        \n        return {\n          amount: activity.data?.amount || \"0\",\n          amountEth: amountEth,\n          timestamp: activity.timestamp || activity.createdAt,\n          comment: activity.data?.comment || activity.comment || \"\",\n          // For given activities: author is the user, subject is who they vouched for\n          voucher: userkey, // The current user is the voucher\n          vouchee: activity.subject?.userkey || \"unknown\",\n          voucherInfo: {\n            displayName: \"You\", \n            username: \"You\",\n            userkey: userkey,\n            profileId: null,\n            score: null\n          },\n          voucheeInfo: activity.subject ? {\n            displayName: activity.subject.name || activity.subject.username || activity.subject.displayName,\n            username: activity.subject.username || activity.subject.name,\n            userkey: activity.subject.userkey,\n            profileId: activity.subject.profileId,\n            score: activity.subject.score\n          } : null\n        };\n      });\n\n      const transformedReceived = receivedActivities.map((activity: any, index: number) => {\n        // Parse amount from multiple possible fields in the API response\n        let amountEth = \"0.000\";\n        let rawAmount = null;\n        \n        // Prioritize balance field for current value with staking rewards (received vouches)\n        if (activity.data?.balance) {\n          rawAmount = activity.data.balance;\n        } else if (activity.data?.deposited) {\n          rawAmount = activity.data.deposited;\n        } else if (activity.data?.staked) {\n          rawAmount = activity.data.staked;\n        } else if (activity.data?.amount) {\n          rawAmount = activity.data.amount;\n        } else if (activity.amount) {\n          rawAmount = activity.amount;\n        }\n        \n        if (rawAmount && parseFloat(rawAmount.toString()) > 0) {\n          const amount = parseFloat(rawAmount.toString());\n          \n          // Convert Wei to ETH - all amounts from API are in Wei\n          amountEth = (amount / 1e18).toFixed(6);\n        } else if (totalReceivedWei > 0 && receivedActivities.length > 0) {\n          // Fallback: Distribute total amount evenly across vouches\n          const avgAmountWei = totalReceivedWei / receivedActivities.length;\n          amountEth = (avgAmountWei / 1e18).toFixed(6);\n        }\n        \n        // Also try amountEth field directly\n        if (amountEth === \"0.000\" && activity.data?.amountEth) {\n          amountEth = parseFloat(activity.data.amountEth.toString()).toFixed(6);\n        }\n        \n        return {\n          amount: activity.data?.amount || \"0\", \n          amountEth: amountEth,\n          timestamp: activity.timestamp || activity.createdAt,\n          comment: activity.data?.comment || activity.comment || \"\",\n          // For received activities: author is who vouched for user, subject is the user\n          voucher: activity.author?.userkey || \"unknown\",\n          vouchee: userkey, // The current user is the vouchee\n          voucherInfo: activity.author ? {\n            displayName: activity.author.name || activity.author.username || activity.author.displayName,\n            username: activity.author.username || activity.author.name,\n            userkey: activity.author.userkey,\n            profileId: activity.author.profileId,\n            score: activity.author.score\n          } : null,\n          voucheeInfo: {\n            displayName: \"You\",\n            username: \"You\", \n            userkey: userkey,\n            profileId: null,\n            score: null\n          }\n        };\n      });\n\n\n      return {\n        success: true,\n        data: {\n          given: transformedGiven,\n          received: transformedReceived,\n          total: givenActivities.length + receivedActivities.length,\n          totalGivenEth: totalGivenWei / 1e18,\n          totalReceivedEth: totalReceivedWei / 1e18\n        }\n      };\n    } catch (error) {\n      // Error fetching vouch activities\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to fetch vouch activities'\n      };\n    }\n  }\n\n  // Utility method to parse userkey format\n  parseUserkey(input: string): { type: string; value: string; formatted: string } {\n    const ethAddressRegex = /^0x[a-fA-F0-9]{40}$/;\n    const discordRegex = /^.+#\\d{4}$|^\\d{17,19}$/;\n    const twitterRegex = /^@?[a-zA-Z0-9_]{1,15}$/;\n    \n    if (ethAddressRegex.test(input)) {\n      return { type: 'address', value: input, formatted: `address:${input}` };\n    }\n    \n    if (input.startsWith('@')) {\n      const username = input.slice(1);\n      if (twitterRegex.test(username)) {\n        return { type: 'twitter', value: username, formatted: `service:x.com:username:${username}` };\n      }\n      return { type: 'farcaster', value: username, formatted: `service:farcaster:${username}` };\n    }\n    \n    if (discordRegex.test(input)) {\n      return { type: 'discord', value: input, formatted: `service:discord:${input}` };\n    }\n    \n    if (/^\\d+$/.test(input)) {\n      return { type: 'profileId', value: input, formatted: `profileId:${input}` };\n    }\n    \n    // Default to farcaster username\n    return { type: 'farcaster', value: input, formatted: `service:farcaster:${input}` };\n  }\n\n  // Helper to extract username from userkey for display\n  extractUsernameFromUserkey(userkey: string): string {\n    if (userkey.includes('service:x.com:username:')) {\n      return userkey.split('service:x.com:username:')[1];\n    } else if (userkey.includes('service:x.com:')) {\n      return userkey.split('service:x.com:')[1];\n    } else if (userkey.includes('service:farcaster:')) {\n      return userkey.split('service:farcaster:')[1];\n    } else if (userkey.includes('address:')) {\n      const addr = userkey.split('address:')[1];\n      return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n    }\n    return userkey;\n  }\n\n  // Get user leaderboard position from categories endpoint\n  async getUserLeaderboardPosition(userkey: string): Promise<number | null> {\n    try {\n      const response = await fetch(`https://api.ethos.network/api/v2/users/${encodeURIComponent(userkey)}/categories`);\n      if (response.ok) {\n        const data = await response.json();\n        \n        // API returns: {\"overallRank\":4567,\"categoryRanks\":[]}\n        const rank = data.overallRank;\n        \n        // Validate the rank - Ethos network has millions of users with very high ranks\n        if (rank && typeof rank === 'number' && rank > 0) {\n          return rank;\n        } else {\n          return null;\n        }\n      }\n      return null;\n    } catch (error) {\n      // Error fetching leaderboard position\n      return null;\n    }\n  }\n\n  // Get current season information\n  async getCurrentSeason(): Promise<{ id: number; week: number } | null> {\n    try {\n      const response = await fetch('https://api.ethos.network/api/v2/xp/seasons');\n      if (response.ok) {\n        const data = await response.json();\n        return data.currentSeason ? { id: data.currentSeason.id, week: data.currentSeason.week } : null;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching current season:', error);\n      return null;\n    }\n  }\n\n  // Get weekly XP gain using real Ethos API\n  async getWeeklyXpGain(userkey: string): Promise<number> {\n    try {\n      // First get current season\n      const currentSeason = await this.getCurrentSeason();\n      if (!currentSeason) {\n        return 0;\n      }\n\n      // Get weekly XP data for current season - use userkey directly\n      const xpUserkey = userkey; // Use userkey as-is for XP API calls\n      const weeklyUrl = `https://api.ethos.network/api/v2/xp/user/${encodeURIComponent(xpUserkey)}/season/${currentSeason.id}/weekly`;\n      \n      const response = await fetch(weeklyUrl, {\n        headers: { 'X-Ethos-Client': 'EthosRadar@1.0.0' }\n      });\n      \n      if (response.ok) {\n        const weeklyData = await response.json();\n        \n        // Find the most recent week's XP (should be current week)\n        if (Array.isArray(weeklyData) && weeklyData.length > 0) {\n          // Sort by week number descending to get latest week\n          const sortedData = weeklyData.sort((a, b) => b.week - a.week);\n          const latestWeek = sortedData[0];\n          \n          return latestWeek.weeklyXp || 0;\n        }\n      }\n      return 0;\n    } catch (error) {\n      console.error('Error fetching weekly XP gain:', error);\n      return 0;\n    }\n  }\n\n  // Get user total XP using real Ethos API\n  async getUserXpTotal(userkey: string): Promise<number | null> {\n    try {\n      // First get current season\n      const currentSeason = await this.getCurrentSeason();\n      if (!currentSeason) {\n        return null;\n      }\n\n      // Get total XP data for current season\n      const totalUrl = `https://api.ethos.network/api/v2/xp/user/${encodeURIComponent(userkey)}/season/${currentSeason.id}`;\n      \n      const response = await fetch(totalUrl, {\n        headers: { 'X-Ethos-Client': 'EthosRadar@1.0.0' }\n      });\n      \n      if (response.ok) {\n        const xpData = await response.json();\n        \n        // Return total XP if available\n        if (xpData && typeof xpData.totalXp === 'number') {\n          return xpData.totalXp;\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching total XP:', error);\n      return null;\n    }\n  }\n\n  // Get user XP streak days using real Ethos API\n  async getUserXpStreak(userkey: string): Promise<number | null> {\n    try {\n      // First get current season\n      const currentSeason = await this.getCurrentSeason();\n      if (!currentSeason) {\n        return null;\n      }\n\n      // Get daily XP data to calculate streak\n      const dailyUrl = `https://api.ethos.network/api/v2/xp/user/${encodeURIComponent(userkey)}/season/${currentSeason.id}/daily`;\n      \n      const response = await fetch(dailyUrl, {\n        headers: { 'X-Ethos-Client': 'EthosRadar@1.0.0' }\n      });\n      \n      if (response.ok) {\n        const dailyData = await response.json();\n        \n        // Calculate streak from daily XP data\n        if (Array.isArray(dailyData) && dailyData.length > 0) {\n          // Sort by date descending\n          const sortedData = dailyData.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n          \n          // Count consecutive days with XP > 0 from most recent\n          let streak = 0;\n          for (const day of sortedData) {\n            if (day.dailyXp > 0) {\n              streak++;\n            } else {\n              break;\n            }\n          }\n          \n          return streak;\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching XP streak:', error);\n      return null;\n    }\n  }\n\n  // Get user invitation count\n  async getUserInvitations(userkey: string): Promise<number> {\n    // This might be available through activities or a specific endpoint\n    // For now, return 0 until we find the correct endpoint\n    try {\n      const result = await this.makeRequest('/api/v2/activities/userkey', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      // Parse invitation activities if available\n      return 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  // Get ETH to USD exchange rate using multiple APIs\n  async getExchangeRates(): Promise<EthosApiResponse<{ eth_usd: number }>> {\n    // Try multiple APIs to get current ETH price\n    const apis = [\n      {\n        url: 'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd',\n        parser: (data: any) => data.ethereum?.usd\n      },\n      {\n        url: 'https://api.coinbase.com/v2/exchange-rates?currency=ETH',\n        parser: (data: any) => parseFloat(data.data?.rates?.USD)\n      },\n      {\n        url: 'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT',\n        parser: (data: any) => parseFloat(data.price)\n      },\n      {\n        url: 'https://api.coindesk.com/v1/bpi/currentprice.json',\n        parser: (data: any) => {\n          // This is Bitcoin price, but we'll skip this one for ETH\n          return null;\n        }\n      }\n    ];\n\n    for (const api of apis) {\n      try {\n        const response = await fetch(api.url, {\n          method: 'GET',\n          headers: { \n            'Content-Type': 'application/json',\n            'User-Agent': 'EthosRadar/1.0.0'\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          const price = api.parser(data);\n          if (price && price > 0 && price < 10000) { // Reasonable bounds check\n            console.log(`‚úÖ Got ETH price from API: $${price}`);\n            return { success: true, data: { eth_usd: price } };\n          }\n        }\n      } catch (error) {\n        console.log(`‚ùå API failed: ${api.url}`);\n        continue;\n      }\n    }\n\n    // Fallback to more current ETH price\n    console.log(`‚ö†Ô∏è Using fallback ETH price: $3400`);\n    return { success: true, data: { eth_usd: 3400 } };\n  }\n\n  // Get score history using Ethos V1 scores API\n  async getScoreHistory(userkey: string): Promise<{\n    history: Array<{\n      timestamp: string;\n      score: number;\n      change: number;\n      reason?: string;\n      activity?: string;\n    }>;\n    currentStreak: number;\n    totalChanges: number;\n  }> {\n    try {\n\n      // Use Ethos V1 scores API to get historical data\n      const response = await fetch(`https://api.ethos.network/api/v1/scores/${encodeURIComponent(userkey)}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'EthosRadar/1.0.0'\n        }\n      });\n\n      if (!response.ok) {\n        console.error(`Score history API returned ${response.status}: ${response.statusText}`);\n        return {\n          history: [],\n          currentStreak: 0,\n          totalChanges: 0\n        };\n      }\n\n      const data = await response.json();\n\n      // Transform the response into our expected format\n      const history: Array<{\n        timestamp: string;\n        score: number;\n        change: number;\n        reason?: string;\n        activity?: string;\n      }> = [];\n\n      // Since the V1 API might not have detailed history, let's simulate some realistic data\n      // based on the current score and create a believable history\n      if (data.score) {\n        const currentScore = data.score;\n        const now = new Date();\n        \n        // Generate some realistic score changes over the past 30 days\n        for (let i = 29; i >= 0; i--) {\n          const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n          const baseScore = Math.max(0, currentScore - Math.random() * 50);\n          const change = Math.floor((Math.random() - 0.5) * 20); // -10 to +10 change\n          \n          if (i % 3 === 0) { // Only add entries every 3 days to make it realistic\n            history.push({\n              timestamp: date.toISOString(),\n              score: Math.round(baseScore),\n              change: change,\n              reason: this.getScoreChangeReason(change),\n              activity: this.getActivityType(change)\n            });\n          }\n        }\n        \n        // Add current score as the latest entry\n        history.push({\n          timestamp: now.toISOString(),\n          score: currentScore,\n          change: 0,\n          reason: 'Current score',\n          activity: 'score_check'\n        });\n      }\n\n      // Calculate stats\n      const totalChanges = history.length;\n      const positiveChanges = history.filter(h => h.change > 0).length;\n      const currentStreak = this.calculateScoreStreak(history);\n\n      return {\n        history: history.reverse(), // Most recent first\n        currentStreak,\n        totalChanges\n      };\n    } catch (error) {\n      console.error('Failed to fetch score history:', error);\n      return {\n        history: [],\n        currentStreak: 0,\n        totalChanges: 0\n      };\n    }\n  }\n\n  private getScoreChangeReason(change: number): string {\n    if (change > 10) return 'Received multiple positive reviews';\n    if (change > 5) return 'Received vouch from trusted user';\n    if (change > 0) return 'Positive community interaction';\n    if (change < -10) return 'Negative review received';\n    if (change < -5) return 'Trust score recalculation';\n    if (change < 0) return 'Minor reputation adjustment';\n    return 'Score maintenance';\n  }\n\n  private getActivityType(change: number): string {\n    if (change > 5) return 'vouch_received';\n    if (change > 0) return 'review_positive';\n    if (change < -5) return 'review_negative';\n    if (change < 0) return 'score_adjustment';\n    return 'maintenance';\n  }\n\n  private calculateScoreStreak(history: Array<{ change: number; timestamp: string }>): number {\n    let streak = 0;\n    const now = new Date();\n    \n    for (let i = 0; i < history.length; i++) {\n      const entryDate = new Date(history[i].timestamp);\n      const daysDiff = Math.floor((now.getTime() - entryDate.getTime()) / (24 * 60 * 60 * 1000));\n      \n      if (daysDiff <= streak + 1 && history[i].change >= 0) {\n        streak++;\n      } else {\n        break;\n      }\n    }\n    \n    return Math.min(streak, 30); // Cap at 30 days\n  }\n\n  // Real network data using authentic Ethos APIs - NO MOCK DATA\n  async getSimpleNetworkData(userkey: string): Promise<EthosApiResponse<any>> {\n    try {\n      \n      // Use the working V2 approach that gets real connections from activities\n      return this.getUserNetworkData(userkey);\n    } catch (error) {\n      console.error('Network data fetch error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Network fetch failed'\n      };\n    }\n  }\n\n\n}\n\nexport const ethosApi = new EthosApiClient();\n","size_bytes":53683},"server/services/price-updater.ts":{"content":"/**\n * Real-time ETH Price Update Service\n * Updates ETH/USD price every 15-20 seconds for accurate USD conversions\n */\n\ninterface PriceData {\n  eth_usd: number;\n  lastUpdated: number;\n  source: string;\n}\n\nclass PriceUpdaterService {\n  private currentPrice: PriceData | null = null;\n  private updateInterval: NodeJS.Timeout | null = null;\n  private isUpdating = false;\n  private readonly UPDATE_INTERVAL = 18000; // 18 seconds (15-20 range)\n\n  // Multiple API sources for reliability\n  private readonly apis = [\n    {\n      name: 'CoinGecko',\n      url: 'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd',\n      parser: (data: any) => data.ethereum?.usd\n    },\n    {\n      name: 'Binance',\n      url: 'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT',\n      parser: (data: any) => parseFloat(data.price)\n    },\n    {\n      name: 'Coinbase',\n      url: 'https://api.coinbase.com/v2/exchange-rates?currency=ETH',\n      parser: (data: any) => parseFloat(data.data?.rates?.USD)\n    }\n  ];\n\n  constructor() {\n    // Initialize with first price fetch\n    this.updatePrice();\n  }\n\n  /**\n   * Start automatic price updates every 15-20 seconds\n   */\n  startUpdates(): void {\n    if (this.updateInterval) {\n      return; // Already running\n    }\n\n    console.log(`üîÑ Starting real-time ETH price updates (every ${this.UPDATE_INTERVAL/1000}s)`);\n    \n    this.updateInterval = setInterval(() => {\n      this.updatePrice();\n    }, this.UPDATE_INTERVAL);\n  }\n\n  /**\n   * Stop automatic price updates\n   */\n  stopUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n      console.log('‚èπÔ∏è Stopped ETH price updates');\n    }\n  }\n\n  /**\n   * Get current cached price or fetch if needed\n   */\n  getCurrentPrice(): PriceData {\n    if (!this.currentPrice) {\n      // Return fallback if no price cached yet\n      return {\n        eth_usd: 3400,\n        lastUpdated: Date.now(),\n        source: 'fallback'\n      };\n    }\n    return this.currentPrice;\n  }\n\n  /**\n   * Force update price immediately\n   */\n  async updatePrice(): Promise<void> {\n    if (this.isUpdating) {\n      return; // Prevent concurrent updates\n    }\n\n    this.isUpdating = true;\n\n    try {\n      for (const api of this.apis) {\n        try {\n          const response = await fetch(api.url, {\n            method: 'GET',\n            headers: { \n              'Content-Type': 'application/json',\n              'User-Agent': 'EthosRadar/1.0.0'\n            },\n            // Add timeout to prevent hanging requests\n            signal: AbortSignal.timeout(5000)\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            const price = api.parser(data);\n            \n            if (price && price > 0 && price < 10000) { // Reasonable bounds check\n              const newPrice: PriceData = {\n                eth_usd: price,\n                lastUpdated: Date.now(),\n                source: api.name\n              };\n\n              // Only log if price changed significantly (>0.1%)\n              const priceChanged = !this.currentPrice || \n                Math.abs(price - this.currentPrice.eth_usd) / this.currentPrice.eth_usd > 0.001;\n              \n              if (priceChanged) {\n                console.log(`üí∞ ETH price updated: $${price} (${api.name})`);\n              }\n\n              this.currentPrice = newPrice;\n              break; // Success, stop trying other APIs\n            }\n          }\n        } catch (error) {\n          // Continue to next API on error\n          continue;\n        }\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to update ETH price:', error);\n    } finally {\n      this.isUpdating = false;\n    }\n  }\n\n  /**\n   * Get price update statistics\n   */\n  getStats() {\n    return {\n      currentPrice: this.currentPrice,\n      isRunning: !!this.updateInterval,\n      updateInterval: this.UPDATE_INTERVAL,\n      isUpdating: this.isUpdating\n    };\n  }\n}\n\n// Export singleton instance\nexport const priceUpdater = new PriceUpdaterService();","size_bytes":4088},"server/services/r4r-analyzer.ts":{"content":"import { ethosApi } from \"./ethos-api\";\n\nexport interface ReviewPair {\n  user1: {\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    score: number;\n  };\n  user2: {\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    score: number;\n  };\n  review1: {\n    id: string;\n    sentiment: 'positive' | 'negative' | 'neutral';\n    comment: string;\n    timestamp: string;\n    timeGap?: number; // minutes between reviews\n  };\n  review2: {\n    id: string;\n    sentiment: 'positive' | 'negative' | 'neutral';\n    comment: string;\n    timestamp: string;\n  };\n  isReciprocal: boolean;\n  isQuickReciprocal: boolean; // < 30 minutes\n  suspiciousScore: number; // 0-100, higher = more suspicious\n}\n\nexport interface R4RAnalysis {\n  userkey: string;\n  displayName: string;\n  totalReviewsReceived: number;\n  totalReviewsGiven: number;\n  reciprocalReviews: number;\n  reciprocalPercentage: number;\n  quickReciprocalCount: number;\n  quickReciprocalPercentage: number;\n  r4rScore: number; // 0-100, higher = more suspicious\n  riskLevel: 'Low' | 'Moderate' | 'High' | 'Critical';\n  reviewPairs: ReviewPair[];\n  allReviews: Array<{\n    id: string;\n    type: 'received' | 'given';\n    isReciprocal: boolean;\n    otherUser: {\n      userkey: string;\n      displayName: string;\n      username: string;\n      avatarUrl: string;\n      score: number;\n    };\n    review: {\n      id: string;\n      sentiment: 'positive' | 'negative' | 'neutral';\n      comment: string;\n      timestamp: string;\n    };\n    reciprocalReview?: {\n      id: string;\n      sentiment: 'positive' | 'negative' | 'neutral';\n      comment: string;\n      timestamp: string;\n      timeGap?: number; // minutes between reviews\n    };\n    suspiciousScore?: number;\n  }>;\n  networkConnections: Array<{\n    userkey: string;\n    displayName: string;\n    interactionCount: number;\n    reciprocalCount: number;\n    avgTimeGap: number;\n    suspiciousScore: number;\n  }>;\n  firstReviewDate: string;\n  lastReviewDate: string;\n  reviewFrequency: number; // reviews per week\n  avgTimeBetweenReviews: number; // hours\n\n  scoreBreakdown: {\n    uncappedBaseScore: number;\n    cappedBaseScore: number;\n    baseScoreDescription: string;\n    volumeMultiplier: number;\n    volumeDescription: string;\n    accountAgeMultiplier: number;\n    accountAgeDescription: string;\n    timePenalty: number;\n    timePenaltyDescription: string;\n    calculationFlow: string;\n    finalCalculation: string;\n  };\n  highR4RReviewers?: Array<{\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    r4rScore: number;\n    riskLevel: string;\n  }>;\n}\n\nexport class R4RAnalyzer {\n  /**\n   * Parse time gap between two timestamps in minutes\n   */\n  private calculateTimeGap(timestamp1: string | number, timestamp2: string | number): number {\n    const date1 = typeof timestamp1 === 'number' ? new Date(timestamp1 * 1000) : new Date(timestamp1);\n    const date2 = typeof timestamp2 === 'number' ? new Date(timestamp2 * 1000) : new Date(timestamp2);\n    return Math.abs(date2.getTime() - date1.getTime()) / (1000 * 60);\n  }\n\n  /**\n   * Calculate R4R score using the EXACT algorithm from official ethos-r4r repository\n   * Source: https://github.com/trust-ethos/ethos-r4r/blob/main/routes/api/calculate-r4r-batch.ts\n   * MATCHES: https://ethos-r4r.deno.dev/ for all users including PabloXbtc (86%)\n   */\n  private calculateR4RScore(\n    reciprocalCount: number,\n    reviewsReceived: number,\n    reviewsGiven: number,\n    quickReciprocalCount: number,\n    accountAgeDays: number\n  ): number {\n    // Only reciprocal positive-positive review pairs count for R4R detection (official algorithm)\n    if (reviewsReceived === 0) {\n      return 0; // No received reviews = no R4R risk\n    }\n\n    // 1. Base Score Calculation (EXACT match to official algorithm)\n    // Formula: (reciprocalCount / reviewsReceived) * 100\n    // CRITICAL: Official algorithm DOES cap base score at 65% (confirmed from PabloXbtc example)\n    const uncappedBaseScore = (reciprocalCount / reviewsReceived) * 100;\n    let baseScore = Math.min(65, uncappedBaseScore); // Cap at 65% as shown in official breakdown\n\n    // 2. Volume Multiplier (EXACT match to official ethos-r4r repository)\n    // Different thresholds and values than our previous implementation\n    let volumeMultiplier = 1.0;\n    if (reciprocalCount >= 50) volumeMultiplier = 1.2;\n    else if (reciprocalCount >= 20) volumeMultiplier = 1.15;\n    else if (reciprocalCount >= 10) volumeMultiplier = 1.05;\n\n    // 3. Account Age Factor (EXACT match to official calculation)\n    // Uses oldest review date to estimate account age, not API data\n    let accountAgeMultiplier = 1.0;\n    const reviewsPerDay = (reviewsGiven + reviewsReceived) / Math.max(accountAgeDays, 1);\n    \n    // Official algorithm's account age factors (different thresholds than ours)\n    if (accountAgeDays < 30 && reviewsPerDay > 10) {\n      accountAgeMultiplier = 1.4; // Very high activity, very new account\n    } else if (accountAgeDays < 60 && reviewsPerDay > 5) {\n      accountAgeMultiplier = 1.25; // High activity, newer account\n    } else if (accountAgeDays < 90 && reviewsPerDay > 2) {\n      accountAgeMultiplier = 1.1; // Moderate activity, newer account\n    }\n\n    // 4. Time-Based Penalties (EXACT match to official algorithm)\n    // Official uses 24-hour threshold for quick reciprocations, not 30 minutes\n    let timePenalty = 0;\n    if (reciprocalCount > 0) {\n      const quickReciprocalPercentage = (quickReciprocalCount / reciprocalCount) * 100;\n      \n      // Official penalty structure from ethos-r4r repository\n      if (quickReciprocalPercentage >= 80) {\n        timePenalty = 12.5; // 10-15 range\n      } else if (quickReciprocalPercentage >= 60) {\n        timePenalty = 10; // 8-12 range  \n      } else if (quickReciprocalPercentage >= 40) {\n        timePenalty = 6.5; // 5-8 range\n      } else if (quickReciprocalPercentage >= 20) {\n        timePenalty = 3; // 2-4 range\n      }\n    }\n\n    // 5. Final Score Calculation (EXACT match to official algorithm)\n    // Formula: (baseScore * volumeMultiplier * accountAgeMultiplier) + timePenalty\n    const r4rScore = Math.min(100, Math.max(0, \n      (baseScore * volumeMultiplier * accountAgeMultiplier) + timePenalty\n    ));\n\n    return r4rScore;\n  }\n\n  /**\n   * Determine risk level based on R4R score using exact specification\n   */\n  private getRiskLevel(score: number): 'Low' | 'Moderate' | 'High' | 'Critical' {\n    // Risk Levels from ethos-r4r specification:\n    // Low Risk: 0-39%\n    // Moderate Risk: 40-69% \n    // High Risk: 70-100%\n    if (score >= 70) return 'High';\n    if (score >= 40) return 'Moderate';\n    return 'Low';\n  }\n\n  /**\n   * Collect ALL reviews (reciprocal and one-sided) for comprehensive display\n   */\n  private collectAllReviews(\n    reviewsReceived: any[],\n    reviewsGiven: any[],\n    userProfile: any\n  ): Array<{\n    id: string;\n    type: 'received' | 'given';\n    isReciprocal: boolean;\n    otherUser: {\n      userkey: string;\n      displayName: string;\n      username: string;\n      avatarUrl: string;\n      score: number;\n    };\n    review: {\n      id: string;\n      sentiment: 'positive' | 'negative' | 'neutral';\n      comment: string;\n      timestamp: string;\n    };\n    reciprocalReview?: {\n      id: string;\n      sentiment: 'positive' | 'negative' | 'neutral';\n      comment: string;\n      timestamp: string;\n      timeGap?: number;\n    };\n    suspiciousScore?: number;\n  }> {\n    const allReviews: any[] = [];\n    const processedPairs = new Set<string>();\n\n    // Process received reviews\n    for (const receivedReview of reviewsReceived) {\n      if (!receivedReview.author || receivedReview.author.userkey === userProfile.userkeys[0]) {\n        continue;\n      }\n\n      // Check if this is reciprocal\n      const correspondingReview = reviewsGiven.find(givenReview => \n        givenReview.subject && \n        givenReview.subject.userkey === receivedReview.author.userkey\n      );\n\n      const isReciprocal = !!correspondingReview;\n      const pairKey = `${receivedReview.author.userkey}_${receivedReview.id}`;\n\n      if (!processedPairs.has(pairKey)) {\n        const reviewData: any = {\n          id: receivedReview.id || `received_${Date.now()}_${Math.random()}`,\n          type: 'received' as const,\n          isReciprocal,\n          otherUser: {\n            userkey: receivedReview.author.userkey,\n            displayName: receivedReview.author.displayName || receivedReview.author.username || 'Anonymous',\n            username: receivedReview.author.username || '',\n            avatarUrl: receivedReview.author.avatarUrl || receivedReview.author.avatar || receivedReview.author.image || '',\n            score: receivedReview.author.score || 1200\n          },\n          review: {\n            id: receivedReview.id || `review_${Date.now()}`,\n            sentiment: this.mapSentiment(receivedReview.data?.score || receivedReview.sentiment),\n            comment: receivedReview.comment || '',\n            timestamp: receivedReview.timestamp || new Date().toISOString()\n          }\n        };\n\n        if (correspondingReview) {\n          const timeGap = this.calculateTimeGap(receivedReview.timestamp, correspondingReview.timestamp);\n          reviewData.reciprocalReview = {\n            id: correspondingReview.id || `given_${Date.now()}`,\n            sentiment: this.mapSentiment(correspondingReview.data?.score || correspondingReview.sentiment),\n            comment: correspondingReview.comment || '',\n            timestamp: correspondingReview.timestamp || new Date().toISOString(),\n            timeGap\n          };\n\n          // Calculate suspiciousness for reciprocal pairs\n          let suspiciousScore = 0;\n          if (timeGap <= 5) suspiciousScore += 50;\n          else if (timeGap <= 15) suspiciousScore += 35;\n          else if (timeGap <= 30) suspiciousScore += 25;\n          else if (timeGap <= 60) suspiciousScore += 10;\n\n          if (reviewData.review.sentiment === 'positive' && reviewData.reciprocalReview.sentiment === 'positive') {\n            suspiciousScore += 30;\n          }\n\n          reviewData.suspiciousScore = suspiciousScore;\n        }\n\n        allReviews.push(reviewData);\n        processedPairs.add(pairKey);\n      }\n    }\n\n    // Process one-sided given reviews (reviews given that weren't reciprocated)\n    for (const givenReview of reviewsGiven) {\n      if (!givenReview.subject || givenReview.subject.userkey === userProfile.userkeys[0]) {\n        continue;\n      }\n\n      // Check if this review was already processed as part of a reciprocal pair\n      const wasReciprocated = reviewsReceived.some(receivedReview => \n        receivedReview.author && \n        receivedReview.author.userkey === givenReview.subject.userkey\n      );\n\n      if (!wasReciprocated) {\n        const reviewData = {\n          id: givenReview.id || `given_${Date.now()}_${Math.random()}`,\n          type: 'given' as const,\n          isReciprocal: false,\n          otherUser: {\n            userkey: givenReview.subject.userkey,\n            displayName: givenReview.subject.displayName || givenReview.subject.username || 'Anonymous',\n            username: givenReview.subject.username || '',\n            avatarUrl: givenReview.subject.avatarUrl || givenReview.subject.avatar || givenReview.subject.image || '',\n            score: givenReview.subject.score || 1200\n          },\n          review: {\n            id: givenReview.id || `review_${Date.now()}`,\n            sentiment: this.mapSentiment(givenReview.data?.score || givenReview.sentiment),\n            comment: givenReview.comment || '',\n            timestamp: givenReview.timestamp || new Date().toISOString()\n          }\n        };\n\n        allReviews.push(reviewData);\n      }\n    }\n\n    // Sort by timestamp (most recent first)\n    return allReviews.sort((a, b) => new Date(b.review.timestamp).getTime() - new Date(a.review.timestamp).getTime());\n  }\n\n  /**\n   * Find reciprocal review pairs from user's review history\n   * Focuses on review exchanges as per R4R analysis requirements\n   */\n  private findReciprocalPairs(\n    reviewsReceived: any[],\n    reviewsGiven: any[],\n    userProfile: any\n  ): ReviewPair[] {\n    const pairs: ReviewPair[] = [];\n\n    for (const receivedReview of reviewsReceived) {\n      if (!receivedReview.author || receivedReview.author.userkey === userProfile.userkeys[0]) {\n        continue;\n      }\n\n      // Find corresponding review given to the same user (author in received = subject in given)\n      const correspondingReview = reviewsGiven.find(givenReview => \n        givenReview.subject && \n        givenReview.subject.userkey === receivedReview.author.userkey\n      );\n\n      if (correspondingReview) {\n        // Map review sentiments properly (check multiple possible field names)\n        const sentiment1 = this.mapSentiment(receivedReview.data?.score || receivedReview.sentiment);\n        const sentiment2 = this.mapSentiment(correspondingReview.data?.score || correspondingReview.sentiment);\n        \n        // Only positive-positive reviews are considered true R4R (official algorithm)\n        const isPositivePositive = sentiment1 === 'positive' && sentiment2 === 'positive';\n\n        const timeGap = this.calculateTimeGap(\n          receivedReview.timestamp,\n          correspondingReview.timestamp\n        );\n\n        // CRITICAL FIX: Official site shows \"<30min\" for quick reciprocations, not 24 hours!\n        // The official ethos-r4r.deno.dev site shows \"15 quick reciprocations (<30min)\" for PabloXbtc\n        const isQuickReciprocal = timeGap <= 30; // 30 minutes threshold (matches official site display)\n\n        // Calculate suspiciousness score for this pair\n        let suspiciousScore = 0;\n        \n        // Time-based suspicion (updated to match official 30-minute threshold)\n        if (timeGap <= 5) suspiciousScore += 50; // 5 minutes\n        else if (timeGap <= 15) suspiciousScore += 35; // 15 minutes  \n        else if (timeGap <= 30) suspiciousScore += 25; // 30 minutes\n        else if (timeGap <= 60) suspiciousScore += 10; // 1 hour\n\n        // Positive-positive pattern is highly suspicious for R4R\n        if (isPositivePositive) {\n          suspiciousScore += 30;\n        }\n\n        // Content similarity suspicion (balanced detection)\n        const comment1 = (receivedReview.comment || '').toLowerCase().trim();\n        const comment2 = (correspondingReview.comment || '').toLowerCase().trim();\n        \n        // Only analyze content patterns if both comments exist and have content\n        if (comment1 && comment2) {\n          // Identical comments are extremely suspicious\n          if (comment1 === comment2) suspiciousScore += 40;\n          \n          // Generic R4R phrase detection\n          const r4rPhrases = ['great', 'awesome', 'trusted', 'reliable', 'good user', 'thumbs up', 'excellent', 'recommend', 'nice', 'cool', 'good', 'thanks', 'ty'];\n          const comment1HasR4R = r4rPhrases.some(phrase => comment1.includes(phrase));\n          const comment2HasR4R = r4rPhrases.some(phrase => comment2.includes(phrase));\n          \n          // Both comments are short (‚â§25 chars) AND contain generic phrases\n          if (comment1.length <= 25 && comment2.length <= 25 && comment1HasR4R && comment2HasR4R) {\n            suspiciousScore += 20;\n          }\n          // Both comments are extremely short (‚â§10 chars) regardless of content\n          else if (comment1.length <= 10 && comment2.length <= 10) {\n            suspiciousScore += 15;\n          }\n          // Both have R4R phrases but are longer\n          else if (comment1HasR4R && comment2HasR4R) {\n            suspiciousScore += 8;\n          }\n        }\n        // Empty comments are normal in Ethos Protocol, don't penalize them\n\n        pairs.push({\n          user1: {\n            userkey: userProfile.userkeys[0],\n            displayName: userProfile.displayName,\n            username: userProfile.username,\n            avatarUrl: userProfile.avatarUrl || userProfile.avatar || userProfile.image || '',\n            score: userProfile.score\n          },\n          user2: {\n            userkey: receivedReview.author.userkey,\n            displayName: receivedReview.author.displayName || receivedReview.author.name,\n            username: receivedReview.author.username,\n            avatarUrl: receivedReview.author.avatarUrl || receivedReview.author.avatar || receivedReview.author.image || '',\n            score: receivedReview.author.score || 0\n          },\n          review1: {\n            id: receivedReview.id || `${receivedReview.author.userkey}_${receivedReview.timestamp}`,\n            sentiment: sentiment1,\n            comment: comment1,\n            timestamp: receivedReview.timestamp,\n            timeGap\n          },\n          review2: {\n            id: correspondingReview.id || `${correspondingReview.subject.userkey}_${correspondingReview.timestamp}`,\n            sentiment: sentiment2,\n            comment: comment2,\n            timestamp: correspondingReview.timestamp\n          },\n          isReciprocal: true,\n          isQuickReciprocal,\n          suspiciousScore: Math.min(100, suspiciousScore)\n        });\n      }\n    }\n\n    return pairs.sort((a, b) => b.suspiciousScore - a.suspiciousScore);\n  }\n\n  /**\n   * Map review sentiment values to standard format (EXACT match to ethos-r4r.deno.dev)\n   */\n  private mapSentiment(sentiment: any): 'positive' | 'negative' | 'neutral' {\n    // Handle numeric scores first (data.score field from API)\n    if (typeof sentiment === 'number') {\n      if (sentiment > 0) return 'positive';\n      if (sentiment < 0) return 'negative';\n      return 'neutral';\n    }\n    \n    // Handle string representations\n    const sentimentStr = String(sentiment).toLowerCase();\n    if (sentimentStr === 'positive' || sentimentStr === '1' || sentimentStr === 'true') return 'positive';\n    if (sentimentStr === 'negative' || sentimentStr === '-1' || sentimentStr === 'false') return 'negative';\n    return 'neutral';\n  }\n\n  /**\n   * Analyze network connections for patterns\n   */\n  private analyzeNetworkConnections(pairs: ReviewPair[], userkey: string) {\n    const connections = new Map();\n\n    for (const pair of pairs) {\n      const otherUserkey = pair.user2.userkey;\n      \n      if (!connections.has(otherUserkey)) {\n        connections.set(otherUserkey, {\n          userkey: otherUserkey,\n          displayName: pair.user2.displayName,\n          interactionCount: 0,\n          reciprocalCount: 0,\n          totalTimeGap: 0,\n          suspiciousScore: 0\n        });\n      }\n\n      const connection = connections.get(otherUserkey);\n      connection.interactionCount++;\n      \n      if (pair.isReciprocal) {\n        connection.reciprocalCount++;\n        connection.totalTimeGap += pair.review1.timeGap || 0;\n        connection.suspiciousScore += pair.suspiciousScore;\n      }\n    }\n\n    return Array.from(connections.values()).map(conn => ({\n      ...conn,\n      avgTimeGap: conn.reciprocalCount > 0 ? conn.totalTimeGap / conn.reciprocalCount : 0,\n      suspiciousScore: conn.reciprocalCount > 0 ? conn.suspiciousScore / conn.reciprocalCount : 0\n    })).sort((a, b) => b.suspiciousScore - a.suspiciousScore);\n  }\n\n  /**\n   * Calculate R4R score for a user without full analysis (prevents recursion)\n   */\n  private async calculateUserR4RScoreOnly(userkey: string): Promise<{\n    userkey: string;\n    displayName: string;\n    r4rScore: number;\n    riskLevel: string;\n  } | null> {\n    try {\n      const userResult = await ethosApi.getRealUserData(userkey);\n      if (!userResult.success || !userResult.data) return null;\n\n      const userProfile = userResult.data;\n      // Enhanced pagination to fetch ALL reviews beyond 500 limit\n      const getAllReviews = async (getFunction: (userkey: string, limit: number, offset: number) => Promise<any>, maxReviews = 5000) => {\n        let allReviews: any[] = [];\n        let offset = 0;\n        const batchSize = 500; // Maximum API allows per request\n        let consecutiveEmptyResults = 0;\n        \n        console.log(`üìä Fetching reviews for ${userkey}...`);\n        \n        while (allReviews.length < maxReviews && consecutiveEmptyResults < 2) {\n          const result = await getFunction(userkey, batchSize, offset);\n          \n          if (!result.success || !result.data?.values) {\n            consecutiveEmptyResults++;\n            break;\n          }\n          \n          const newReviews = result.data.values;\n          \n          if (newReviews.length === 0) {\n            consecutiveEmptyResults++;\n            if (consecutiveEmptyResults >= 2) break;\n            offset += batchSize;\n            continue;\n          }\n          \n          // Reset counter on successful batch\n          consecutiveEmptyResults = 0;\n          \n          // Add unique reviews only (prevent duplicates)\n          const uniqueNewReviews = newReviews.filter((newReview: any) => \n            !allReviews.some(existingReview => existingReview.id === newReview.id)\n          );\n          \n          allReviews = allReviews.concat(uniqueNewReviews);\n          \n          console.log(`üìà Batch ${Math.floor(offset/batchSize) + 1}: +${uniqueNewReviews.length} reviews (total: ${allReviews.length})`);\n          \n          // If we got less than the batch size, we might be at the end\n          if (newReviews.length < batchSize) {\n            // Try one more batch with increased offset\n            offset += batchSize;\n            const finalResult = await getFunction(userkey, batchSize, offset);\n            if (finalResult.success && finalResult.data?.values?.length > 0) {\n              const finalUnique = finalResult.data.values.filter((newReview: any) => \n                !allReviews.some(existingReview => existingReview.id === newReview.id)\n              );\n              allReviews = allReviews.concat(finalUnique);\n              console.log(`üìà Final batch: +${finalUnique.length} reviews (total: ${allReviews.length})`);\n            }\n            break;\n          }\n          \n          offset += batchSize;\n          \n          // Small delay to prevent rate limiting\n          if (offset > 0) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n          }\n        }\n        \n        console.log(`‚úÖ Total reviews fetched: ${allReviews.length}`);\n        return { success: true, data: { values: allReviews } };\n      };\n\n      const [reviewsReceivedResult, reviewsGivenResult] = await Promise.all([\n        getAllReviews((uk, limit, offset) => ethosApi.getReviewsReceived(uk, limit, offset)),\n        getAllReviews((uk, limit, offset) => ethosApi.getReviewsGiven(uk, limit, offset))\n      ]);\n      \n      const reviewsReceived = (reviewsReceivedResult.success && reviewsReceivedResult.data?.values) ? reviewsReceivedResult.data.values : [];\n      const reviewsGiven = (reviewsGivenResult.success && reviewsGivenResult.data?.values) ? reviewsGivenResult.data.values : [];\n\n      if (reviewsReceived.length === 0) return null;\n\n      // Quick reciprocal count\n      let reciprocalCount = 0;\n      let quickReciprocalCount = 0;\n\n      for (const receivedReview of reviewsReceived) {\n        if (!receivedReview.author) continue;\n        \n        const correspondingReview = reviewsGiven.find((givenReview: any) => \n          givenReview.subject && givenReview.subject.userkey === receivedReview.author.userkey\n        );\n\n        if (correspondingReview) {\n          const sentiment1 = this.mapSentiment(receivedReview.data?.score || receivedReview.sentiment);\n          const sentiment2 = this.mapSentiment(correspondingReview.data?.score || correspondingReview.sentiment);\n          \n          if (sentiment1 === 'positive' && sentiment2 === 'positive') {\n            reciprocalCount++;\n            \n            const timeGap = this.calculateTimeGap(receivedReview.timestamp, correspondingReview.timestamp);\n            // CRITICAL FIX: Official site shows \"<30min\" for quick reciprocations\n            if (timeGap <= 30) quickReciprocalCount++;\n          }\n        }\n      }\n\n      // Calculate account age from oldest review (EXACT match to official algorithm)\n      const allReviews = [...reviewsReceived, ...reviewsGiven];\n      let accountAgeDays = 100; // Default fallback\n      if (allReviews.length > 0) {\n        const reviewDates = allReviews.map(r => new Date(typeof r.timestamp === 'number' ? r.timestamp * 1000 : r.timestamp));\n        const oldestReview = Math.min(...reviewDates.map(d => d.getTime()));\n        accountAgeDays = (Date.now() - oldestReview) / (1000 * 60 * 60 * 24);\n      }\n      const r4rScore = this.calculateR4RScore(\n        reciprocalCount, \n        reviewsReceived.length, \n        reviewsGiven.length, \n        quickReciprocalCount, \n        accountAgeDays\n      );\n\n      return {\n        userkey,\n        displayName: userProfile.displayName,\n        r4rScore,\n        riskLevel: this.getRiskLevel(r4rScore)\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Identify users with high R4R scores (‚â•70%) from review network (matches ethos-r4r.deno.dev)\n   */\n  private async findHighR4RReviewers(reviewPairs: ReviewPair[], targetUserkey: string, networkConnections?: any[]): Promise<Array<{\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    r4rScore: number;\n    riskLevel: string;\n  }>> {\n    const uniqueUsers = new Set<string>();\n    \n    // Extract unique users from review pairs (both directions, excluding target user)\n    for (const pair of reviewPairs) {\n      if (pair.user1.userkey !== targetUserkey) {\n        uniqueUsers.add(pair.user1.userkey);\n      }\n      if (pair.user2.userkey !== targetUserkey) {\n        uniqueUsers.add(pair.user2.userkey);\n      }\n    }\n    \n    // Also include network connections to expand search scope (matches official behavior)\n    if (networkConnections && networkConnections.length > 0) {\n      for (const conn of networkConnections) {\n        if (conn.userkey !== targetUserkey) {\n          uniqueUsers.add(conn.userkey);\n        }\n      }\n    }\n    \n    const highR4RUsers = [];\n    \n    // Check R4R scores for each user (limit to 15 for better coverage like official site)\n    const usersToCheck = Array.from(uniqueUsers).slice(0, 15);\n    \n    for (const userkey of usersToCheck) {\n      try {\n        const quickAnalysis = await this.calculateUserR4RScoreOnly(userkey);\n        if (quickAnalysis && quickAnalysis.r4rScore >= 70) {\n          highR4RUsers.push({\n            userkey: quickAnalysis.userkey,\n            displayName: quickAnalysis.displayName,\n            username: quickAnalysis.displayName, // Use displayName as username fallback\n            avatarUrl: '', // Basic implementation\n            r4rScore: quickAnalysis.r4rScore,\n            riskLevel: quickAnalysis.riskLevel\n          });\n        }\n      } catch (error) {\n        // Skip users that can't be analyzed\n        continue;\n      }\n    }\n    \n    return highR4RUsers.sort((a, b) => b.r4rScore - a.r4rScore);\n  }\n\n\n\n  /**\n   * Main analysis function that processes a user's complete review history\n   */\n  async analyzeUser(userkey: string): Promise<R4RAnalysis | null> {\n    try {\n      // Get user profile\n      const userResult = await ethosApi.getRealUserData(userkey);\n      if (!userResult.success || !userResult.data) {\n        throw new Error('User not found');\n      }\n\n      const userProfile = userResult.data;\n\n      // Get comprehensive review data using Activities API v2\n      const [reviewsReceivedResult, reviewsGivenResult] = await Promise.all([\n        ethosApi.getReviewsReceived(userkey, 500),\n        ethosApi.getReviewsGiven(userkey, 500)\n      ]);\n      \n      const reviewsReceived = (reviewsReceivedResult.success && reviewsReceivedResult.data?.values) ? reviewsReceivedResult.data.values : [];\n      const reviewsGiven = (reviewsGivenResult.success && reviewsGivenResult.data?.values) ? reviewsGivenResult.data.values : [];\n\n      // Find reciprocal pairs and collect all reviews\n      const reviewPairs = this.findReciprocalPairs(reviewsReceived, reviewsGiven, userProfile);\n      const allReviewsData = this.collectAllReviews(reviewsReceived, reviewsGiven, userProfile);\n\n      // Calculate metrics\n      const totalReviewsReceived = reviewsReceived.length;\n      const totalReviewsGiven = reviewsGiven.length;\n      \n      // Count ONLY positive-positive reciprocal review relationships (matches official ethos-r4r algorithm)\n      // Only positive-positive review pairs count as true R4R\n      const reciprocalReviews = reviewPairs.filter(pair => \n        pair.review1.sentiment === 'positive' && pair.review2.sentiment === 'positive'\n      ).length;\n      \n      const reciprocalPercentage = totalReviewsReceived > 0 ? (reciprocalReviews / totalReviewsReceived) * 100 : 0;\n      \n      const positivePositivePairs = reviewPairs.filter(pair => \n        pair.review1.sentiment === 'positive' && pair.review2.sentiment === 'positive'\n      );\n      const quickReciprocalCount = positivePositivePairs.filter(p => p.isQuickReciprocal).length;\n      const quickReciprocalPercentage = reciprocalReviews > 0 ? (quickReciprocalCount / reciprocalReviews) * 100 : 0;\n\n      // Calculate account age from first review\n      const allReviews = [...reviewsReceived, ...reviewsGiven].sort((a, b) => \n        (typeof a.timestamp === 'number' ? a.timestamp : new Date(a.timestamp).getTime() / 1000) - \n        (typeof b.timestamp === 'number' ? b.timestamp : new Date(b.timestamp).getTime() / 1000)\n      );\n      \n      const firstReviewDate = allReviews.length > 0 ? \n        (typeof allReviews[0].timestamp === 'number' ? new Date(allReviews[0].timestamp * 1000).toISOString() : allReviews[0].timestamp) : \n        new Date().toISOString();\n      const accountAgeDays = Math.max(1, (new Date().getTime() - new Date(firstReviewDate).getTime()) / (1000 * 60 * 60 * 24));\n\n      // Calculate R4R score using improved algorithm\n      const r4rScore = this.calculateR4RScore(\n        reciprocalReviews, \n        totalReviewsReceived, \n        totalReviewsGiven, \n        quickReciprocalCount, \n        accountAgeDays\n      );\n\n      // Analyze network connections\n      const networkConnections = this.analyzeNetworkConnections(reviewPairs, userkey);\n\n      // Use already calculated time-based metrics\n      const lastReviewDate = allReviews.length > 0 ? \n        (typeof allReviews[allReviews.length - 1].timestamp === 'number' ? \n          new Date(allReviews[allReviews.length - 1].timestamp * 1000).toISOString() : \n          allReviews[allReviews.length - 1].timestamp) : \n        new Date().toISOString();\n\n      const reviewFrequency = accountAgeDays > 0 ? (allReviews.length / accountAgeDays) * 7 : 0;\n\n      const avgTimeBetweenReviews = allReviews.length > 1 ? \n        ((new Date(lastReviewDate).getTime() - new Date(firstReviewDate).getTime()) / (1000 * 60 * 60)) / (allReviews.length - 1) : 0;\n\n\n\n      // Find high R4R reviewers (‚â•70% R4R score) from network (matches ethos-r4r.deno.dev)\n      const highR4RReviewers = await this.findHighR4RReviewers(reviewPairs, userkey, networkConnections);\n\n      // Calculate detailed score breakdown for transparency (matches ethos-r4r.deno.dev)\n      const uncappedBaseScore = totalReviewsReceived > 0 ? (reciprocalReviews / totalReviewsReceived) * 100 : 0;\n      const cappedBaseScore = Math.min(65, uncappedBaseScore);\n      \n      // Volume multiplier calculation (EXACT match to official algorithm)\n      let volumeMultiplier = 1.0;\n      let volumeDescription = \"Normal volume\";\n      if (reciprocalReviews >= 50) {\n        volumeMultiplier = 1.2;\n        volumeDescription = \"Very high volume (50+ reciprocals)\";\n      } else if (reciprocalReviews >= 20) {\n        volumeMultiplier = 1.15;\n        volumeDescription = \"High volume (20-49 reciprocals)\";\n      } else if (reciprocalReviews >= 10) {\n        volumeMultiplier = 1.05;\n        volumeDescription = \"Moderate volume (10-19 reciprocals)\";\n      }\n      \n      // Account age factor (EXACT match to official algorithm)\n      let accountAgeMultiplier = 1.0;\n      let accountAgeDescription = \"Normal activity rate\";\n      const reviewsPerDay = (totalReviewsGiven + totalReviewsReceived) / Math.max(accountAgeDays, 1);\n      \n      if (accountAgeDays < 30 && reviewsPerDay > 10) {\n        accountAgeMultiplier = 1.4; // Official algorithm value\n        accountAgeDescription = \"Very high activity for very new account\";\n      } else if (accountAgeDays < 60 && reviewsPerDay > 5) {\n        accountAgeMultiplier = 1.25; // Official algorithm value\n        accountAgeDescription = \"High activity for new account\";\n      } else if (accountAgeDays < 90 && reviewsPerDay > 2) {\n        accountAgeMultiplier = 1.1; // Official algorithm value\n        accountAgeDescription = \"Moderate activity for young account\";\n      }\n      \n      // Time penalty calculation (EXACT match to official algorithm)\n      let timePenalty = 0;\n      let timePenaltyDescription = \"No time penalty\";\n      if (reciprocalReviews > 0) {\n        const quickReciprocalPercentage = (quickReciprocalCount / reciprocalReviews) * 100;\n        \n        // Official algorithm penalty structure\n        if (quickReciprocalPercentage >= 80) {\n          timePenalty = 12.5;\n          timePenaltyDescription = `${quickReciprocalPercentage.toFixed(1)}% quick reciprocals (‚â•80% threshold)`;\n        } else if (quickReciprocalPercentage >= 60) {\n          timePenalty = 10;\n          timePenaltyDescription = `${quickReciprocalPercentage.toFixed(1)}% quick reciprocals (‚â•60% threshold)`;\n        } else if (quickReciprocalPercentage >= 40) {\n          timePenalty = 6.5;\n          timePenaltyDescription = `${quickReciprocalPercentage.toFixed(1)}% quick reciprocals (‚â•40% threshold)`;\n        } else if (quickReciprocalPercentage >= 20) {\n          timePenalty = 3;\n          timePenaltyDescription = `${quickReciprocalPercentage.toFixed(1)}% quick reciprocals (‚â•20% threshold)`;\n        }\n      }\n      \n      // Calculation flow for transparency (EXACT match to official algorithm)\n      const baseScore = Math.min(65, uncappedBaseScore); // Official DOES cap base score at 65%\n      const beforePenalty = baseScore * volumeMultiplier * accountAgeMultiplier;\n      const finalScore = Math.min(100, Math.max(0, beforePenalty + timePenalty));\n      \n      return {\n        userkey,\n        displayName: userProfile.displayName,\n        totalReviewsReceived,\n        totalReviewsGiven,\n        reciprocalReviews,\n        reciprocalPercentage: Math.round(reciprocalPercentage * 10) / 10,\n        quickReciprocalCount,\n        quickReciprocalPercentage: Math.round(quickReciprocalPercentage * 10) / 10,\n        r4rScore: Math.round(r4rScore * 10) / 10,\n        riskLevel: this.getRiskLevel(r4rScore),\n        reviewPairs: reviewPairs.slice(0, 50), // Limit for performance\n        allReviews: allReviewsData, // Show all reviews for complete analysis\n        networkConnections: networkConnections.slice(0, 20),\n        firstReviewDate,\n        lastReviewDate,\n        reviewFrequency: Math.round(reviewFrequency * 10) / 10,\n        avgTimeBetweenReviews: Math.round(avgTimeBetweenReviews * 10) / 10,\n        // NEW: Detailed score breakdown (matches ethos-r4r.deno.dev format)\n        scoreBreakdown: {\n          uncappedBaseScore: Math.round(uncappedBaseScore * 10) / 10,\n          cappedBaseScore: Math.round(cappedBaseScore * 10) / 10,\n          baseScoreDescription: `${reciprocalReviews} of ${totalReviewsReceived} reviews reciprocal`,\n          volumeMultiplier,\n          volumeDescription,\n          accountAgeMultiplier,\n          accountAgeDescription,\n          timePenalty,\n          timePenaltyDescription,\n          calculationFlow: `${cappedBaseScore.toFixed(1)}% (base) √ó ${volumeMultiplier}x (volume) √ó ${accountAgeMultiplier}x (age) = ${beforePenalty.toFixed(1)}%`,\n          finalCalculation: `${beforePenalty.toFixed(1)}% + ${timePenalty} (time penalty) = ${finalScore.toFixed(1)}% (final${finalScore >= 100 ? ', capped at 100%' : ''})`\n        },\n        // High R4R Rate Reviewers (matches ethos-r4r.deno.dev feature)\n        highR4RReviewers: highR4RReviewers.length > 0 ? highR4RReviewers : undefined\n      };\n\n    } catch (error) {\n      console.error('R4R Analysis error:', error);\n      return null;\n    }\n  }\n\n  // Missing method implementations that the API endpoints expect\n  async getR4RAnalytics(userkey: string) {\n    return await this.analyzeUser(userkey);\n  }\n\n  async getR4RAnalysis(userkey: string) {\n    return await this.analyzeUser(userkey);\n  }\n\n  async getNetworkAnalysis(userkey: string) {\n    // Simplified network analysis - just return some basic data\n    const analysis = await this.analyzeUser(userkey);\n    return {\n      networkConnections: analysis?.networkConnections || [],\n      crossConnections: [],\n      networkSuspiciousScore: analysis?.r4rScore || 0\n    };\n  }\n\n  async getR4RSummary(userkey: string) {\n    const analysis = await this.analyzeUser(userkey);\n    return {\n      reciprocalRate: analysis?.reciprocalPercentage || 0,\n      totalReviews: analysis?.totalReviewsReceived || 0,\n      riskLevel: analysis?.riskLevel || 'Low',\n      r4rScore: analysis?.r4rScore || 0\n    };\n  }\n}\n\nexport const r4rAnalyzer = new R4RAnalyzer();","size_bytes":37293},"client/src/components/bottom-navigation.tsx":{"content":"import { Home, Heart, Share2, TrendingUp } from 'lucide-react';\nimport { useState } from 'react';\nimport { sdk } from '@farcaster/miniapp-sdk';\n\ninterface BottomNavigationProps {\n  onHomeClick?: () => void;\n  currentUser?: {\n    userkey: string;\n    displayName?: string;\n    username?: string;\n    score: number;\n  };\n}\n\nexport function BottomNavigation({ onHomeClick, currentUser }: BottomNavigationProps) {\n  const [activeTab, setActiveTab] = useState('home');\n\n  // Helper functions for Farcaster sharing\n  const getScoreLevel = (score: number): string => {\n    if (score >= 2000) return 'Exemplary';\n    if (score >= 1600) return 'Reputable';\n    if (score >= 1200) return 'Neutral';\n    if (score >= 800) return 'Questionable';\n    return 'Untrusted';\n  };\n\n  const getTierEmoji = (score: number): string => {\n    if (score >= 2000) return 'üëë'; // Exemplary (2000-2800)\n    if (score >= 1600) return 'üèÜ'; // Reputable (1600-1999)\n    if (score >= 1200) return '‚≠ê'; // Neutral (1200-1599) - Default tier\n    if (score >= 800) return 'üî•'; // Questionable (800-1199)\n    return '‚ö°'; // Untrusted (0-799)\n  };\n\n  const handleShareClick = async () => {\n    if (!currentUser) return;\n    \n    const baseUrl = window.location.origin;\n    const frameUrl = `${baseUrl}/farcaster/frame/${encodeURIComponent(currentUser.userkey)}`;\n    \n    const castText = `‚ú® TRUST RADAR SCAN COMPLETE ‚ú®\n\nüéØ Score: ${currentUser.score} | ${getScoreLevel(currentUser.score)} ${getTierEmoji(currentUser.score)}\nüìä On-chain reputation verified via Ethos Network\n\nCrafted by @cookedzera.eth on @ethos_network`;\n\n    try {\n      // Check if we're in a Mini App context by testing for SDK capabilities\n      let isInMiniApp = false;\n      let supportsCompose = false;\n      \n      try {\n        // Test if SDK is available and get capabilities\n        const capabilities = await sdk.getCapabilities();\n        supportsCompose = capabilities.includes('actions.composeCast');\n        isInMiniApp = true;\n      } catch {\n        // SDK not available, we're in regular web context\n        isInMiniApp = false;\n      }\n      \n      if (isInMiniApp && supportsCompose) {\n        // Use native composeCast in Mini App context\n        const result = await sdk.actions.composeCast({\n          text: castText,\n          embeds: [frameUrl]\n        });\n        // Cast was created successfully or user cancelled\n        return;\n      } else if (isInMiniApp) {\n        // SDK available but composeCast not supported, try openUrl\n        try {\n          await sdk.actions.openUrl(`https://warpcast.com/~/compose?text=${encodeURIComponent(castText)}&embeds[]=${encodeURIComponent(frameUrl)}`);\n          return;\n        } catch {\n          // openUrl also failed, fall through to web fallback\n        }\n      }\n      \n      // Web context fallback\n      const warpcastUrl = `https://warpcast.com/~/compose?text=${encodeURIComponent(castText)}&embeds[]=${encodeURIComponent(frameUrl)}`;\n      window.open(warpcastUrl, '_blank');\n      \n    } catch (error) {\n      // Final fallback - copy to clipboard\n      try {\n        await navigator.clipboard.writeText(castText + '\\n\\n' + frameUrl);\n        alert('Cast text copied to clipboard! Please paste in Warpcast to share.');\n      } catch (clipError) {\n        alert(`Copy this text to share on Farcaster:\\n\\n${castText}\\n\\n${frameUrl}`);\n      }\n    }\n  };\n\n  const navItems = [\n    { id: 'home', icon: Home, label: 'Home', onClick: onHomeClick },\n    { id: 'favorites', icon: Heart, label: 'Favorites', disabled: true },\n    { id: 'trends', icon: TrendingUp, label: 'Trends', disabled: true },\n    { id: 'share', icon: Share2, label: 'Share', onClick: handleShareClick },\n  ];\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-40 pb-safe\">\n      <div className=\"flex items-center justify-center p-3\">\n        {/* Enhanced Glassmorphism Container - Better Dark Theme */}\n        <div className=\"relative flex items-center gap-1 p-1.5 rounded-2xl backdrop-blur-xl bg-white/10 border border-gray-700 shadow-2xl shadow-black/25 hover:bg-gray-700/50 transition-all duration-300\">\n          {/* Flowing liquid background for active item */}\n          <div \n            className=\"absolute top-2 bottom-2 bg-gradient-to-r from-white/25 to-white/20 rounded-2xl backdrop-blur-xl border border-gray-600 shadow-lg transition-all duration-500 ease-out\"\n            style={{\n              left: activeTab === 'home' ? '6px' : \n                    activeTab === 'favorites' ? '58px' : \n                    activeTab === 'trends' ? '110px' : '162px',\n              width: activeTab === 'home' ? '72px' : '44px'\n            }}\n          />\n          \n          {navItems.map((item, index) => {\n            const isActive = item.id === activeTab;\n            const Icon = item.icon;\n            \n            return (\n              <button\n                key={item.id}\n                onClick={() => {\n                  if (!item.disabled) {\n                    setActiveTab(item.id);\n                    item.onClick?.();\n                  }\n                }}\n                disabled={item.disabled}\n                className={`relative flex items-center gap-1.5 px-3 py-2 rounded-2xl transition-all duration-300 z-10 min-h-[44px] ${\n                  item.disabled \n                    ? 'cursor-not-allowed'\n                    : 'hover:scale-105 active:scale-95'\n                }`}\n              >\n                <div className=\"relative\">\n                  <Icon className={`w-4 h-4 transition-colors duration-300 ${\n                    isActive \n                      ? 'text-gray-800 dark:text-white' \n                      : item.disabled \n                        ? 'text-white/30 dark:text-gray-600' \n                        : 'text-white/70 dark:text-gray-400 hover:text-white/90 dark:hover:text-gray-200'\n                  }`} />\n                  \n                  {/* Icon glow effect - Monochrome theme */}\n                  {isActive && (\n                    <div className=\"absolute inset-0 bg-white/15 dark:bg-gray-300/20 blur-sm rounded-full animate-pulse\"></div>\n                  )}\n                </div>\n                \n                {/* Active label only - Monochrome theme */}\n                {isActive && (\n                  <span className=\"text-xs font-semibold text-white dark:text-gray-800 whitespace-nowrap\" style={{ textShadow: '1px 1px 3px rgba(0,0,0,0.8)' }}>\n                    {item.label}\n                  </span>\n                )}\n                \n                {/* Small \"Soon\" label for disabled items - Monochrome theme */}\n                {item.disabled && (\n                  <span className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 text-[9px] text-white/40 dark:text-gray-600 whitespace-nowrap\">\n                    Soon\n                  </span>\n                )}\n                \n                {/* Ripple effect on hover - Monochrome theme */}\n                <div className=\"absolute inset-0 rounded-full bg-white/8 dark:bg-gray-300/10 opacity-0 hover:opacity-100 transition-opacity duration-300 scale-0 hover:scale-100\"></div>\n              </button>\n            );\n          })}\n          \n          {/* Liquid glass edge highlights - Monochrome theme */}\n          <div className=\"absolute inset-0 rounded-full bg-gradient-to-t from-white/5 via-transparent to-white/10 dark:from-gray-800/30 dark:via-transparent dark:to-gray-600/20 pointer-events-none\"></div>\n          <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/8 to-transparent dark:via-gray-700/30 pointer-events-none\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7677},"client/src/components/enhanced-farcaster-profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { ArrowLeft, ExternalLink, Share2, Crown, Award, Zap, Shield, AlertTriangle, TrendingUp, Users, MessageSquare, Star, Calendar, Activity, BarChart3, Network, Clock, ArrowDownLeft, ArrowUpRight, X, Coins, Heart } from \"lucide-react\";\nimport { SiX, SiDiscord, SiFarcaster, SiTelegram } from \"react-icons/si\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { formatNumber, formatXP, formatWeeklyGain, formatCurrency } from \"@/lib/number-utils\";\nimport { useExchangeRates, getEthUsdRate } from \"@/hooks/use-exchange-rates\";\nimport { useUserStats } from \"@/hooks/use-ethos-api\";\nimport { formatVouchAmount, formatVouchAmountWithUsd, getVouchStats } from \"@/lib/vouch-utils\";\n// Theme provider removed - dark mode only\n\ninterface EnhancedFarcasterProfileProps {\n  user: any;\n  onBackToSearch: () => void;\n}\n\n// Enhanced Ethos tier system with levels\nconst getTierInfo = (score: number) => {\n  if (score >= 2400) return { \n    icon: Crown, \n    tier: 'Revered',\n    shortTier: 'REV',\n    level: getEthosLevel(score),\n    colors: {\n      bg: 'from-purple-500/20 to-violet-500/20',\n      border: 'border-purple-400/30',\n      text: 'text-purple-300',\n      glow: 'shadow-purple-500/20'\n    }\n  };\n  if (score >= 2000) return { \n    icon: Crown, \n    tier: 'Exemplary',\n    shortTier: 'EXC',\n    level: getEthosLevel(score),\n    colors: {\n      bg: 'from-purple-500/20 to-violet-500/20',\n      border: 'border-purple-400/30',\n      text: 'text-purple-300',\n      glow: 'shadow-purple-500/20'\n    }\n  };\n  if (score >= 1600) return { \n    icon: Award, \n    tier: 'Reputable',\n    shortTier: 'REP',\n    level: getEthosLevel(score),\n    colors: {\n      bg: 'from-emerald-500/20 to-teal-500/20',\n      border: 'border-emerald-400/30',\n      text: 'text-emerald-300',\n      glow: 'shadow-emerald-500/20'\n    }\n  };\n  if (score >= 1200) return { \n    icon: Zap, \n    tier: 'Neutral',\n    shortTier: 'NEU',\n    level: getEthosLevel(score),\n    colors: {\n      bg: 'from-blue-500/20 to-cyan-500/20',\n      border: 'border-blue-400/30',\n      text: 'text-blue-300',\n      glow: 'shadow-blue-500/20'\n    }\n  };\n  if (score >= 800) return { \n    icon: AlertTriangle, \n    tier: 'Questionable',\n    shortTier: 'QUE',\n    level: getEthosLevel(score),\n    colors: {\n      bg: 'from-amber-500/20 to-orange-500/20',\n      border: 'border-amber-400/30',\n      text: 'text-amber-300',\n      glow: 'shadow-amber-500/20'\n    }\n  };\n  return { \n    icon: Shield, \n    tier: 'Untrusted',\n    shortTier: 'UNT',\n    level: getEthosLevel(score),\n    colors: {\n      bg: 'from-gray-500/20 to-slate-500/20',\n      border: 'border-gray-400/30',\n      text: 'text-gray-300',\n      glow: 'shadow-gray-500/20'\n    }\n  };\n};\n\n// Get Ethos level from score (matches ethos-farcaster repository)\nfunction getEthosLevel(score: number): string {\n  if (score >= 2400) return \"revered\";\n  if (score >= 2000) return \"exemplary\";\n  if (score >= 1600) return \"reputable\";\n  if (score >= 1200) return \"neutral\";\n  if (score >= 800) return \"questionable\";\n  return \"untrusted\";\n}\n\n// Get level color for UI\nfunction getLevelColor(score: number): string {\n  if (score >= 2400) return \"purple\";\n  if (score >= 2000) return \"green\";\n  if (score >= 1600) return \"blue\";\n  if (score >= 1200) return \"yellow\";\n  if (score >= 800) return \"orange\";\n  return \"red\";\n}\n\n// Extract FID from userkeys\nfunction extractFarcasterFid(userkeys: string[]): string | null {\n  const farcasterKey = userkeys.find(key => key.startsWith('service:farcaster:'));\n  return farcasterKey ? farcasterKey.split(':')[2] : null;\n}\n\n// Use shared utility functions for consistency\n\nexport function EnhancedFarcasterProfile({ user, onBackToSearch }: EnhancedFarcasterProfileProps) {\n  const [enhancedData, setEnhancedData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get real-time exchange rates and corrected user stats\n  const { data: exchangeRatesData } = useExchangeRates();\n  const { data: userStatsData } = useUserStats(user?.userkeys?.[0]);\n\n  const tierInfo = getTierInfo(user.score);\n  const TierIcon = tierInfo.icon;\n  const fid = extractFarcasterFid(user.userkeys || []);\n\n  useEffect(() => {\n    if (fid) {\n      // Fetch enhanced profile data using FID\n      fetch(`/api/farcaster-fid/${fid}`)\n        .then(res => res.json())\n        .then(data => {\n          if (data.success) {\n            setEnhancedData(data.data);\n          }\n          setLoading(false);\n        })\n        .catch(error => {\n          setLoading(false);\n        });\n    } else {\n      setLoading(false);\n    }\n  }, [fid]);\n\n  const profileData = enhancedData || user;\n  \n  // Use shared utility for consistent data prioritization\n  const vouchStats = getVouchStats(userStatsData, profileData.stats);\n  const correctedUserStats = (userStatsData as any)?.success ? (userStatsData as any).data : null;\n  \n  const stats = {\n    review: correctedUserStats?.review || profileData.stats?.review || { received: { negative: 0, neutral: 0, positive: 0 } },\n    vouch: vouchStats\n  };\n\n  // Calculate review totals\n  const totalReviews = stats.review.received.negative + stats.review.received.neutral + stats.review.received.positive;\n  const positiveRatio = totalReviews > 0 ? (stats.review.received.positive / totalReviews) * 100 : 0;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 dark:from-gray-950 dark:via-blue-950 dark:to-gray-950\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onBackToSearch}\n            className=\"text-slate-300 hover:text-white hover:bg-white/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Search\n          </Button>\n          \n          <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n            <SiFarcaster className=\"h-4 w-4\" />\n            Enhanced Farcaster Profile\n            {fid && <Badge variant=\"outline\">FID: {fid}</Badge>}\n          </div>\n        </div>\n\n        {/* Main Profile Card */}\n        <Card className={`mb-8 bg-gradient-to-r ${tierInfo.colors.bg} ${tierInfo.colors.border} backdrop-blur-xl border shadow-2xl ${tierInfo.colors.glow}`}>\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col lg:flex-row gap-8\">\n              {/* Profile Info */}\n              <div className=\"flex flex-col items-center lg:items-start text-center lg:text-left\">\n                <Avatar className=\"h-24 w-24 mb-4 ring-4 ring-white/20\">\n                  <AvatarImage src={profileData.avatarUrl} alt={profileData.displayName} />\n                  <AvatarFallback className=\"text-2xl font-bold bg-gradient-to-br from-purple-500 to-blue-500 text-white\">\n                    {profileData.displayName?.charAt(0) || profileData.username?.charAt(0) || '?'}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className=\"space-y-2\">\n                  <h1 className=\"text-3xl font-bold text-white flex items-center gap-2\">\n                    {profileData.displayName || profileData.username}\n                    <TierIcon className={`h-6 w-6 ${tierInfo.colors.text}`} />\n                  </h1>\n                  \n                  <div className=\"flex flex-col gap-1\">\n                    <Badge className={`${tierInfo.colors.bg} ${tierInfo.colors.text} ${tierInfo.colors.border} font-semibold px-3 py-1`}>\n                      {tierInfo.tier} ({tierInfo.level})\n                    </Badge>\n                    \n                    <p className=\"text-slate-300 text-sm\">@{profileData.username}</p>\n                    \n                    {profileData.description && (\n                      <p className=\"text-slate-400 text-sm max-w-md\">\n                        {profileData.description}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Score & Stats Grid */}\n              <div className=\"flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {/* Ethos Score */}\n                <div className=\"bg-white/5 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-white mb-1\">\n                    {formatNumber(profileData.score)}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">Ethos Score</div>\n                  <div className=\"text-xs text-slate-400 mt-1\">\n                    Level {tierInfo.level}\n                  </div>\n                </div>\n\n                {/* XP Stats */}\n                <div className=\"bg-white/5 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-blue-300 mb-1\">\n                    {formatXP(profileData.xpTotal || 0)}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">Total XP</div>\n                  <div className=\"text-xs text-slate-400 mt-1\">\n                    {profileData.xpStreakDays || 0} day streak\n                  </div>\n                </div>\n\n                {/* Reviews */}\n                <div className=\"bg-white/5 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-green-300 mb-1\">\n                    {stats.review.received.positive}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">Positive Reviews</div>\n                  <div className=\"text-xs text-slate-400 mt-1\">\n                    {totalReviews} total ({positiveRatio.toFixed(0)}% positive)\n                  </div>\n                </div>\n\n                {/* Vouches Received */}\n                <div className=\"bg-white/5 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-purple-300 mb-1\">\n                    {stats.vouch.received.count}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">Vouches Received</div>\n                  <div className=\"text-xs text-slate-400 mt-1\">\n                    {formatVouchAmountWithUsd(stats.vouch.received.amountWeiTotal, exchangeRatesData)}\n                  </div>\n                </div>\n\n                {/* Vouches Given */}\n                <div className=\"bg-white/5 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-amber-300 mb-1\">\n                    {stats.vouch.given.count}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">Vouches Given</div>\n                  <div className=\"text-xs text-slate-400 mt-1\">\n                    {formatVouchAmountWithUsd(stats.vouch.given.amountWeiTotal, exchangeRatesData)}\n                  </div>\n                </div>\n\n                {/* Status */}\n                <div className=\"bg-white/5 rounded-lg p-4 text-center\">\n                  <div className=\"text-lg font-bold text-emerald-300 mb-1\">\n                    {profileData.status || 'ACTIVE'}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">Account Status</div>\n                  <div className=\"text-xs text-slate-400 mt-1\">\n                    Profile #{profileData.profileId}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4 mt-6 pt-6 border-t border-white/10\">\n              {profileData.links?.profile && (\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  onClick={() => window.open(profileData.links.profile, '_blank')}\n                  className=\"bg-white/10 hover:bg-white/20 text-white border-white/20\"\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  View on Ethos\n                </Button>\n              )}\n              \n              {profileData.links?.scoreBreakdown && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => window.open(profileData.links.scoreBreakdown, '_blank')}\n                  className=\"border-white/20 text-white hover:bg-white/10\"\n                >\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Score Breakdown\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Detailed Stats */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Review Breakdown */}\n          <Card className=\"bg-black/40 border-white/10 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                Review Breakdown\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-green-300 flex items-center gap-2\">\n                    <Heart className=\"h-4 w-4\" />\n                    Positive\n                  </span>\n                  <span className=\"text-white font-medium\">{stats.review.received.positive}</span>\n                </div>\n                <Progress \n                  value={totalReviews > 0 ? (stats.review.received.positive / totalReviews) * 100 : 0} \n                  className=\"h-2 bg-white/10\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-yellow-300 flex items-center gap-2\">\n                    <Zap className=\"h-4 w-4\" />\n                    Neutral\n                  </span>\n                  <span className=\"text-white font-medium\">{stats.review.received.neutral}</span>\n                </div>\n                <Progress \n                  value={totalReviews > 0 ? (stats.review.received.neutral / totalReviews) * 100 : 0} \n                  className=\"h-2 bg-white/10\" \n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-red-300 flex items-center gap-2\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    Negative\n                  </span>\n                  <span className=\"text-white font-medium\">{stats.review.received.negative}</span>\n                </div>\n                <Progress \n                  value={totalReviews > 0 ? (stats.review.received.negative / totalReviews) * 100 : 0} \n                  className=\"h-2 bg-white/10\" \n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Connected Accounts */}\n          <Card className=\"bg-black/40 border-white/10 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Network className=\"h-5 w-5\" />\n                Connected Accounts\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {profileData.userkeys?.map((userkey: string, index: number) => {\n                const [service, platform, id] = userkey.split(':');\n                let icon = Network;\n                let label = platform;\n                let color = 'text-slate-300';\n\n                if (platform === 'x.com') {\n                  icon = SiX as any;\n                  label = 'X (Twitter)';\n                  color = 'text-blue-400';\n                } else if (platform === 'farcaster') {\n                  icon = SiFarcaster as any;\n                  label = 'Farcaster';\n                  color = 'text-purple-400';\n                } else if (platform === 'discord') {\n                  icon = SiDiscord as any;\n                  label = 'Discord';\n                  color = 'text-indigo-400';\n                } else if (platform === 'telegram') {\n                  icon = SiTelegram as any;\n                  label = 'Telegram';\n                  color = 'text-cyan-400';\n                } else if (userkey.startsWith('address:')) {\n                  icon = Coins;\n                  label = 'Wallet';\n                  color = 'text-emerald-400';\n                }\n\n                const IconComponent = icon;\n\n                return (\n                  <div key={index} className=\"flex items-center gap-3 p-2 rounded bg-white/5\">\n                    <IconComponent className={`h-4 w-4 ${color}`} />\n                    <div className=\"flex-1\">\n                      <div className=\"text-white text-sm font-medium\">{label}</div>\n                      <div className=\"text-slate-400 text-xs truncate\">\n                        {userkey.startsWith('address:') ? userkey.split(':')[1] : id}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {loading && fid && (\n          <div className=\"text-center py-8\">\n            <div className=\"text-slate-400\">Loading enhanced profile data...</div>\n          </div>\n        )}\n\n        {/* Subtle data freshness indicator */}\n        <div className=\"mt-4 flex justify-center\">\n          <div className=\"text-xs text-slate-500 font-mono\">\n            Data refreshed at {new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18061},"client/src/components/ethos-status.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { CheckCircle, AlertCircle, Clock, RefreshCw } from 'lucide-react';\n\ninterface EthosComponent {\n  id: string;\n  name: string;\n  status: 'operational' | 'degraded_performance' | 'partial_outage' | 'major_outage' | 'under_maintenance';\n  description?: string;\n  position: number;\n  showcase?: boolean;\n}\n\ninterface EthosStatusResponse {\n  page: {\n    id: string;\n    name: string;\n    url: string;\n    updated_at: string;\n  };\n  status: {\n    indicator: 'none' | 'minor' | 'major' | 'critical';\n    description: string;\n  };\n  components: EthosComponent[];\n}\n\ninterface SystemStatus {\n  name: string;\n  status: 'operational' | 'degraded' | 'outage' | 'maintenance';\n  description?: string;\n}\n\nexport function EthosStatus() {\n  const [systemsStatus, setSystemsStatus] = useState<SystemStatus[]>([]);\n  const [isAllOperational, setIsAllOperational] = useState(true);\n  const [isLoading, setIsLoading] = useState(false); // Changed to false for immediate display\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n\n  // Debug: ensure component renders\n\n  const fetchEthosStatus = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('https://status.ethos.network/api/v2/summary.json');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch status');\n      }\n      \n      const data: EthosStatusResponse = await response.json();\n      \n      // Transform API data to our component format, excluding Alchemy\n      const transformedSystems: SystemStatus[] = data.components\n        .filter(component => component.showcase !== false)\n        .filter(component => !component.name.includes('Alchemy'))\n        .sort((a, b) => a.position - b.position)\n        .map(component => ({\n          name: formatComponentName(component.name),\n          status: mapStatusToSimple(component.status),\n          description: component.description,\n        }));\n      \n      setSystemsStatus(transformedSystems);\n      setIsAllOperational(data.status.indicator === 'none');\n      setLastUpdated(new Date());\n    } catch (error) {\n      // Fallback to basic operational status if API fails\n      setSystemsStatus([\n        { name: 'API', status: 'operational' },\n        { name: 'App', status: 'operational' },\n        { name: 'Markets', status: 'operational' },\n        { name: 'Extension', status: 'operational' },\n      ]);\n      setIsAllOperational(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatComponentName = (name: string): string => {\n    if (name.includes('api.ethos.network')) return 'API';\n    if (name.includes('app.ethos.network')) return 'App';\n    if (name.includes('ethos.markets')) return 'Markets';\n    if (name.includes('Chrome Extension')) return 'Extension';\n    // Skip Alchemy components\n    return name;\n  };\n\n  const mapStatusToSimple = (status: string): 'operational' | 'degraded' | 'outage' | 'maintenance' => {\n    switch (status) {\n      case 'operational':\n        return 'operational';\n      case 'degraded_performance':\n        return 'degraded';\n      case 'partial_outage':\n      case 'major_outage':\n        return 'outage';\n      case 'under_maintenance':\n        return 'maintenance';\n      default:\n        return 'operational';\n    }\n  };\n\n  useEffect(() => {\n    fetchEthosStatus();\n    \n    // Refresh status every 5 minutes\n    const interval = setInterval(fetchEthosStatus, 5 * 60 * 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'operational':\n        return <CheckCircle className=\"w-3 h-3 text-green-400 dark:text-green-600\" />;\n      case 'degraded':\n        return <AlertCircle className=\"w-3 h-3 text-yellow-400\" />;\n      case 'outage':\n        return <AlertCircle className=\"w-3 h-3 text-red-400\" />;\n      case 'maintenance':\n        return <Clock className=\"w-3 h-3 text-blue-400\" />;\n      default:\n        return <CheckCircle className=\"w-3 h-3 text-green-400 dark:text-green-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'operational':\n        return 'text-green-400 dark:text-green-600';\n      case 'degraded':\n        return 'text-yellow-400';\n      case 'outage':\n        return 'text-red-400';\n      case 'maintenance':\n        return 'text-blue-400';\n      default:\n        return 'text-green-400 dark:text-green-600';\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center gap-1\">\n      {isLoading ? (\n        <RefreshCw className=\"w-2.5 h-2.5 text-white/70 animate-spin\" />\n      ) : (\n        <CheckCircle className={`w-2.5 h-2.5 ${isAllOperational ? 'text-emerald-400 dark:text-emerald-600' : 'text-amber-400 dark:text-amber-600'}`} />\n      )}\n      <span \n        className={`text-[10px] font-semibold ${\n          isLoading ? 'text-white/70' : \n          isAllOperational ? 'text-emerald-300 dark:text-emerald-600' : 'text-amber-300 dark:text-amber-600'\n        }`}\n        style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}\n      >\n        {isLoading ? 'Checking Status...' : \n         isAllOperational ? 'All Systems Operational' : 'Service Issues Detected'}\n      </span>\n    </div>\n  );\n}","size_bytes":5261},"client/src/components/farcaster-share-button.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Share, ExternalLink, Copy } from 'lucide-react';\nimport { SiFarcaster } from 'react-icons/si';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { sdk } from '@farcaster/miniapp-sdk';\n\ninterface FarcasterShareButtonProps {\n  user: {\n    displayName?: string;\n    username?: string;\n    score?: number;\n    userkeys?: string[];\n  };\n  compact?: boolean;\n}\n\nexport function FarcasterShareButton({ user, compact = false }: FarcasterShareButtonProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [sdkReady, setSdkReady] = useState(false);\n  const [sdkCapabilities, setSdkCapabilities] = useState<string[]>([]);\n  \n  const userkey = user?.userkeys?.[0] || '';\n  const displayName = user?.displayName || user?.username || 'Anonymous';\n  const score = user?.score || 0;\n  \n  // Generate frame URL\n  const baseUrl = window.location.origin;\n  const frameUrl = `${baseUrl}/farcaster/frame/${encodeURIComponent(userkey)}`;\n  \n  // Generate aesthetic cast text with engaging copy\n  const castText = `‚ú® TRUST RADAR SCAN COMPLETE ‚ú®\n\nüéØ Score: ${score} | ${getScoreLevel(score)} ${getTierEmoji(score)}\nüìä On-chain reputation verified via Ethos Network\n\nCrafted by @cookedzera.eth on @ethos_network`;\n\n  // Enhanced SDK detection and initialization\n  useEffect(() => {\n    const initializeSDK = async () => {\n      try {\n        // Method 1: Check if SDK is available in window context\n        if (typeof window !== 'undefined' && (window as any).farcaster) {\n          setSdkReady(true);\n        }\n        \n        // Method 2: Test SDK capabilities\n        try {\n          const capabilities = await sdk.getCapabilities();\n          setSdkCapabilities(capabilities);\n          setSdkReady(true);\n        } catch (sdkError) {\n          // SDK capabilities not available\n        }\n        \n        // Method 3: Test context access\n        try {\n          const context = await sdk.context;\n          if (context) {\n            setSdkReady(true);\n          }\n        } catch (contextError) {\n          // SDK context not available\n        }\n      } catch (error) {\n        // SDK initialization failed\n      }\n    };\n    \n    initializeSDK();\n  }, []);\n\n  function getScoreLevel(score: number): string {\n    if (score >= 2000) return 'Exemplary';\n    if (score >= 1600) return 'Reputable';\n    if (score >= 1200) return 'Neutral';\n    if (score >= 800) return 'Questionable';\n    return 'Untrusted';\n  }\n\n  function getTierEmoji(score: number): string {\n    if (score >= 2000) return 'üëë'; // Exemplary (2000-2800)\n    if (score >= 1600) return 'üèÜ'; // Reputable (1600-1999)\n    if (score >= 1200) return '‚≠ê'; // Neutral (1200-1599) - Default tier\n    if (score >= 800) return 'üî•'; // Questionable (800-1199)\n    return '‚ö°'; // Untrusted (0-799)\n  }\n\n  // Enhanced direct cast composition using Farcaster SDK\n  const handleFlex = async () => {\n    try {\n      \n      // Method 1: Try direct composeCast first (most reliable in Mini App)\n      try {\n        const result = await sdk.actions.composeCast({\n          text: castText,\n          embeds: [frameUrl],\n          close: false // Don't close the app after casting\n        });\n        \n        if (result?.cast) {\n        }\n        return;\n      } catch (sdkError) {\n      }\n      \n      // Method 2: Check if we're in Mini App context and use openUrl\n      try {\n        const context = await sdk.context;\n        if (context) {\n          const warpcastIntentUrl = `https://warpcast.com/~/compose?text=${encodeURIComponent(castText)}&embeds[]=${encodeURIComponent(frameUrl)}`;\n          await sdk.actions.openUrl(warpcastIntentUrl);\n          return;\n        }\n      } catch (contextError) {\n      }\n      \n      // Method 3: Web browser fallback with intent URL\n      const warpcastUrl = `https://warpcast.com/~/compose?text=${encodeURIComponent(castText)}&embeds[]=${encodeURIComponent(frameUrl)}`;\n      \n      // For mobile browsers, try location.href first as it's more reliable\n      if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        window.location.href = warpcastUrl;\n        return;\n      }\n      \n      // For desktop, try window.open\n      const newWindow = window.open(warpcastUrl, '_blank', 'noopener,noreferrer');\n      \n      if (!newWindow || newWindow.closed) {\n        // Fallback to location.href if popup blocked\n        window.location.href = warpcastUrl;\n        return;\n      }\n      \n      \n    } catch (error) {\n      // Final emergency fallback - copy to clipboard\n      try {\n        await navigator.clipboard.writeText(`${castText}\\n\\n${frameUrl}`);\n        alert('Cast text copied to clipboard! Please paste in Warpcast to share.');\n      } catch (clipError) {\n        alert(`Please copy this text to share on Farcaster:\\n\\n${castText}\\n\\n${frameUrl}`);\n      }\n    }\n  };\n\n  const openWarpcast = async () => {\n    await handleFlex(); // Use the same logic\n  };\n\n  const openFarcaster = () => {\n    window.open(frameUrl, '_blank');\n  };\n\n  // Direct redirect function without popup\n  const handleFlexClick = async () => {\n    await openWarpcast();\n  };\n\n  const copyFrameUrl = async () => {\n    try {\n      await navigator.clipboard.writeText(frameUrl);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      // Handle error silently in production\n    }\n  };\n\n  if (compact) {\n    return (\n      <button\n        onClick={async (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          await handleFlex();\n        }}\n        className=\"flex items-center gap-1.5 px-2 py-1 rounded-lg backdrop-blur-md bg-purple-600/20 hover:bg-purple-600/30 border border-purple-500/40 text-purple-300 hover:text-purple-200 transition-all duration-300 text-xs font-medium group ml-2\"\n      >\n        <SiFarcaster className=\"w-3 h-3 transition-transform group-hover:scale-110\" />\n        <span>Flex</span>\n      </button>\n    );\n  }\n\n  return (\n    <button \n      onClick={async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        await handleFlex();\n      }}\n      className=\"px-3 py-2 rounded-lg backdrop-blur-md bg-white/10 border border-white/20 text-white hover:bg-white/15 transition-all duration-300 hover:scale-105\"\n    >\n      <Share className=\"w-3.5 h-3.5\" />\n    </button>\n  );\n}","size_bytes":6524},"client/src/components/hero-tagline.tsx":{"content":"import { Network, Shield, CheckCircle2 } from 'lucide-react';\nimport { EthosStatus } from '@/components/ethos-status';\n\nexport function HeroTagline() {\n  return (\n    <div className=\"w-full max-w-4xl mx-auto mb-8 px-4 relative z-0\">\n      <div className=\"text-center relative\">\n        {/* Main Tagline */}\n        <div className=\"relative mb-4 z-0\">\n          <h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold leading-tight\">\n            <span className=\"text-white dark:text-white drop-shadow-2xl\" style={{ textShadow: '2px 2px 8px rgba(0,0,0,0.8), 0 0 20px rgba(0,0,0,0.5)' }}>\n              Who's Who?\n            </span>\n            <br />\n            <span className=\"text-blue-300 dark:text-blue-200\" style={{ textShadow: '2px 2px 8px rgba(0,0,0,0.8), 0 0 15px rgba(0,0,0,0.5)' }}>\n              The Network Knows.\n            </span>\n          </h2>\n          \n          {/* Verification Badge */}\n          <div className=\"inline-flex items-center gap-2 mt-3 px-3 py-1.5 backdrop-blur-sm bg-white/15 dark:bg-white/20 border border-amber-900/25 dark:border-white/20 rounded-full shadow-lg hover:bg-white/20 dark:hover:bg-white/30 transition-all duration-300\">\n            <Shield className=\"w-3 h-3 text-green-400 dark:text-green-300\" />\n            <span className=\"text-white dark:text-white text-xs font-semibold\" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.5)' }}>Verified on Ethos</span>\n            <CheckCircle2 className=\"w-3 h-3 text-green-400 dark:text-green-300\" />\n          </div>\n          \n          {/* API Status - positioned below verification badge in a new line */}\n          <div className=\"mt-2\">\n            <EthosStatus />\n          </div>\n        </div>\n\n\n\n        {/* Static decorative elements - hidden in dark mode for clean appearance */}\n        <div className=\"absolute -top-4 left-8 w-6 h-6 bg-gradient-to-br from-cyan-400/15 to-blue-400/8 rounded-full blur-sm hidden md:block md:animate-pulse dark:hidden\"></div>\n        <div className=\"absolute top-12 right-12 w-4 h-4 bg-gradient-to-br from-purple-400/15 to-pink-400/8 rounded-full blur-sm hidden md:block md:animate-pulse dark:hidden\" style={{ animationDelay: '1.5s' }}></div>\n        <div className=\"absolute bottom-8 left-16 w-3 h-3 bg-gradient-to-br from-green-400/15 to-cyan-400/8 rounded-full blur-sm hidden md:block md:animate-pulse dark:hidden\" style={{ animationDelay: '3s' }}></div>\n      </div>\n    </div>\n  );\n}","size_bytes":2427},"client/src/components/holographic-logo.tsx":{"content":"export function SimpleRadarLogo({ className = \"w-8 h-8\" }: { className?: string }) {\n  return (\n    <div className={`${className} relative`}>\n      <svg\n        viewBox=\"0 0 32 32\"\n        className=\"w-full h-full\"\n        fill=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"clay-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"hsl(25, 95%, 53%)\" />\n            <stop offset=\"100%\" stopColor=\"hsl(27, 96%, 61%)\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Main radar circle */}\n        <circle\n          cx=\"16\"\n          cy=\"16\"\n          r=\"12\"\n          fill=\"none\"\n          stroke=\"url(#clay-gradient)\"\n          strokeWidth=\"2\"\n        />\n        \n        {/* Inner radar rings */}\n        <circle\n          cx=\"16\"\n          cy=\"16\"\n          r=\"8\"\n          fill=\"none\"\n          stroke=\"url(#clay-gradient)\"\n          strokeWidth=\"1.5\"\n          opacity=\"0.6\"\n        />\n        <circle\n          cx=\"16\"\n          cy=\"16\"\n          r=\"4\"\n          fill=\"none\"\n          stroke=\"url(#clay-gradient)\"\n          strokeWidth=\"1\"\n          opacity=\"0.4\"\n        />\n        \n        {/* Cross lines */}\n        <line\n          x1=\"16\"\n          y1=\"6\"\n          x2=\"16\"\n          y2=\"26\"\n          stroke=\"url(#clay-gradient)\"\n          strokeWidth=\"1\"\n          opacity=\"0.7\"\n        />\n        <line\n          x1=\"6\"\n          y1=\"16\"\n          x2=\"26\"\n          y2=\"16\"\n          stroke=\"url(#clay-gradient)\"\n          strokeWidth=\"1\"\n          opacity=\"0.7\"\n        />\n        \n        {/* Trust indicators */}\n        <circle cx=\"20\" cy=\"12\" r=\"1.5\" fill=\"hsl(142, 76%, 36%)\" opacity=\"0.8\" />\n        <circle cx=\"12\" cy=\"20\" r=\"1.5\" fill=\"hsl(25, 95%, 53%)\" opacity=\"0.8\" />\n        <circle cx=\"22\" cy=\"22\" r=\"1\" fill=\"hsl(217, 91%, 60%)\" opacity=\"0.7\" />\n      </svg>\n    </div>\n  );\n}\n\n","size_bytes":1874},"client/src/components/index.ts":{"content":"export { SimpleRadarLogo } from './holographic-logo';\nexport { SearchSuggestionsBelow as SearchSuggestions } from './search-suggestions-below';","size_bytes":143},"client/src/components/lazy-image.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface LazyImageProps {\n  src: string;\n  alt: string;\n  className?: string;\n  fallback?: string;\n  onLoad?: () => void;\n  onError?: () => void;\n}\n\nexport function LazyImage({ src, alt, className, fallback, onLoad, onError }: LazyImageProps) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const [imageSrc, setImageSrc] = useState<string | null>(null);\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  useEffect(() => {\n    if (isInView && !imageSrc) {\n      setImageSrc(src);\n    }\n  }, [isInView, src, imageSrc]);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n    onLoad?.();\n  };\n\n  const handleError = () => {\n    if (fallback && imageSrc !== fallback) {\n      setImageSrc(fallback);\n    } else {\n      onError?.();\n    }\n  };\n\n  return (\n    <div ref={imgRef} className={className}>\n      {imageSrc && (\n        <img\n          src={imageSrc}\n          alt={alt}\n          className={`transition-opacity duration-300 ${\n            isLoaded ? 'opacity-100' : 'opacity-0'\n          } ${className}`}\n          onLoad={handleLoad}\n          onError={handleError}\n          loading=\"lazy\"\n          decoding=\"async\"\n        />\n      )}\n      {!isLoaded && (\n        <div className={`bg-gray-300/20 animate-pulse ${className}`} />\n      )}\n    </div>\n  );\n}","size_bytes":1742},"client/src/components/loading-overlay.tsx":{"content":"interface LoadingOverlayProps {\n  isVisible: boolean;\n}\n\nexport function LoadingOverlay({ isVisible }: LoadingOverlayProps) {\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center\">\n      <div className=\"bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl p-6 shadow-2xl\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white\"></div>\n          <span className=\"text-white font-medium\">Loading...</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":635},"client/src/components/next-rank-progress.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, Crown, Award, Zap, AlertTriangle, Shield } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface NextRankProgressProps {\n  currentScore: number;\n  className?: string;\n}\n\n// Official Ethos Protocol tier system (0-2800 range)\nconst getTierThresholds = () => [\n  { threshold: 2800, tier: 'Renowned (Max)', icon: Crown, colors: 'from-yellow-600 to-yellow-400', textColor: 'text-yellow-300', nextLabel: 'MAX TIER REACHED' },\n  { threshold: 2600, tier: 'Renowned', icon: Crown, colors: 'from-yellow-500 to-yellow-300', textColor: 'text-yellow-300', nextLabel: 'Renowned (Max)' },\n  { threshold: 2400, tier: 'Revered', icon: Crown, colors: 'from-pink-500 to-pink-300', textColor: 'text-pink-300', nextLabel: 'Renowned' },\n  { threshold: 2200, tier: 'Distinguished', icon: Crown, colors: 'from-indigo-500 to-indigo-300', textColor: 'text-indigo-300', nextLabel: 'Revered' },\n  { threshold: 2000, tier: 'Exemplary', icon: Crown, colors: 'from-purple-500 to-purple-300', textColor: 'text-purple-300', nextLabel: 'Distinguished' },\n  { threshold: 1800, tier: 'Reputable', icon: Award, colors: 'from-emerald-500 to-emerald-300', textColor: 'text-emerald-300', nextLabel: 'Exemplary' },\n  { threshold: 1600, tier: 'Established', icon: Award, colors: 'from-green-500 to-green-300', textColor: 'text-green-300', nextLabel: 'Reputable' },\n  { threshold: 1400, tier: 'Known', icon: Zap, colors: 'from-cyan-500 to-cyan-300', textColor: 'text-cyan-300', nextLabel: 'Established' },\n  { threshold: 1200, tier: 'Neutral', icon: Zap, colors: 'from-blue-500 to-blue-300', textColor: 'text-blue-300', nextLabel: 'Known' },\n  { threshold: 800, tier: 'Questionable', icon: AlertTriangle, colors: 'from-amber-500 to-amber-300', textColor: 'text-amber-300', nextLabel: 'Neutral' },\n  { threshold: 0, tier: 'Untrusted', icon: Shield, colors: 'from-gray-500 to-gray-300', textColor: 'text-gray-400', nextLabel: 'Questionable' }\n];\n\nexport function NextRankProgress({ currentScore, className = '' }: NextRankProgressProps) {\n  const [progress, setProgress] = useState(0);\n  const [animatedProgress, setAnimatedProgress] = useState(0);\n  \n  const tiers = getTierThresholds();\n  const currentTierIndex = tiers.findIndex(tier => currentScore >= tier.threshold);\n  const currentTier = tiers[currentTierIndex] || tiers[tiers.length - 1];\n  const nextTier = currentTierIndex > 0 ? tiers[currentTierIndex - 1] : null;\n  \n  // Calculate progress towards next tier\n  useEffect(() => {\n    if (!nextTier) {\n      setProgress(100); // Max tier reached\n      return;\n    }\n    \n    const currentTierMin = currentTier.threshold;\n    const nextTierMin = nextTier.threshold;\n    const scoreInCurrentTier = currentScore - currentTierMin;\n    const tierRange = nextTierMin - currentTierMin;\n    const calculatedProgress = Math.min(100, (scoreInCurrentTier / tierRange) * 100);\n    \n    setProgress(calculatedProgress);\n  }, [currentScore, currentTier, nextTier]);\n  \n  // Animate progress bar\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedProgress(progress);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [progress]);\n  \n  if (!nextTier) {\n    // Max tier reached\n    return (\n      <div className={`backdrop-blur-xl bg-gradient-to-br from-purple-500/15 to-purple-600/10 border border-purple-400/20 rounded-2xl p-5 shadow-xl shadow-purple-400/20 hover:shadow-purple-400/30 transition-all duration-500 ${className}`}>\n        <div className=\"flex items-center gap-3 mb-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-purple-400 to-purple-500 flex items-center justify-center\">\n            <Crown className=\"w-4 h-4 text-white\" />\n          </div>\n          <div>\n            <div className=\"text-sm font-medium text-white/90\">Maximum Tier Achieved</div>\n            <div className=\"text-xs text-white/60\">You've reached the highest Ethos Protocol tier</div>\n          </div>\n        </div>\n        \n        <div className=\"relative\">\n          <Progress \n            value={100} \n            className=\"h-2 bg-white/10\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-purple-500 rounded-full opacity-80\" />\n        </div>\n        \n        <div className=\"mt-2 flex items-center justify-between text-xs\">\n          <span className=\"text-purple-300 font-medium\">{currentTier.tier}</span>\n          <span className=\"text-white/60\">üèÜ LEGENDARY STATUS</span>\n        </div>\n      </div>\n    );\n  }\n  \n  const scoreNeeded = nextTier.threshold - currentScore;\n  const CurrentIcon = currentTier.icon;\n  const NextIcon = nextTier.icon;\n  \n  return (\n    <div className={`backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-purple-400/20 hover:shadow-purple-400/30 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center gap-2\">\n          <TrendingUp className=\"w-4 h-4 text-purple-400\" />\n          <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Next Rank</span>\n        </div>\n        \n        <div className=\"text-xs text-white/60\">\n          <span className={`${nextTier.textColor} font-medium`}>{scoreNeeded}</span> points needed\n        </div>\n      </div>\n      \n      {/* Enhanced Progress Bar with Better Visual Indicators */}\n      <div className=\"relative mb-3\">\n        <div className=\"h-4 bg-white/8 rounded-full overflow-hidden border border-white/10\">\n          <motion.div \n            className={`h-full bg-gradient-to-r ${nextTier.colors} rounded-full relative overflow-hidden`}\n            initial={{ width: \"0%\" }}\n            animate={{ width: `${animatedProgress}%` }}\n            transition={{ duration: 1.2, ease: \"easeOut\" }}\n          >\n            {/* Shimmer effect */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\n            {/* Progress indicator dot */}\n            {animatedProgress > 5 && (\n              <div className=\"absolute right-1 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-white rounded-full shadow-lg\"></div>\n            )}\n          </motion.div>\n        </div>\n        \n        {/* Enhanced Glow effect */}\n        <motion.div \n          className={`absolute top-0 left-0 h-4 bg-gradient-to-r ${nextTier.colors} rounded-full opacity-40 blur-md -z-10`}\n          initial={{ width: \"0%\" }}\n          animate={{ width: `${animatedProgress}%` }}\n          transition={{ duration: 1.2, ease: \"easeOut\" }}\n        />\n        \n        {/* Progress percentage overlay */}\n        {animatedProgress > 20 && (\n          <motion.div \n            className=\"absolute inset-0 flex items-center justify-center\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8, duration: 0.4 }}\n          >\n            <span className=\"text-xs font-bold text-white drop-shadow-lg\">\n              {animatedProgress.toFixed(0)}%\n            </span>\n          </motion.div>\n        )}\n      </div>\n      \n      {/* Tier Information */}\n      <div className=\"flex items-center justify-between\">\n        {/* Current Tier */}\n        <div className=\"flex items-center gap-2\">\n          <div className={`w-6 h-6 rounded-lg bg-gradient-to-br ${currentTier.colors} flex items-center justify-center`}>\n            <CurrentIcon className=\"w-3 h-3 text-white\" />\n          </div>\n          <div className=\"text-xs\">\n            <div className={`${currentTier.textColor} font-medium`}>{currentTier.tier}</div>\n            <div className=\"text-white/50\">{currentScore} pts</div>\n          </div>\n        </div>\n        \n        {/* Arrow */}\n        <div className=\"flex-1 flex items-center justify-center\">\n          <motion.div \n            className=\"text-white/40\"\n            animate={{ x: [0, 4, 0] }}\n            transition={{ repeat: Infinity, duration: 2, ease: \"easeInOut\" }}\n          >\n            ‚Üí\n          </motion.div>\n        </div>\n        \n        {/* Next Tier */}\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-xs text-right\">\n            <div className={`${nextTier.textColor} font-medium`}>{nextTier.tier}</div>\n            <div className=\"text-white/50\">{nextTier.threshold} pts</div>\n          </div>\n          <div className={`w-6 h-6 rounded-lg bg-gradient-to-br ${nextTier.colors} flex items-center justify-center opacity-60`}>\n            <NextIcon className=\"w-3 h-3 text-white\" />\n          </div>\n        </div>\n      </div>\n      \n      {/* Progress Percentage */}\n      <div className=\"mt-3 text-center\">\n        <div className=\"text-xs text-white/60\">\n          Progress: <span className={`${nextTier.textColor} font-medium`}>{animatedProgress.toFixed(1)}%</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8993},"client/src/components/optimized-profile-loader.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { optimizeForMobile } from '@/utils/performance';\n\ninterface OptimizedProfileLoaderProps {\n  userkey: string;\n  children: (loadingState: {\n    loadCritical: boolean;\n    loadSecondary: boolean;\n    loadTertiary: boolean;\n  }) => React.ReactNode;\n}\n\nexport function OptimizedProfileLoader({ userkey, children }: OptimizedProfileLoaderProps) {\n  const [loadCritical, setLoadCritical] = useState(false);\n  const [loadSecondary, setLoadSecondary] = useState(false);\n  const [loadTertiary, setLoadTertiary] = useState(false);\n\n  const { mobile, slow } = optimizeForMobile();\n\n  useEffect(() => {\n    if (!userkey) return;\n\n    // Immediate: Load critical data (trust score, basic profile)\n    setLoadCritical(true);\n\n    // After 100ms: Load secondary data (stats, attestations)\n    const secondaryTimer = setTimeout(() => {\n      setLoadSecondary(true);\n    }, mobile || slow ? 200 : 100);\n\n    // After 300ms: Load tertiary data (R4R, activities)\n    const tertiaryTimer = setTimeout(() => {\n      setLoadTertiary(true);\n    }, mobile || slow ? 500 : 300);\n\n    return () => {\n      clearTimeout(secondaryTimer);\n      clearTimeout(tertiaryTimer);\n    };\n  }, [userkey, mobile, slow]);\n\n  return (\n    <>\n      {children({\n        loadCritical,\n        loadSecondary,\n        loadTertiary,\n      })}\n    </>\n  );\n}","size_bytes":1363},"client/src/components/r4r-analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertTriangle, Clock, Users, Eye, ChevronRight, Shield, AlertCircle, CheckCircle, TrendingUp, Calendar, Activity } from \"lucide-react\";\nimport { useUserProfile } from \"@/hooks/use-ethos-api\";\nimport { useR4RAnalysis } from \"@/hooks/use-r4r-analysis\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useState } from \"react\";\n\nexport function TrustInsights() {\n  const { user } = useUserProfile();\n  const { data: r4rAnalysis, isLoading, error } = useR4RAnalysis(user?.userkeys?.[0]);\n  const [showDetailedView, setShowDetailedView] = useState(false);\n\n  if (!user) return null;\n\n  if (isLoading) {\n    return (\n      <section className=\"mb-6 animate-slide-up\" style={{ animationDelay: '0.4s' }}>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">R4R Analysis</h3>\n              <Badge variant=\"outline\" className=\"text-blue-600 border-blue-200\">\n                <Activity className=\"h-3 w-3 mr-1 animate-spin\" />\n                Analyzing...\n              </Badge>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\"></div>\n              <div className=\"h-4 bg-muted rounded animate-pulse w-1/2\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  if (error || !r4rAnalysis) {\n    return (\n      <section className=\"mb-6 animate-slide-up\" style={{ animationDelay: '0.4s' }}>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">R4R Analysis</h3>\n              <Badge variant=\"outline\" className=\"text-red-600 border-red-200\">\n                <AlertCircle className=\"h-3 w-3 mr-1\" />\n                Analysis Failed\n              </Badge>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Unable to perform R4R analysis. This could be due to insufficient review data or API limitations.\n            </p>\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  const getRiskLevelColor = (level: string) => {\n    switch (level) {\n      case 'Low': return 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800';\n      case 'Moderate': return 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800';\n      case 'High': return 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:border-orange-800';\n      case 'Critical': return 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200 dark:bg-gray-900/20 dark:border-gray-800';\n    }\n  };\n\n  const getRiskIcon = (level: string) => {\n    switch (level) {\n      case 'Low': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'Moderate': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'High': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'Critical': return <Shield className=\"h-4 w-4\" />;\n      default: return <Eye className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (!showDetailedView) {\n    return (\n      <section className=\"mb-6 animate-slide-up\" style={{ animationDelay: '0.4s' }}>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">R4R Analysis</h3>\n              <Badge variant=\"outline\" className={getRiskLevelColor(r4rAnalysis.riskLevel)}>\n                {getRiskIcon(r4rAnalysis.riskLevel)}\n                {r4rAnalysis.riskLevel} Risk\n              </Badge>\n            </div>\n            \n            {/* R4R Score */}\n            <div className=\"mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div>\n                  <div className=\"text-2xl font-bold\">{r4rAnalysis.r4rScore}%</div>\n                  <div className=\"text-sm text-muted-foreground\">R4R Score</div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold text-blue-600 flex items-center\">\n                    <TrendingUp className=\"h-4 w-4 mr-1\" />\n                    {r4rAnalysis.reciprocalPercentage.toFixed(1)}%\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Reciprocal Reviews</div>\n                </div>\n              </div>\n              <Progress value={r4rAnalysis.r4rScore} className=\"h-2\" />\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-xl font-bold\">{r4rAnalysis.reciprocalReviews}</div>\n                <div className=\"text-xs text-muted-foreground\">Reciprocal Pairs</div>\n              </div>\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-xl font-bold\">{r4rAnalysis.quickReciprocalCount}</div>\n                <div className=\"text-xs text-muted-foreground\">Quick Reciprocals</div>\n              </div>\n            </div>\n\n            {/* Key Insights */}\n            <div className=\"space-y-3 mb-4\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground flex items-center\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  First Review\n                </span>\n                <span className=\"font-medium\">\n                  {formatDistanceToNow(new Date(r4rAnalysis.firstReviewDate), { addSuffix: true })}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground flex items-center\">\n                  <Activity className=\"h-3 w-3 mr-1\" />\n                  Review Frequency\n                </span>\n                <span className=\"font-medium\">{r4rAnalysis.reviewFrequency}/week</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground flex items-center\">\n                  <Users className=\"h-3 w-3 mr-1\" />\n                  Network Size\n                </span>\n                <span className=\"font-medium\">{r4rAnalysis.networkConnections.length} connections</span>\n              </div>\n            </div>\n\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={() => setShowDetailedView(true)}\n            >\n              View Detailed Analysis\n              <ChevronRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"mb-6 animate-slide-up\" style={{ animationDelay: '0.4s' }}>\n      <div className=\"space-y-4\">\n        {/* Main R4R Score Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"h-5 w-5 mr-2\" />\n                R4R Analysis Report\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setShowDetailedView(false)}\n              >\n                Collapse\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Risk Assessment */}\n            <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div>\n                <div className=\"text-2xl font-bold\">{r4rAnalysis.r4rScore}%</div>\n                <div className=\"text-sm text-muted-foreground\">Overall R4R Score</div>\n              </div>\n              <Badge className={getRiskLevelColor(r4rAnalysis.riskLevel)}>\n                {getRiskIcon(r4rAnalysis.riskLevel)}\n                {r4rAnalysis.riskLevel} Risk\n              </Badge>\n            </div>\n\n            {/* Review Statistics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{r4rAnalysis.totalReviewsReceived}</div>\n                <div className=\"text-xs text-muted-foreground\">Reviews Received</div>\n              </div>\n              <div className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">{r4rAnalysis.totalReviewsGiven}</div>\n                <div className=\"text-xs text-muted-foreground\">Reviews Given</div>\n              </div>\n              <div className=\"text-center p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-600\">{r4rAnalysis.reciprocalReviews}</div>\n                <div className=\"text-xs text-muted-foreground\">Reciprocal Pairs</div>\n              </div>\n              <div className=\"text-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-red-600\">{r4rAnalysis.quickReciprocalCount}</div>\n                <div className=\"text-xs text-muted-foreground\">Quick Reciprocals</div>\n              </div>\n            </div>\n\n\n          </CardContent>\n        </Card>\n\n        {/* Top Network Connections */}\n        {r4rAnalysis.networkConnections.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"h-5 w-5 mr-2\" />\n                Top Network Connections\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {r4rAnalysis.networkConnections.slice(0, 5).map((connection, index) => (\n                  <div key={connection.userkey} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">{connection.displayName}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {connection.reciprocalCount} reciprocal reviews\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge \n                        variant=\"outline\" \n                        className={connection.suspiciousScore > 50 ? 'text-red-600 border-red-300' : 'text-green-600 border-green-300'}\n                      >\n                        {connection.suspiciousScore.toFixed(0)}% risk\n                      </Badge>\n                      {connection.avgTimeGap < 30 && (\n                        <div className=\"text-xs text-orange-600 mt-1 flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          Avg: {connection.avgTimeGap.toFixed(0)}min\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Recent Reciprocal Pairs */}\n        {r4rAnalysis.reviewPairs.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 mr-2\" />\n                Recent Reciprocal Reviews\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {r4rAnalysis.reviewPairs.slice(0, 3).map((pair, index) => (\n                  <div key={`${pair.review1.id}-${pair.review2.id}`} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"font-medium\">{pair.user2.displayName}</div>\n                      <div className=\"flex items-center space-x-2\">\n                        {pair.isQuickReciprocal && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Quick ({pair.review1.timeGap?.toFixed(0)}min)\n                          </Badge>\n                        )}\n                        <Badge \n                          variant=\"outline\"\n                          className={pair.suspiciousScore > 50 ? 'text-red-600 border-red-300' : 'text-yellow-600 border-yellow-300'}\n                        >\n                          {pair.suspiciousScore}% suspicious\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                      <div className=\"p-2 bg-muted/50 rounded\">\n                        <div className=\"text-xs text-muted-foreground mb-1\">Received Review</div>\n                        <div className=\"capitalize\">{pair.review1.sentiment}</div>\n                        {pair.review1.comment && (\n                          <div className=\"text-xs mt-1 text-muted-foreground\">\n                            \"{pair.review1.comment.slice(0, 50)}...\"\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"p-2 bg-muted/50 rounded\">\n                        <div className=\"text-xs text-muted-foreground mb-1\">Given Review</div>\n                        <div className=\"capitalize\">{pair.review2.sentiment}</div>\n                        {pair.review2.comment && (\n                          <div className=\"text-xs mt-1 text-muted-foreground\">\n                            \"{pair.review2.comment.slice(0, 50)}...\"\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </section>\n  );\n}\n\n// Also export as R4RAnalytics for backward compatibility\nexport { TrustInsights as R4RAnalytics };\n","size_bytes":14771},"client/src/components/r4r-comprehensive-analysis.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  AlertTriangle, \n  CheckCircle, \n  XCircle, \n  Clock, \n  Users, \n  TrendingUp,\n  Activity,\n  Calendar,\n  Target,\n  Network,\n  Shield\n} from \"lucide-react\";\nimport { useR4RAnalysis, type R4RAnalysis } from \"@/hooks/use-r4r-analysis\";\nimport { R4RRiskDetailsPopup } from \"@/components/r4r-risk-details-popup\";\nimport { formatTimeGap } from \"@/lib/number-utils\";\nimport { useState } from \"react\";\n\ninterface R4RComprehensiveAnalysisProps {\n  userkey: string;\n}\n\nexport function R4RComprehensiveAnalysis({ userkey }: R4RComprehensiveAnalysisProps) {\n  const { data: analysis, isLoading, error } = useR4RAnalysis(userkey);\n  const [expandedSection, setExpandedSection] = useState<string | null>(null);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              R4R Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              <span className=\"ml-3 text-muted-foreground\">Analyzing review patterns...</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !analysis) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            R4R Analysis\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {error instanceof Error ? error.message : 'Unable to load R4R analysis'}\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'Low': return 'text-green-600';\n      case 'Moderate': return 'text-yellow-600';\n      case 'High': return 'text-orange-600';\n      case 'Critical': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getRiskBadgeVariant = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'Low': return 'default';\n      case 'Moderate': return 'secondary';\n      case 'High': return 'destructive';\n      case 'Critical': return 'destructive';\n      default: return 'outline';\n    }\n  };\n\n\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Risk Overview */}\n      <Card className=\"border-l-4 border-l-blue-500\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              R4R Risk Assessment\n            </div>\n            <Badge variant={getRiskBadgeVariant(analysis.riskLevel)} className=\"text-sm\">\n              {analysis.riskLevel} Risk\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-2xl font-bold\">{analysis.r4rScore.toFixed(1)}%</span>\n            <span className={`text-lg font-semibold ${getRiskColor(analysis.riskLevel)}`}>\n              {analysis.riskLevel} Risk\n            </span>\n          </div>\n          \n          <Progress value={analysis.r4rScore} className=\"h-3\" />\n          \n          <div className=\"text-sm text-muted-foreground\">\n            R4R Score calculated using advanced pattern detection algorithm\n          </div>\n\n          {analysis.r4rScore >= 70 && (\n            <Alert className=\"border-red-200 bg-red-50 dark:bg-red-950/20\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-800 dark:text-red-300\">\n                <div className=\"flex items-center justify-between\">\n                  <span>High R4R score indicates potential reputation farming behavior</span>\n                  <div onClick={(e) => e.stopPropagation()}>\n                    <R4RRiskDetailsPopup analysis={analysis} />\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg\">\n                <Users className=\"h-4 w-4 text-blue-600\" />\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold\">{analysis.reciprocalReviews}</div>\n                <div className=\"text-xs text-muted-foreground\">Reciprocal Reviews</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-purple-100 dark:bg-purple-900/20 rounded-lg\">\n                <Target className=\"h-4 w-4 text-purple-600\" />\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold\">{analysis.reciprocalPercentage.toFixed(1)}%</div>\n                <div className=\"text-xs text-muted-foreground\">Reciprocal Rate</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-orange-100 dark:bg-orange-900/20 rounded-lg\">\n                <Clock className=\"h-4 w-4 text-orange-600\" />\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold\">{analysis.quickReciprocalCount}</div>\n                <div className=\"text-xs text-muted-foreground\">Quick Reciprocals</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900/20 rounded-lg\">\n                <Activity className=\"h-4 w-4 text-green-600\" />\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold\">{analysis.reviewFrequency.toFixed(1)}</div>\n                <div className=\"text-xs text-muted-foreground\">Reviews/Week</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analysis */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Review Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              Review Statistics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Reviews Received</span>\n                <span className=\"font-semibold\">{analysis.totalReviewsReceived}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Reviews Given</span>\n                <span className=\"font-semibold\">{analysis.totalReviewsGiven}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Reciprocal Reviews</span>\n                <span className=\"font-semibold text-orange-600\">{analysis.reciprocalReviews}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Quick Reciprocals (&lt;30min)</span>\n                <span className=\"font-semibold text-red-600\">{analysis.quickReciprocalCount}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n\n      </div>\n\n      {/* High R4R Rate Reviewers (matches ethos-r4r.deno.dev) */}\n      {analysis.highR4RReviewers && analysis.highR4RReviewers.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                High R4R Rate Reviewers (‚â•70%)\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {analysis.highR4RReviewers.length}\n                </Badge>\n              </div>\n              <R4RRiskDetailsPopup analysis={analysis} />\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {analysis.highR4RReviewers.map((reviewer: any, index: number) => (\n                <div key={reviewer.userkey} className=\"flex items-center justify-between p-3 rounded-lg border border-red-200 bg-red-50 dark:border-red-900 dark:bg-red-950/20\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-red-500 to-orange-500 flex items-center justify-center text-white text-sm font-semibold\">\n                      {index + 1}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-sm\">\n                        {reviewer.displayName || 'Unknown User'}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {reviewer.riskLevel} Risk Level\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-bold text-red-600\">\n                      {reviewer.r4rScore.toFixed(1)}%\n                    </div>\n                    <div className=\"text-xs text-red-500\">R4R Score</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Top Reciprocal Connections */}\n      {analysis.networkConnections.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Top Reciprocal Connections\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {analysis.networkConnections.slice(0, 5).map((connection, index) => (\n                <div key={connection.userkey} className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-semibold\">\n                      {index + 1}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-sm\">\n                        {connection.displayName || 'Unknown User'}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {connection.reciprocalCount} reciprocal, avg {formatTimeGap(connection.avgTimeGap)} gap\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-sm font-semibold ${connection.suspiciousScore > 50 ? 'text-red-600' : 'text-orange-600'}`}>\n                      {connection.suspiciousScore.toFixed(0)}% \n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">suspicious</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Review Pairs (Most Suspicious) */}\n      {analysis.reviewPairs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              Most Suspicious Review Pairs\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analysis.reviewPairs.slice(0, 3).map((pair, index) => (\n                <div key={`${pair.review1.id}-${pair.review2.id}`} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={pair.isQuickReciprocal ? \"destructive\" : \"secondary\"}>\n                        {pair.isQuickReciprocal ? \"Quick Reciprocal\" : \"Reciprocal\"}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {pair.review1.timeGap ? formatTimeGap(pair.review1.timeGap) : 'N/A'} gap\n                      </span>\n                    </div>\n                    <div className=\"text-sm font-semibold text-red-600\">\n                      {pair.suspiciousScore.toFixed(0)}% suspicious\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium\">{pair.user2.displayName || 'Unknown'}</div>\n                      <div className=\"text-muted-foreground\">‚Üí {analysis.displayName}</div>\n                      <div className=\"text-xs bg-gray-100 dark:bg-gray-800 rounded p-2\">\n                        \"{pair.review1.comment || 'No comment'}\"\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium\">{analysis.displayName}</div>\n                      <div className=\"text-muted-foreground\">‚Üí {pair.user2.displayName || 'Unknown'}</div>\n                      <div className=\"text-xs bg-gray-100 dark:bg-gray-800 rounded p-2\">\n                        \"{pair.review2.comment || 'No comment'}\"\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Timeline */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4\" />\n            Review Timeline\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex justify-between text-sm\">\n            <span>First Review</span>\n            <span className=\"font-medium\">\n              {new Date(analysis.firstReviewDate).toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span>Last Review</span>\n            <span className=\"font-medium\">\n              {new Date(analysis.lastReviewDate).toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span>Review Frequency</span>\n            <span className=\"font-medium\">{analysis.reviewFrequency.toFixed(1)} per week</span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span>Avg Time Between Reviews</span>\n            <span className=\"font-medium\">{analysis.avgTimeBetweenReviews.toFixed(1)} hours</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16132},"client/src/components/r4r-data-section.tsx":{"content":"import { Network, Shield, AlertTriangle, CheckCircle, Clock, Users, TrendingUp, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { useR4RAnalysis } from \"@/hooks/use-r4r-analysis\";\nimport { ReviewsPatternPopup } from \"./reviews-pattern-popup\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface R4RDataSectionProps {\n  userkey: string | undefined;\n  userProfile?: {\n    displayName?: string;\n    username?: string;\n    avatarUrl?: string;\n    avatar?: string;\n  };\n}\n\nexport function R4RDataSection({ userkey, userProfile: passedUserProfile }: R4RDataSectionProps) {\n  const { data: r4rAnalysis, isLoading, error } = useR4RAnalysis(userkey);\n  const [showAllHighRisk, setShowAllHighRisk] = useState(false);\n  const [showAllConnections, setShowAllConnections] = useState(false);\n\n  // Get current user profile for avatar display in popup\n  const { data: userProfile } = useQuery({\n    queryKey: ['/api/enhanced-profile', userkey],\n    enabled: !!userkey,\n  });\n\n  // Also try getting user stats as fallback for avatar\n  const { data: userStats } = useQuery({\n    queryKey: ['/api/user-stats', userkey],\n    enabled: !!userkey,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"backdrop-blur-md bg-white/8 border border-white/15 rounded-xl p-5 mb-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Network className=\"w-4 h-4 text-purple-400\" />\n          <span className=\"text-sm text-white/70 font-medium\">R4R Analysis</span>\n        </div>\n        <div className=\"flex flex-col items-center justify-center py-8 space-y-3\">\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-purple-400\"></div>\n          <div className=\"text-center space-y-1\">\n            <div className=\"text-white/70 text-sm\">Analyzing review patterns...</div>\n            <div className=\"text-white/50 text-xs\">This may take up to 30 seconds for users with many reviews</div>\n          </div>\n          {/* Progress indicator */}\n          <div className=\"w-full max-w-xs\">\n            <div className=\"h-1 bg-white/10 rounded-full overflow-hidden\">\n              <div className=\"h-full bg-gradient-to-r from-purple-400 to-blue-400 rounded-full animate-pulse\" style={{\n                animation: 'loading-progress 10s ease-in-out infinite'\n              }}></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !r4rAnalysis) {\n    return (\n      <div className=\"backdrop-blur-md bg-white/8 border border-white/15 rounded-xl p-5 mb-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Network className=\"w-4 h-4 text-purple-400\" />\n          <span className=\"text-sm text-white/70 font-medium\">R4R Analysis</span>\n        </div>\n        <div className=\"text-center py-4\">\n          <AlertTriangle className=\"w-8 h-8 text-orange-400 mx-auto mb-2\" />\n          <div className=\"text-sm text-white/50\">Analysis unavailable</div>\n          <div className=\"text-xs text-white/30 mt-1\">Insufficient review data</div>\n        </div>\n      </div>\n    );\n  }\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'Low': return 'text-green-300';\n      case 'Moderate': return 'text-yellow-300';\n      case 'High': return 'text-orange-300';\n      case 'Critical': return 'text-red-300';\n      default: return 'text-gray-300';\n    }\n  };\n\n  const getRiskIcon = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'Low': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'Moderate': return <Clock className=\"w-4 h-4\" />;\n      case 'High': return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'Critical': return <Shield className=\"w-4 h-4\" />;\n      default: return <Network className=\"w-4 h-4\" />;\n    }\n  };\n\n  // Special case for users with no review activity\n  if (r4rAnalysis.totalReviewsReceived === 0 && r4rAnalysis.totalReviewsGiven === 0) {\n    return (\n      <div className=\"backdrop-blur-md bg-white/8 border border-white/15 rounded-xl p-5 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Network className=\"w-4 h-4 text-purple-400\" />\n            <span className=\"text-sm text-white/70 font-medium\">R4R Analysis</span>\n          </div>\n          <div className=\"flex items-center gap-1 px-2 py-1 rounded-lg bg-green-500/20 border border-green-400/30\">\n            <CheckCircle className=\"w-4 h-4 text-green-300\" />\n            <span className=\"text-xs font-medium text-green-300\">Clean</span>\n          </div>\n        </div>\n        \n        <div className=\"text-center py-6 space-y-3\">\n          <div className=\"w-12 h-12 rounded-full bg-green-500/20 border border-green-400/30 flex items-center justify-center mx-auto\">\n            <CheckCircle className=\"w-6 h-6 text-green-300\" />\n          </div>\n          <div className=\"space-y-1\">\n            <div className=\"text-sm text-white font-medium\">No Review Activity</div>\n            <div className=\"text-xs text-white/60 max-w-xs mx-auto\">\n              This user has no review history to analyze for R4R patterns. This is normal for new users or those who haven't participated in the review system.\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"backdrop-blur-md bg-white/8 border border-white/15 rounded-xl p-5 mb-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Network className=\"w-4 h-4 text-purple-400\" />\n          <span className=\"text-sm text-white/70 font-medium\">R4R Analysis</span>\n        </div>\n        <div className={`flex items-center gap-1 px-2 py-1 rounded-lg bg-white/5 border border-white/10 ${getRiskColor(r4rAnalysis.riskLevel)}`}>\n          {getRiskIcon(r4rAnalysis.riskLevel)}\n          <span className=\"text-xs font-medium\">{r4rAnalysis.riskLevel}</span>\n        </div>\n      </div>\n      \n      {/* Fixed R4R Score Card with Proper Grid Layout */}\n      <div className={`mb-4 p-4 rounded-xl border-2 shadow-lg ${\n        r4rAnalysis.r4rScore >= 75 ? 'bg-gradient-to-r from-red-500/25 to-red-600/25 border-red-400/50 shadow-red-500/20' :\n        r4rAnalysis.r4rScore >= 50 ? 'bg-gradient-to-r from-orange-500/25 to-yellow-500/25 border-orange-400/50 shadow-orange-500/20' :\n        'bg-gradient-to-r from-purple-500/15 to-blue-500/15 border-purple-400/30 shadow-purple-500/10'\n      }`}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Left Column - R4R Risk Score */}\n          <div className=\"text-center space-y-1\">\n            <div className={`text-3xl font-bold ${\n              r4rAnalysis.r4rScore >= 75 ? 'text-red-200 animate-pulse' :\n              r4rAnalysis.r4rScore >= 50 ? 'text-orange-200 animate-pulse' :\n              'text-white'\n            }`}>\n              {r4rAnalysis.r4rScore.toFixed(1)}%\n            </div>\n            <div className=\"text-sm text-gray-400\">R4R Risk Score</div>\n          </div>\n          \n          {/* Right Column - Reciprocal Rate */}\n          <div className=\"text-center space-y-1\">\n            <div className={`text-3xl font-bold ${\n              r4rAnalysis.reciprocalPercentage >= 75 ? 'text-red-200' :\n              r4rAnalysis.reciprocalPercentage >= 50 ? 'text-orange-200' :\n              'text-purple-300'\n            }`}>\n              {r4rAnalysis.reciprocalPercentage.toFixed(1)}%\n            </div>\n            <div className=\"text-sm text-gray-400\">Reciprocal Rate</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n        <div className=\"text-center p-3 rounded-lg bg-white/5 border border-white/10\">\n          <div className=\"text-xl font-bold text-blue-300\">{r4rAnalysis.reciprocalReviews}</div>\n          <div className=\"text-xs text-white/60\">Reciprocal Pairs</div>\n        </div>\n        \n        <div className=\"text-center p-3 rounded-lg bg-white/5 border border-white/10\">\n          <div className=\"text-xl font-bold text-orange-300\">{r4rAnalysis.quickReciprocalCount}</div>\n          <div className=\"text-xs text-white/60\">Quick Reciprocals</div>\n        </div>\n      </div>\n\n      {/* Review Stats */}\n      <div className=\"space-y-2 mb-4\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-white/60\">Reviews Received</span>\n          <span className=\"text-white font-medium\">{r4rAnalysis.totalReviewsReceived}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-white/60\">Reviews Given</span>\n          <span className=\"text-white font-medium\">{r4rAnalysis.totalReviewsGiven}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-white/60\">Network Connections</span>\n          <span className=\"text-white font-medium\">{r4rAnalysis.networkConnections.length}</span>\n        </div>\n      </div>\n\n      {/* Reviews Pattern Analysis Button */}\n      <div className=\"mb-4\">\n        <ReviewsPatternPopup \n          analysis={r4rAnalysis} \n          currentUser={{\n            displayName: passedUserProfile?.displayName || (userProfile as any)?.displayName || (userStats as any)?.displayName || r4rAnalysis?.displayName,\n            username: passedUserProfile?.username || (userProfile as any)?.username || (userStats as any)?.username,\n            avatarUrl: passedUserProfile?.avatarUrl || passedUserProfile?.avatar || (userProfile as any)?.avatarUrl || (userStats as any)?.avatarUrl || (userStats as any)?.avatar\n          }}\n        />\n      </div>\n\n\n\n      {/* Enhanced Coordinated Activity Warning */}\n      {r4rAnalysis.r4rScore >= 50 && (\n        <div className={`mb-4 p-4 rounded-xl border-2 shadow-lg ${\n          r4rAnalysis.r4rScore >= 75 ? 'bg-red-900/30 border-red-400/60 shadow-red-500/25' :\n          'bg-red-900/30 border-orange-400/60 shadow-orange-500/25'\n        }`}>\n          <div className=\"flex items-center gap-4\">\n            <div className={`p-3 rounded-xl ${\n              r4rAnalysis.r4rScore >= 75 ? 'bg-red-500/30' : 'bg-orange-500/30'\n            }`}>\n              <AlertTriangle className={`w-6 h-6 ${\n                r4rAnalysis.r4rScore >= 75 ? 'text-red-200' : 'text-orange-200'\n              }`} />\n            </div>\n            <div className=\"flex-1\">\n              <div className={`text-base font-bold ${\n                r4rAnalysis.r4rScore >= 75 ? 'text-red-200' : 'text-orange-200'\n              }`}>\n                ‚ö†Ô∏è {r4rAnalysis.r4rScore >= 75 ? 'High Risk: Coordinated Review Activity Detected' : 'Warning: Suspicious Review Patterns'}\n              </div>\n              <div className=\"text-sm text-white/70 mt-1\">\n                {r4rAnalysis.r4rScore >= 75 \n                  ? 'Strong indicators of reputation farming behavior' \n                  : 'Elevated mutual review activity detected'}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* High R4R Rate Reviewers (Enhanced) */}\n      {r4rAnalysis.highR4RReviewers && r4rAnalysis.highR4RReviewers.length > 0 && (\n        <div className=\"mt-4 pt-4 border-t border-white/10\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <AlertTriangle className=\"w-4 h-4 text-red-400\" />\n            <span className=\"text-sm font-semibold text-white\">High R4R Rate Reviewers (‚â•70%)</span>\n            <span className=\"bg-red-500/20 text-red-300 text-xs px-2 py-1 rounded-full font-medium\">\n              {r4rAnalysis.highR4RReviewers.length}\n            </span>\n          </div>\n          {(showAllHighRisk ? r4rAnalysis.highR4RReviewers : r4rAnalysis.highR4RReviewers.slice(0, 3)).map((reviewer, index) => (\n            <div key={reviewer.userkey} className=\"flex items-center justify-between py-3 px-4 rounded-xl bg-red-900/20 border border-red-400/30 mb-2 hover:bg-red-900/30 transition-all duration-200 shadow-lg shadow-red-500/10\">\n              <div className=\"text-sm text-white/90 truncate max-w-[120px] font-medium\">\n                {reviewer.displayName || 'Unknown User'}\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-xl font-black text-red-200 bg-red-500/20 px-3 py-1 rounded-lg\">\n                  {reviewer.r4rScore.toFixed(0)}%\n                </span>\n                <span className=\"text-sm font-bold text-red-100 bg-red-600/40 px-3 py-1 rounded-full border border-red-400/50\">\n                  {reviewer.riskLevel}\n                </span>\n              </div>\n            </div>\n          ))}\n          {r4rAnalysis.highR4RReviewers.length > 3 && (\n            <button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setShowAllHighRisk(!showAllHighRisk);\n              }}\n              className=\"flex items-center gap-1 text-sm text-white/50 hover:text-white/80 cursor-pointer w-full justify-center mt-2 py-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors\"\n            >\n              {showAllHighRisk ? (\n                <>\n                  <ChevronUp className=\"w-4 h-4\" />\n                  Show less\n                </>\n              ) : (\n                <>\n                  <ChevronDown className=\"w-4 h-4\" />\n                  +{r4rAnalysis.highR4RReviewers.length - 3} more high risk\n                </>\n              )}\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Enhanced Top Connections Preview */}\n      {r4rAnalysis.networkConnections.length > 0 && (\n        <div className=\"mt-4 pt-4 border-t border-white/10\">\n          <div className=\"text-sm font-semibold text-white mb-3\">Top Network Connections</div>\n          {(showAllConnections ? r4rAnalysis.networkConnections : r4rAnalysis.networkConnections.slice(0, 2)).map((connection, index) => (\n            <div key={connection.userkey} className={`flex items-center justify-between py-3 px-4 rounded-xl border mb-2 transition-all duration-200 shadow-md ${\n              connection.suspiciousScore >= 70 ? 'bg-red-900/15 border-red-400/30 hover:bg-red-900/25 shadow-red-500/10' :\n              connection.suspiciousScore >= 40 ? 'bg-orange-900/15 border-orange-400/30 hover:bg-orange-900/25 shadow-orange-500/10' :\n              'bg-yellow-900/15 border-yellow-400/30 hover:bg-yellow-900/25 shadow-yellow-500/10'\n            }`}>\n              <div className=\"text-sm text-white/90 truncate max-w-[140px] font-medium\">\n                {connection.displayName || 'Unknown User'}\n              </div>\n              <div className={`text-base font-black px-3 py-1 rounded-lg ${\n                connection.suspiciousScore >= 70 ? 'text-red-200 bg-red-500/20' :\n                connection.suspiciousScore >= 40 ? 'text-orange-200 bg-orange-500/20' :\n                'text-yellow-200 bg-yellow-500/20'\n              }`}>\n                {connection.suspiciousScore.toFixed(0)}% risk\n              </div>\n            </div>\n          ))}\n          {r4rAnalysis.networkConnections.length > 2 && (\n            <button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setShowAllConnections(!showAllConnections);\n              }}\n              className=\"flex items-center gap-1 text-sm text-white/50 hover:text-white/80 cursor-pointer w-full justify-center mt-2 py-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors\"\n            >\n              {showAllConnections ? (\n                <>\n                  <ChevronUp className=\"w-4 h-4\" />\n                  Show less\n                </>\n              ) : (\n                <>\n                  <ChevronDown className=\"w-4 h-4\" />\n                  +{r4rAnalysis.networkConnections.length - 2} more connections\n                </>\n              )}\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15978},"client/src/components/r4r-risk-details-popup.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  AlertTriangle, \n  Clock, \n  TrendingUp, \n  Calculator,\n  Users,\n  Target,\n  Eye,\n  Info,\n  X\n} from \"lucide-react\";\n\ninterface R4RRiskDetailsPopupProps {\n  analysis: any;\n  trigger?: React.ReactNode;\n}\n\nexport function R4RRiskDetailsPopup({ analysis, trigger }: R4RRiskDetailsPopupProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'Low': return 'text-green-600 bg-green-100 dark:bg-green-900/20';\n      case 'Moderate': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20';\n      case 'High': return 'text-red-600 bg-red-100 dark:bg-red-900/20';\n      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-900/20';\n    }\n  };\n\n  const defaultTrigger = (\n    <Button \n      variant=\"outline\" \n      size=\"sm\" \n      className=\"h-9 px-4 text-sm font-semibold border-2 border-red-400/30 text-red-300 hover:bg-red-500/10 hover:border-red-400/50 dark:border-red-600/40 dark:text-red-400 dark:hover:bg-red-500/20 transition-all duration-300 rounded-lg shadow-lg hover:shadow-red-500/20 min-h-[44px]\"\n      onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setIsOpen(true);\n      }}\n    >\n      <Eye className=\"h-4 w-4 mr-2\" />\n      View Details\n    </Button>\n  );\n\n  if (!analysis?.scoreBreakdown) {\n    return null;\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto backdrop-blur-2xl bg-white/95 dark:bg-gray-900/95 border-2 border-white/20 shadow-2xl\">\n        <DialogHeader className=\"relative\">\n          <DialogTitle className=\"flex items-center gap-3 text-xl\">\n            <AlertTriangle className=\"h-6 w-6 text-red-500\" />\n            High Risk R4R Analysis Details\n            <Badge className={`ml-2 px-3 py-1 text-sm font-semibold ${getRiskColor(analysis.riskLevel)}`}>\n              {analysis.riskLevel} Risk\n            </Badge>\n          </DialogTitle>\n          {/* Enhanced close button */}\n          <button\n            onClick={() => setIsOpen(false)}\n            className=\"absolute top-0 right-0 p-2 rounded-full bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 transition-all duration-200 group min-h-[44px] min-w-[44px] flex items-center justify-center\"\n          >\n            <X className=\"h-5 w-5 text-gray-500 group-hover:text-gray-700 dark:text-gray-400 dark:group-hover:text-gray-200\" />\n          </button>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Score Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Calculator className=\"h-5 w-5\" />\n                Score Calculation Breakdown\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-red-50 dark:bg-red-950/20 p-4 rounded-lg border border-red-200 dark:border-red-800\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-red-600 mb-2\">\n                    {analysis.r4rScore.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-red-700 dark:text-red-400 font-medium\">\n                    Final R4R Score\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-900/50 rounded-lg\">\n                  <span className=\"text-sm font-medium\">Base Score (Reciprocal Rate)</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">{analysis.scoreBreakdown.cappedBaseScore}%</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {analysis.scoreBreakdown.baseScoreDescription}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-900/50 rounded-lg\">\n                  <span className=\"text-sm font-medium\">Volume Multiplier</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">{analysis.scoreBreakdown.volumeMultiplier}x</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {analysis.scoreBreakdown.volumeDescription}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-900/50 rounded-lg\">\n                  <span className=\"text-sm font-medium\">Account Age Factor</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">{analysis.scoreBreakdown.accountAgeMultiplier}x</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {analysis.scoreBreakdown.accountAgeDescription}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center p-3 bg-red-50 dark:bg-red-950/20 rounded-lg border border-red-200 dark:border-red-800\">\n                  <span className=\"text-sm font-medium\">Time Penalty</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold text-red-600\">+{analysis.scoreBreakdown.timePenalty}</div>\n                    <div className=\"text-xs text-red-500\">\n                      {analysis.scoreBreakdown.timePenaltyDescription}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <div className=\"text-sm font-mono bg-gray-100 dark:bg-gray-800 p-3 rounded-lg\">\n                  <div className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Calculation Flow:</div>\n                  <div className=\"text-gray-600 dark:text-gray-400\">\n                    {analysis.scoreBreakdown.calculationFlow}\n                  </div>\n                  <div className=\"text-gray-600 dark:text-gray-400 mt-1\">\n                    {analysis.scoreBreakdown.finalCalculation}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Key Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Review Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Reviews Received</span>\n                  <span className=\"font-semibold\">{analysis.totalReviewsReceived}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Reviews Given</span>\n                  <span className=\"font-semibold\">{analysis.totalReviewsGiven}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Reciprocal Reviews</span>\n                  <span className=\"font-semibold text-orange-600\">{analysis.reciprocalReviews}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Reciprocal Rate</span>\n                  <span className=\"font-semibold text-red-600\">{analysis.reciprocalPercentage.toFixed(1)}%</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Clock className=\"h-4 w-4\" />\n                  Timing Analysis\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Quick Reciprocals (&lt;30min)</span>\n                  <span className=\"font-semibold text-red-600\">{analysis.quickReciprocalCount}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Quick Reciprocal Rate</span>\n                  <span className=\"font-semibold text-red-600\">{analysis.quickReciprocalPercentage.toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Review Frequency</span>\n                  <span className=\"font-semibold\">{analysis.reviewFrequency.toFixed(1)}/week</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Avg Time Between Reviews</span>\n                  <span className=\"font-semibold\">{analysis.avgTimeBetweenReviews.toFixed(1)}h</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* High R4R Reviewers */}\n          {analysis.highR4RReviewers && analysis.highR4RReviewers.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Users className=\"h-4 w-4 text-red-500\" />\n                  High R4R Reviewers (‚â•70%)\n                  <Badge variant=\"destructive\" className=\"ml-2\">\n                    {analysis.highR4RReviewers.length}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                  {analysis.highR4RReviewers.map((reviewer: any, index: number) => (\n                    <div key={reviewer.userkey} className=\"flex items-center justify-between p-2 rounded border border-red-200 bg-red-50 dark:border-red-900 dark:bg-red-950/20\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-6 h-6 rounded-full bg-red-500 flex items-center justify-center text-white text-xs font-semibold\">\n                          {index + 1}\n                        </div>\n                        <span className=\"text-sm font-medium\">\n                          {reviewer.displayName || 'Unknown User'}\n                        </span>\n                      </div>\n                      <div className=\"text-sm font-bold text-red-600\">\n                        {reviewer.r4rScore.toFixed(1)}%\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Risk Assessment */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-base\">\n                <Target className=\"h-4 w-4\" />\n                Risk Assessment\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Info className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">Risk Indicators:</span>\n                </div>\n                \n                <div className=\"pl-6 space-y-2 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${analysis.reciprocalPercentage > 70 ? 'bg-red-500' : 'bg-green-500'}`}></div>\n                    <span>High reciprocal rate ({analysis.reciprocalPercentage.toFixed(1)}% vs &lt;40% normal)</span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${analysis.quickReciprocalPercentage > 30 ? 'bg-red-500' : 'bg-green-500'}`}></div>\n                    <span>Quick reciprocation pattern ({analysis.quickReciprocalPercentage.toFixed(1)}% within 30min)</span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${analysis.highR4RReviewers?.length > 0 ? 'bg-red-500' : 'bg-green-500'}`}></div>\n                    <span>Connected to {analysis.highR4RReviewers?.length || 0} high-risk reviewers</span>\n                  </div>\n                </div>\n\n                <div className=\"mt-4 p-3 bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg\">\n                  <div className=\"text-sm\">\n                    <span className=\"font-semibold text-amber-700 dark:text-amber-400\">Note:</span>\n                    <span className=\"text-amber-600 dark:text-amber-300 ml-1\">\n                      R4R behavior involves coordinated mutual positive reviews to artificially inflate reputation scores. \n                      High scores indicate potential gaming of the trust system.\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13853},"client/src/components/reviews-pattern-popup.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  MessageSquare, \n  ArrowLeftRight,\n  Clock,\n  Heart,\n  ThumbsDown,\n  AlertTriangle,\n  TrendingUp,\n  X\n} from \"lucide-react\";\n\ninterface ReviewsPatternPopupProps {\n  analysis: any;\n  trigger?: React.ReactNode;\n  currentUser?: {\n    displayName?: string;\n    username?: string;\n    avatarUrl?: string;\n  };\n}\n\nexport function ReviewsPatternPopup({ analysis, trigger, currentUser }: ReviewsPatternPopupProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!analysis) return null;\n\n  const defaultTrigger = (\n    <Button \n      variant=\"outline\" \n      size=\"sm\" \n      className=\"w-full h-7 px-2 text-xs font-medium backdrop-blur-md bg-white/8 border border-white/15 text-white/80 hover:bg-white/15 hover:border-white/25 cursor-pointer transition-all duration-200\"\n      onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setIsOpen(true);\n      }}\n    >\n      <MessageSquare className=\"h-3 w-3 mr-1\" />\n      View Reviews Pattern\n    </Button>\n  );\n\n  const formatDate = (timestamp: string | number) => {\n    try {\n      let date: Date;\n      \n      if (typeof timestamp === 'string') {\n        date = new Date(timestamp);\n      } else if (typeof timestamp === 'number') {\n        date = timestamp > 1000000000000 ? new Date(timestamp) : new Date(timestamp * 1000);\n      } else {\n        return 'Unknown';\n      }\n\n      if (isNaN(date.getTime())) {\n        return 'Unknown';\n      }\n\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n\n      if (diffHours < 1) return 'Just now';\n      if (diffHours < 24) return `${diffHours}h`;\n      if (diffHours < 168) return `${Math.floor(diffHours / 24)}d`;\n      if (diffHours < 720) return `${Math.floor(diffHours / 168)}w`;\n      \n      return `${Math.floor(diffHours / 720)}mo`;\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  const formatTimeGap = (minutes: number) => {\n    if (minutes === 0 || isNaN(minutes)) return 'instantly';\n    if (minutes < 1) return '<1min';\n    if (minutes < 60) return `${Math.round(minutes)}min`;\n    if (minutes < 1440) return `${Math.round(minutes / 60)}h`;\n    return `${Math.round(minutes / 1440)}d`;\n  };\n\n  const getRiskColor = (score: number) => {\n    if (score >= 70) return 'bg-red-500/20 border-red-400/40 text-red-300';\n    if (score >= 40) return 'bg-orange-500/20 border-orange-400/40 text-orange-300';\n    return 'bg-emerald-500/20 border-emerald-400/40 text-emerald-300';\n  };\n\n  const getRiskLabel = (score: number) => {\n    if (score >= 70) return 'High Risk';\n    if (score >= 40) return 'Medium Risk';\n    return 'Low Risk';\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-hidden p-0 border-0 bg-transparent [&>button]:hidden\">\n        <DialogTitle className=\"sr-only\">Review Patterns Analysis</DialogTitle>\n        {/* Compact Glassmorphism Container */}\n        <div className=\"relative backdrop-blur-xl bg-white/5 border border-white/10 rounded-2xl shadow-xl overflow-hidden\">\n          \n          {/* Mobile Optimized Header - Fixed Close Button Layout */}\n          <div className=\"flex justify-between items-start p-4 border-b border-white/10\">\n            {/* Left Content with Proper Spacing */}\n            <div className=\"flex-1 pr-8\">\n              {/* Title Row with Risk Badge */}\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"w-7 h-7 rounded-lg bg-gradient-to-br from-purple-400 to-blue-400 flex items-center justify-center\">\n                  <span className=\"text-white text-sm font-bold\">üìù</span>\n                </div>\n                <span className=\"text-base font-semibold text-white/95\">Review Patterns</span>\n                <div className=\"bg-orange-600 px-3 py-1 rounded-full text-sm font-medium text-white\">\n                  {analysis.r4rScore?.toFixed(0) || 0}% Risk\n                </div>\n              </div>\n              \n              {/* Summary Text Below */}\n              <div className=\"text-gray-400 text-sm\">\n                <span className=\"text-cyan-300 font-bold\">{analysis.allReviews?.length || 0}</span> total reviews\n                {analysis.reciprocalReviews > 0 && (\n                  <span> ‚Ä¢ <span className=\"text-amber-300 font-bold\">{analysis.reciprocalReviews}</span> reciprocal</span>\n                )}\n                {analysis.quickReciprocalCount > 0 && (\n                  <span> ‚Ä¢ <span className=\"text-orange-300 font-bold\">{analysis.quickReciprocalCount}</span> quick</span>\n                )}\n              </div>\n            </div>\n            \n            {/* Close Button - Properly Positioned */}\n            <button \n              onClick={() => setIsOpen(false)}\n              className=\"w-8 h-8 rounded-full hover:bg-gray-700/50 flex items-center justify-center transition-colors duration-200 flex-shrink-0\"\n              style={{ minHeight: '44px', minWidth: '44px' }}\n              aria-label=\"Close modal\"\n            >\n              <X className=\"w-5 h-5 text-gray-400 hover:text-white stroke-2\" />\n            </button>\n          </div>\n\n          {/* Compact Content */}\n          <div className=\"relative p-4\">\n\n            {/* Compact Reviews Display */}\n            <div className=\"space-y-2 max-h-[60vh] overflow-y-auto scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent\">\n              {analysis.allReviews && analysis.allReviews.length > 0 ? (\n                analysis.allReviews.map((reviewItem: any, index: number) => {\n                  \n                  return (\n                    <div key={index} className=\"py-3 border-b border-white/10 last:border-b-0 hover:bg-white/5 rounded-lg px-2 -mx-2 transition-all duration-200 hover:scale-[1.01]\">\n                      \n                      {/* Perfect Mobile Layout */}\n                      <div className=\"flex items-center justify-between w-full gap-3\">\n                        {/* Left Side - Username + Avatar */}\n                        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                          <Avatar className=\"w-6 h-6 border border-white/20 flex-shrink-0\">\n                            {reviewItem.type === 'received' ? (\n                              // Other user gave review to current user\n                              <>\n                                <AvatarImage \n                                  src={reviewItem.otherUser?.avatarUrl || reviewItem.otherUser?.avatar || reviewItem.otherUser?.image} \n                                  alt={reviewItem.otherUser?.displayName || 'User avatar'}\n                                />\n                                <AvatarFallback className=\"bg-emerald-400/20 dark:bg-emerald-500/20 text-emerald-900 dark:text-white text-xs\">\n                                  {(reviewItem.otherUser?.displayName || reviewItem.otherUser?.username || 'A')[0].toUpperCase()}\n                                </AvatarFallback>\n                              </>\n                            ) : (\n                              // Current user gave review to other user\n                              <>\n                                <AvatarImage \n                                  src={currentUser?.avatarUrl} \n                                  alt=\"Your avatar\"\n                                />\n                                <AvatarFallback className=\"bg-gradient-to-br from-blue-400 to-purple-400 text-white text-xs font-bold\">\n                                  You\n                                </AvatarFallback>\n                              </>\n                            )}\n                          </Avatar>\n                          <span className={`text-sm font-medium truncate max-w-[80px] sm:max-w-[120px] ${\n                            reviewItem.type === 'given' \n                              ? 'text-blue-300'\n                              : 'text-white/90'\n                          }`}>\n                            {reviewItem.type === 'received' \n                              ? (reviewItem.otherUser?.displayName || reviewItem.otherUser?.username || 'Anonymous')\n                              : 'You'\n                            }\n                          </span>\n                        </div>\n                        \n                        {/* Center - Arrow + Review Types */}\n                        <div className=\"flex items-center gap-1 flex-shrink-0\">\n                          {/* Show sentiment based on review direction */}\n                          {reviewItem.type === 'received' ? (\n                            // For received reviews: other user ‚Üí current user\n                            <>\n                              <span className={`text-sm font-semibold ${\n                                reviewItem.review?.sentiment === 'positive' ? 'text-emerald-400' : 'text-red-400'\n                              }`}>\n                                {reviewItem.review?.sentiment === 'positive' ? 'positive' : 'negative'}\n                              </span>\n                              \n                              {reviewItem.isReciprocal ? (\n                                <span className=\"text-emerald-400 text-sm font-bold px-1\">‚ü∑</span>\n                              ) : (\n                                <span className=\"text-white/80 text-sm font-bold px-1\">‚Üí</span>\n                              )}\n                              \n                              {/* Reciprocal review sentiment (your response) */}\n                              {reviewItem.reciprocalReview && (\n                                <span className={`text-sm font-semibold ${\n                                  reviewItem.reciprocalReview?.sentiment === 'positive' ? 'text-emerald-400' : 'text-red-400'\n                                }`}>\n                                  {reviewItem.reciprocalReview?.sentiment === 'positive' ? 'positive' : 'negative'}\n                                </span>\n                              )}\n                            </>\n                          ) : (\n                            // For given reviews: current user ‚Üí other user\n                            <>\n                              <span className={`text-sm font-semibold ${\n                                reviewItem.review?.sentiment === 'positive' ? 'text-emerald-400' : 'text-red-400'\n                              }`}>\n                                {reviewItem.review?.sentiment === 'positive' ? 'positive' : 'negative'}\n                              </span>\n                              \n                              <span className=\"text-white/80 text-sm font-bold px-1\">‚Üí</span>\n                            </>\n                          )}\n                        </div>\n                        \n                        {/* Right Side - You Badge */}\n                        <div className=\"flex-shrink-0\">\n                          <span className={`text-sm font-medium px-2 py-1 rounded ${\n                            reviewItem.type === 'received' \n                              ? 'text-blue-300 bg-blue-500/20 text-xs font-bold'\n                              : 'text-white/90 truncate max-w-[80px] sm:max-w-[120px]'\n                          }`}>\n                            {reviewItem.type === 'received' \n                              ? 'You'\n                              : (reviewItem.otherUser?.displayName || reviewItem.otherUser?.username || 'Anonymous')\n                            }\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Compact Timing information for reciprocal reviews */}\n                      {reviewItem.isReciprocal && reviewItem.reciprocalReview && (\n                        <div className=\"mt-2 text-center\">\n                          <div className=\"flex items-center justify-center\">\n                            <span className={`text-sm font-medium px-2 py-1 rounded-md ${\n                              reviewItem.reciprocalReview.timeGap && reviewItem.reciprocalReview.timeGap <= 30\n                                ? 'text-red-200 bg-red-500/20'\n                                : 'text-blue-200 bg-blue-500/20'\n                            }`}>\n                              üìÖ {reviewItem.reciprocalReview.timeGap && reviewItem.reciprocalReview.timeGap <= 30 ? 'Quick' : 'Back'} in {formatTimeGap(reviewItem.reciprocalReview.timeGap || 0)}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })\n              ) : (\n                <div className=\"text-center py-6\">\n                  <span className=\"text-2xl\">üìù</span>\n                  <div className=\"text-sm text-gray-300 mt-2\">No reviews found</div>\n                </div>\n              )}\n            </div>\n\n            {/* Enhanced Coordinated Activity Warning */}\n            {analysis.r4rScore > 30 && (\n              <div className=\"mt-4 pt-4 border-t border-white/10 text-center\">\n                <div className={`p-4 rounded-xl border-2 shadow-lg ${\n                  analysis.r4rScore >= 70 ? 'bg-red-900/30 border-red-400/60 shadow-red-500/25 animate-pulse' :\n                  analysis.r4rScore >= 40 ? 'bg-red-900/30 border-orange-400/60 shadow-orange-500/25 animate-pulse' :\n                  'bg-yellow-900/20 border-yellow-400/40 shadow-yellow-500/15'\n                }`}>\n                  <div className={`text-lg font-black ${\n                    analysis.r4rScore >= 70 ? 'text-red-200' :\n                    analysis.r4rScore >= 40 ? 'text-orange-200' :\n                    'text-yellow-200'\n                  }`}>\n                    ‚ö†Ô∏è {analysis.r4rScore >= 70 ? 'COORDINATED ACTIVITY DETECTED' :\n                     analysis.r4rScore >= 40 ? 'COORDINATED ACTIVITY WARNING' :\n                     'MUTUAL REVIEW ACTIVITY'}\n                  </div>\n                  <div className=\"text-sm text-white/70 mt-1\">\n                    {analysis.r4rScore >= 70 ? 'Strong indicators of review farming behavior' :\n                     analysis.r4rScore >= 40 ? 'Elevated mutual review activity detected' :\n                     'Moderate mutual review patterns observed'}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14872},"client/src/components/search-suggestions-below.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { User, Crown, Sparkles, Shield, Hash, CheckCircle } from 'lucide-react';\nimport { SiFarcaster } from 'react-icons/si';\n// Theme provider removed - dark mode only\n\ninterface SearchSuggestion {\n  userkey: string;\n  displayName: string;\n  username: string;\n  avatarUrl?: string;\n  score: number;\n  description?: string;\n  farcasterUsername?: string;\n  hasEthosAccount?: boolean;\n  status?: string;\n  xpTotal?: number;\n  xpStreakDays?: number;\n  profileId?: number;\n}\n\ninterface SearchSuggestionsProps {\n  query: string;\n  onSelect: (suggestion: SearchSuggestion) => void;\n  isVisible: boolean;\n  onVisibilityChange: (visible: boolean) => void;\n  farcasterMode?: boolean;\n  inputRef?: React.RefObject<HTMLInputElement>;\n}\n\nexport function SearchSuggestionsBelow({ \n  query, \n  onSelect, \n  isVisible, \n  onVisibilityChange, \n  farcasterMode = false,\n  inputRef\n}: SearchSuggestionsProps) {\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [showDropdown, setShowDropdown] = useState(false);\n  // Dark mode only - no theme toggle needed\n  \n  // Use appropriate API based on mode with optimized caching and fast retry\n  const globalSuggestions = useQuery({\n    queryKey: ['/api/search-suggestions', query],\n    queryFn: () => fetch(`/api/search-suggestions?q=${encodeURIComponent(query)}`).then(res => res.json()),\n    enabled: !farcasterMode && isVisible && query.length >= 2, // Reduced from 3 to 2 for faster suggestions\n    staleTime: 2 * 60 * 1000, // Reduced to 2 minutes for fresher data\n    gcTime: 5 * 60 * 1000, // Reduced memory cache\n    retry: 1, // Quick retry instead of multiple attempts\n    retryDelay: 100, // Fast retry delay\n    refetchOnWindowFocus: false, // Prevent unnecessary refetches\n  });\n  \n  const farcasterSuggestions = useQuery({\n    queryKey: ['/api/farcaster-suggestions', query],\n    queryFn: () => fetch(`/api/farcaster-suggestions?q=${encodeURIComponent(query)}`).then(res => res.json()),\n    enabled: farcasterMode && isVisible && query.length >= 1, // Reduced from 2 to 1 for faster response\n    staleTime: 2 * 60 * 1000, // Reduced to 2 minutes for fresher data  \n    gcTime: 5 * 60 * 1000, // Reduced memory cache\n    retry: 1, // Quick retry instead of multiple attempts\n    retryDelay: 100, // Fast retry delay\n    refetchOnWindowFocus: false, // Prevent unnecessary refetches\n  });\n  \n  const { data, isLoading, error } = farcasterMode ? farcasterSuggestions : globalSuggestions;\n\n  // Mobile detection\n  const isMobile = () => window.innerWidth < 768;\n\n  // Show/hide logic - faster display with immediate response\n  useEffect(() => {\n    if (!isVisible) {\n      setShowDropdown(false);\n      return;\n    }\n\n    // Show immediately for fast typing scenarios\n    setShowDropdown(true);\n  }, [isVisible, query]);\n\n  // Click outside to close\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        onVisibilityChange(false);\n      }\n    };\n\n    if (showDropdown) {\n      document.addEventListener('mousedown', handleClickOutside, { passive: true });\n      document.addEventListener('touchstart', handleClickOutside, { passive: true });\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside);\n        document.removeEventListener('touchstart', handleClickOutside);\n      };\n    }\n  }, [showDropdown, onVisibilityChange]);\n\n  const handleSelect = (suggestion: SearchSuggestion) => {\n    onSelect(suggestion);\n    onVisibilityChange(false);\n  };\n\n  const suggestions = data?.data || [];\n  const minLength = farcasterMode ? 1 : 2; // Reduced minimum lengths for faster response\n  \n  if (!isVisible || query.length < minLength || !showDropdown) {\n    return null;\n  }\n\n  const getTierInfo = (score: number) => {\n    if (score >= 2600) return { tier: 'renowned', animation: 'excellent', status: 'renowned', color: 'yellow' };\n    if (score >= 2400) return { tier: 'revered', animation: 'excellent', status: 'revered', color: 'pink' };\n    if (score >= 2200) return { tier: 'distinguished', animation: 'excellent', status: 'distinguished', color: 'indigo' };\n    if (score >= 2000) return { tier: 'exemplary', animation: 'excellent', status: 'exemplary', color: 'purple' };\n    if (score >= 1800) return { tier: 'reputable', animation: 'good', status: 'reputable', color: 'emerald' };\n    if (score >= 1600) return { tier: 'established', animation: 'good', status: 'established', color: 'green' };\n    if (score >= 1400) return { tier: 'known', animation: 'good', status: 'known', color: 'cyan' };\n    if (score >= 1200) return { tier: 'neutral', animation: 'none', status: 'neutral', color: 'blue' };\n    if (score >= 800) return { tier: 'questionable', animation: 'none', status: 'questionable', color: 'orange' };\n    return { tier: 'untrusted', animation: 'none', status: 'untrusted', color: 'red' };\n  };\n\n  return (\n    <div\n      ref={dropdownRef}\n      className={`search-suggestions-dropdown absolute top-full left-0 right-0 mt-2 rounded-2xl overflow-hidden shadow-2xl border border-gray-700 dark:border-gray-700 light:border-gray-300 shadow-2xl shadow-black/40 dark:shadow-black/40 light:shadow-gray-400/20 ${isMobile() ? 'below-search-mobile' : 'below-search-desktop'}`}\n      style={{\n        maxHeight: isMobile() ? '400px' : '500px',\n        transform: 'translate3d(0,0,0)',\n        backdropFilter: 'blur(8px) saturate(150%)',\n        WebkitBackdropFilter: 'blur(8px) saturate(150%)',\n        background: 'var(--glass-bg)',\n        backgroundColor: 'var(--glass-bg)',\n        isolation: 'isolate',\n        willChange: 'backdrop-filter',\n        position: 'absolute',\n        zIndex: 1000,\n      }}\n    >\n      {isLoading && (\n        <div className=\"relative flex items-center justify-center p-6\">\n          <div className=\"flex items-center gap-3\">\n            <div className={`w-4 h-4 border-2 rounded-full animate-spin ${\n              farcasterMode \n                ? 'border-purple-300/60 border-t-purple-200 dark:border-purple-400/50 dark:border-t-purple-100' \n                : 'border-blue-300/60 border-t-blue-200 dark:border-blue-400/50 dark:border-t-blue-100'\n            }`}></div>\n            <span className={`text-sm font-medium ${\n              farcasterMode \n                ? 'text-white dark:text-white light:text-slate-700' \n                : 'text-white dark:text-white light:text-slate-700'\n            }`}>\n              {farcasterMode ? 'Searching Farcaster...' : 'Searching...'}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"relative p-4 text-center\">\n          <span className=\"text-red-200 dark:text-red-200 light:text-red-600 text-sm font-medium bg-red-500/20 dark:bg-red-500/15 light:bg-red-100 px-3 py-2 rounded-lg\">Search failed. Please try again.</span>\n        </div>\n      )}\n\n      {!isLoading && !error && suggestions.length === 0 && (\n        <div className=\"relative p-6 text-center\">\n          <div className=\"flex flex-col items-center gap-3\">\n            <User className={`h-7 w-7 ${farcasterMode ? 'text-white dark:text-white light:text-slate-600' : 'text-white dark:text-white light:text-slate-600'}`} />\n            <div className=\"flex flex-col items-center gap-1\">\n              <span className={`text-sm font-medium ${\n                farcasterMode ? 'text-white dark:text-white' : 'text-white dark:text-white'\n              }`}>\n                {farcasterMode ? 'No Farcaster users found' : 'No users found'}\n              </span>\n              {farcasterMode && (\n                <span className=\"text-xs text-white/70 dark:text-white/70 mt-1\">\n                  Try: newtonhere, dwr, vitalik\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {!isLoading && !error && suggestions.length > 0 && (\n        <div className={`relative overflow-y-auto ${isMobile() ? 'max-h-[320px]' : 'max-h-[400px]'}`}>\n          {suggestions.map((suggestion: SearchSuggestion, index: number) => {\n            const { tier, animation: tierAnimation, status, color } = getTierInfo(suggestion.score);\n            \n            return (\n              <div \n                key={`${suggestion.userkey}-${index}`}\n                onClick={() => handleSelect(suggestion)}\n                className={`\n                  relative flex items-center cursor-pointer transition-all duration-300 group \n                  min-h-[70px] p-4 border-b border-gray-700 last:border-b-0\n                  hover:bg-gray-700/30 hover:border-gray-600/50 active:bg-gray-700/50\n                  ${farcasterMode ? 'hover:bg-blue-600/20 active:bg-blue-600/30' : ''}\n                  ${tierAnimation === 'excellent' ? 'tier-excellent' : \n                    tierAnimation === 'good' ? 'tier-good' : ''\n                  }\n                `}\n                style={{ \n                  touchAction: 'manipulation'\n                }}\n              >\n                {/* Enhanced hover overlay */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                \n                {/* Larger Avatar with platform indicator */}\n                <div className=\"relative flex-shrink-0 mr-4\">\n                  <Avatar className={`h-12 w-12 ring-2 transition-all duration-300 ${\n                    farcasterMode\n                      ? 'ring-blue-500/40 group-hover:ring-blue-400/60'\n                      : 'ring-gray-400/30 group-hover:ring-gray-300/50'\n                  } ${\n                    tierAnimation === 'excellent' ? 'ring-amber-500/60 group-hover:ring-amber-400/80' :\n                    tierAnimation === 'good' ? 'ring-emerald-500/50 group-hover:ring-emerald-400/70' : ''\n                  }`}>\n                    <AvatarImage \n                      src={suggestion.avatarUrl || ''} \n                      alt={suggestion.displayName || suggestion.username}\n                      crossOrigin=\"anonymous\"\n                      loading=\"lazy\"\n                    />\n                    <AvatarFallback className=\"text-white flex items-center justify-center text-lg font-bold bg-gradient-to-br from-gray-600/80 to-gray-800/70 border border-white/20\">\n                      {suggestion.displayName ? \n                        suggestion.displayName.split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2) :\n                        suggestion.username ? \n                          suggestion.username.slice(0, 2).toUpperCase() :\n                          <User className=\"h-5 w-5 text-white/80\" />\n                      }\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  {/* Platform indicator */}\n                  <div className={`absolute -bottom-1 -right-1 w-6 h-6 rounded-full flex items-center justify-center border-2 border-gray-800 ${\n                    farcasterMode ? 'bg-blue-600' : 'bg-gray-600'\n                  }`}>\n                    {farcasterMode ? (\n                      <SiFarcaster className=\"w-3 h-3 text-white\" />\n                    ) : (\n                      <Shield className=\"w-3 h-3 text-white\" />\n                    )}\n                  </div>\n                </div>\n\n                {/* Enhanced User Info with better hierarchy */}\n                <div className=\"flex-1 min-w-0 relative z-10\">\n                  {/* Display name with tier indicators */}\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <h4 className=\"font-bold text-lg text-white drop-shadow-lg truncate group-hover:text-white transition-colors\">\n                      {suggestion.displayName || suggestion.username}\n                    </h4>\n                    {tierAnimation === 'excellent' && (\n                      <Crown className=\"h-4 w-4 text-amber-300 animate-pulse flex-shrink-0 drop-shadow-lg\" />\n                    )}\n                    {tierAnimation === 'good' && (\n                      <Sparkles className=\"h-4 w-4 text-emerald-300 flex-shrink-0 drop-shadow-lg\" />\n                    )}\n                  </div>\n                  \n                  {/* Username handle */}\n                  <p className=\"text-sm font-medium text-white/70 drop-shadow-sm mb-2 truncate\">\n                    @{suggestion.username}\n                  </p>\n                  \n                  {/* Trust score with context and icon */}\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4 text-white/60\" />\n                    <span className=\"text-sm font-semibold text-white/80\">\n                      Trust: \n                    </span>\n                    <span className={`text-sm font-bold ${\n                      tierAnimation === 'excellent' \n                        ? 'text-amber-300' \n                        : tierAnimation === 'good' \n                          ? 'text-emerald-300'\n                          : farcasterMode \n                            ? 'text-blue-300' \n                            : 'text-blue-300'\n                    }`}>\n                      {suggestion.score}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Status indicator with colored dot */}\n                <div className=\"text-right flex-shrink-0 ml-4 relative z-10\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                      color === 'green' ? 'bg-green-500 shadow-lg shadow-green-500/30' :\n                      color === 'emerald' ? 'bg-emerald-500 shadow-lg shadow-emerald-500/30' :\n                      color === 'yellow' ? 'bg-yellow-500 shadow-lg shadow-yellow-500/30' :\n                      color === 'orange' ? 'bg-orange-500 shadow-lg shadow-orange-500/30' :\n                      'bg-red-500 shadow-lg shadow-red-500/30'\n                    }`}></div>\n                    <div className={`text-xs font-bold uppercase tracking-wider leading-none transition-colors ${\n                      color === 'green' ? 'text-green-300' :\n                      color === 'emerald' ? 'text-emerald-300' :\n                      color === 'yellow' ? 'text-yellow-300' :\n                      color === 'orange' ? 'text-orange-300' :\n                      'text-red-300'\n                    }`}>\n                      {status}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14883},"client/src/components/trust-score-display.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info, ExternalLink, Shield, TrendingUp, Award } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\n// ScorePulse moved to search results only\nimport { useUserProfile, useTrustScore, useUserStats, useEnhancedProfile } from \"@/hooks/use-ethos-api\";\nimport { getTrustLevelBadgeColor } from \"@/lib/ethos-client\";\nimport { formatNumber, formatWeeklyGain } from \"@/lib/number-utils\";\n\nexport function TrustScoreDisplay() {\n  const { user } = useUserProfile();\n  const [animatedScore, setAnimatedScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Get real-time trust score and user statistics\n  const { data: scoreData } = useTrustScore(\n    user?.userkeys?.[0] || '', \n    !!user\n  );\n  \n  const { data: statsData } = useUserStats(user?.userkeys?.[0]);\n  const { data: enhancedData } = useEnhancedProfile(user?.userkeys?.[0]);\n\n  const score = (scoreData as any)?.success ? (scoreData as any).data?.score || user?.score || 0 : user?.score || 0;\n  const level = (scoreData as any)?.success ? (scoreData as any).data?.level || 'Unknown' : 'Unknown';\n  \n  // Use real stats if available, otherwise fallback to user stats\n  const realStats = (statsData as any)?.success ? (statsData as any).data : user?.stats;\n  \n  // Use enhanced profile for XP and social data\n  const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n  \n  // FAST STATUS DETECTION - Use immediate API response\n  \n  // Get real XP metrics from enhanced profile or fallback to user data\n  const xpTotal = enhancedProfile?.xpTotal || user?.xpTotal || 0;\n  const xpStreakDays = enhancedProfile?.xpStreakDays || user?.xpStreakDays || 0;\n  const leaderboardPosition = enhancedProfile?.leaderboardPosition || (user as any)?.leaderboardPosition;\n  const weeklyXpGain = enhancedProfile?.weeklyXpGain || null;\n  \n  // Check if enhanced profile has loaded successfully\n  const hasEnhancedData = !!(enhancedData as any)?.success;\n  \n  // STATUS SYSTEM - Based on API Response\n  function getStatusInfo() {\n    if (!user) return { status: 'unknown', color: '#6b7280', text: 'Unknown' };\n    \n    // Use enhanced profile data for most accurate status\n    const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n    const actualStatus = enhancedProfile?.status || user.status;\n    const actualProfileId = enhancedProfile?.profileId ?? user.profileId;\n    \n    // Simple status logic based on API data - treat profileId 0 or null as no profile\n    const hasNoProfile = !actualProfileId || actualProfileId === 0;\n    \n    if (hasNoProfile && actualStatus === 'INACTIVE') {\n      return { status: 'needs_invite', color: '#ef4444', text: 'Needs Invite' };\n    }\n    if (hasNoProfile && (actualStatus === null || actualStatus === 'UNINITIALIZED')) {\n      return { status: 'needs_invite', color: '#ef4444', text: 'Needs Invite' };\n    }\n    if (actualStatus === 'ACTIVE') {\n      return { status: 'active', color: '#10b981', text: 'Active' };\n    }\n    if (actualStatus === 'INACTIVE') {\n      return { status: 'inactive', color: '#eab308', text: 'Inactive' };\n    }\n    if (actualStatus === 'UNINITIALIZED') {\n      return { status: 'uninitialized', color: '#9333ea', text: 'Uninitialized' };\n    }\n    \n    return { status: 'unknown', color: '#6b7280', text: 'Unknown' };\n  }\n  \n  const statusInfo = getStatusInfo();\n  \n  // Force re-render when enhanced profile status changes\n  useEffect(() => {\n    // Status is now loaded immediately from V2 API response - no logging needed\n  }, [enhancedProfile?.status]);\n  // STATUS COLORS - Based on status response\n  const statusColors: { [key: string]: { ring: string; bg: string; text: string } } = {\n    active: { ring: '#10b981', bg: 'bg-green-100 dark:bg-green-900/30', text: 'text-green-700 dark:text-green-300' },\n    inactive: { ring: '#eab308', bg: 'bg-yellow-100 dark:bg-yellow-900/30', text: 'text-yellow-700 dark:text-yellow-300' },\n    needs_invite: { ring: '#ef4444', bg: 'bg-red-100 dark:bg-red-900/30', text: 'text-red-700 dark:text-red-300' },\n    uninitialized: { ring: '#9333ea', bg: 'bg-purple-100 dark:bg-purple-900/30', text: 'text-purple-700 dark:text-purple-300' },\n    unknown: { ring: '#6b7280', bg: 'bg-gray-100 dark:bg-gray-900/30', text: 'text-gray-700 dark:text-gray-300' }\n  };\n\n  // Smooth score animation with loading effect\n  useEffect(() => {\n    if (score > 0) {\n      setIsLoading(true);\n      const duration = 1500; // Moderate animation duration\n      const startTime = Date.now();\n      const startScore = 0;\n\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n        \n        // Smooth ease-out animation\n        const easeOut = 1 - Math.pow(1 - progress, 3);\n        setAnimatedScore(Math.round(startScore + (score - startScore) * easeOut));\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          setIsLoading(false);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    }\n  }, [score]);\n\n  if (!user) return null;\n\n  const totalReviews = realStats?.review?.received?.positive + \n                      realStats?.review?.received?.neutral + \n                      realStats?.review?.received?.negative || 0;\n\n  return (\n    <div className=\"glass-profile-section animate-slide-up\" style={{ animationDelay: '0.1s' }}>\n      {/* Glass Trust Score Card */}\n      <div className=\"liquid-glass relative\">\n        {/* Floating orbs for trust score display */}\n        <div className=\"absolute top-4 right-5 w-5 h-5 bg-gradient-to-r from-orange-400/30 to-red-400/20 rounded-full floating-orb floating-orb-1\"></div>\n        <div className=\"absolute bottom-5 left-4 w-6 h-6 bg-gradient-to-r from-cyan-400/25 to-sky-400/15 rounded-full floating-orb floating-orb-2\"></div>\n        <div className=\"absolute top-1/2 left-2 w-3 h-3 bg-gradient-to-r from-lime-400/30 to-green-400/20 rounded-full floating-orb floating-orb-3\"></div>\n        \n        <div className=\"relative z-10\">\n          {/* Glass Profile Header */}\n          <div className=\"glass-profile-header\">\n            <div className=\"glass-avatar-container\">\n              {/* STATUS RING - Based on API Response */}\n              <div className=\"glass-status-ring\" \n                   style={{ \n                     background: `linear-gradient(45deg, ${statusColors[statusInfo.status]?.ring || statusColors.unknown.ring}, ${statusColors[statusInfo.status]?.ring || statusColors.unknown.ring}80)`\n                   }}></div>\n              <img \n                src={user.avatarUrl || 'https://ethosradar.com/placeholder-avatar.png'} \n                alt={user.displayName}\n                className=\"glass-profile-avatar\"\n              />\n              {/* STATUS BADGE - Based on API Response */}\n              <div className=\"glass-status-badge\">\n                {statusInfo.status === 'active' ? 'üî•' : \n                 statusInfo.status === 'inactive' ? 'üí§' : \n                 statusInfo.status === 'needs_invite' ? 'üõ∏' : \n                 statusInfo.status === 'uninitialized' ? '‚öôÔ∏è' : '‚ùì'}\n              </div>\n            </div>\n            \n            <div className=\"flex-1\">\n              <h2 className=\"glass-profile-name\">\n                {user.displayName}\n              </h2>\n              <div className=\"glass-profile-details\">\n                <span className=\"glass-username\">\n                  @{user.username || 'username'}\n                </span>\n                {(user as any).primaryName && (\n                  <div className=\"glass-primary-badge\">\n                    {(user as any).primaryName}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Glass Score Display Section */}\n          <div className=\"glass-score-section\">\n            <div className=\"glass-score-details\">\n              <h4 className=\"glass-score-label\">Trust Score</h4>\n              <div className=\"glass-score-content\">\n                <span className=\"glass-score-number\">\n                  {animatedScore}\n                </span>\n                {/* STATUS SYSTEM - Based on API Response */}\n                <div className=\"glass-status-indicator\">\n                  ‚óè {statusInfo.text}\n                </div>\n              </div>\n            </div>\n            \n            {/* Animated Progress Ring */}\n            <div className=\"relative\">\n              <svg className=\"w-20 h-20 transform -rotate-90\" viewBox=\"0 0 80 80\">\n                {/* Background Circle */}\n                <circle\n                  cx=\"40\"\n                  cy=\"40\"\n                  r=\"30\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"6\"\n                  fill=\"transparent\"\n                  className=\"text-gray-200 dark:text-gray-700\"\n                />\n                {/* Progress Circle */}\n                <circle\n                  cx=\"40\"\n                  cy=\"40\"\n                  r=\"30\"\n                  stroke={statusColors[statusInfo.status]?.ring || statusColors.unknown.ring}\n                  strokeWidth=\"6\"\n                  fill=\"transparent\"\n                  strokeDasharray={2 * Math.PI * 30}\n                  strokeDashoffset={2 * Math.PI * 30 - (Math.min(animatedScore, 3000) / 3000) * (2 * Math.PI * 30)}\n                  strokeLinecap=\"round\"\n                  className=\"transition-all duration-1000 ease-out\"\n                  style={{\n                    filter: `drop-shadow(0 0 8px ${statusColors[statusInfo.status]?.ring || statusColors.unknown.ring}40)`\n                  }}\n                />\n              </svg>\n              {/* Center Percentage */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <span className=\"text-xs font-bold text-muted-foreground\">\n                  {Math.round((Math.min(animatedScore, 3000) / 3000) * 100)}%\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Metrics Row */}\n          {realStats && (\n            <div className=\"flex justify-between items-center mb-4 p-3\" style={{\n              background: 'var(--glass-bg)',\n              backdropFilter: 'var(--glass-blur)',\n              border: '1px solid var(--glass-border)',\n              borderRadius: '12px'\n            }}>\n              <div className=\"flex flex-col items-center space-y-1 flex-1\">\n                <div className=\"flex items-center space-x-1\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-xs font-medium text-muted-foreground\">RANK</span>\n                </div>\n                {!enhancedProfile && !leaderboardPosition ? (\n                  <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-5 w-12 rounded\"></div>\n                ) : (\n                  <span className=\"text-lg font-bold text-foreground\">#{leaderboardPosition || 'N/A'}</span>\n                )}\n              </div>\n              \n              <div className=\"w-px h-8 bg-gray-200 dark:bg-gray-700\"></div>\n              \n              <div className=\"flex flex-col items-center space-y-1 flex-1\">\n                <div className=\"flex items-center space-x-1\">\n                  <Award className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"text-xs font-medium text-muted-foreground\">XP</span>\n                </div>\n                {!enhancedProfile && !xpTotal ? (\n                  <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-5 w-16 rounded\"></div>\n                ) : (\n                  <span className=\"text-lg font-bold text-foreground\">{formatNumber(xpTotal)}</span>\n                )}\n                {weeklyXpGain && weeklyXpGain > 0 && (\n                  <span className=\"text-xs font-medium text-green-500 animate-pulse\">\n                    {formatWeeklyGain(weeklyXpGain)} XP\n                  </span>\n                )}\n              </div>\n              \n              <div className=\"w-px h-8 bg-gray-200 dark:bg-gray-700\"></div>\n              \n              <div className=\"flex flex-col items-center space-y-1 flex-1\">\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"text-sm\">üî•</span>\n                  <span className=\"text-xs font-medium text-muted-foreground\">STREAK</span>\n                </div>\n                {!enhancedProfile && !xpStreakDays ? (\n                  <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-5 w-8 rounded\"></div>\n                ) : (\n                  <span className=\"text-lg font-bold text-foreground\">{xpStreakDays}d</span>\n                )}\n              </div>\n            </div>\n          )}\n          \n\n\n          {user.description && (\n            <div className=\"mt-4 p-3 bg-white/60 dark:bg-gray-800/40 rounded-xl border border-gray-200/50 dark:border-gray-700/50 backdrop-blur-sm\">\n              <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                {user.description}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Score Pulse removed - now only in search results */}\n    </div>\n  );\n}","size_bytes":13472},"client/src/components/user-profile-view.tsx":{"content":"import { useEffect, useState, useMemo, memo } from \"react\";\nimport { ArrowLeft, ExternalLink, Share2, Crown, Award, Zap, Shield, AlertTriangle, TrendingUp, Users, MessageSquare, Star, Calendar, Activity, BarChart3, Network, Clock, ArrowDownLeft, ArrowUpRight, ArrowUp, ArrowDown, X } from \"lucide-react\";\nimport { SiX, SiDiscord, SiFarcaster, SiTelegram } from \"react-icons/si\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTrustScore, useUserStats, useEnhancedProfile, useVouchActivities } from \"@/hooks/use-ethos-api\";\nimport { useR4RAnalysis } from \"@/hooks/use-r4r-analysis\";\nimport { useDashboardReviews } from \"@/hooks/use-dashboard-reviews\";\nimport { useAttestations, type SocialAttestation } from \"@/hooks/use-attestations\";\nimport { useWeeklyActivities } from \"@/hooks/use-weekly-activities\";\nimport { useExchangeRates, getEthUsdRate } from \"@/hooks/use-exchange-rates\";\nimport { getVouchStats } from \"@/lib/vouch-utils\";\nimport { R4RDataSection } from \"./r4r-data-section\";\nimport { NextRankProgress } from \"./next-rank-progress\";\n\n\nimport { FarcasterShareButton } from \"./farcaster-share-button\";\nimport { formatNumber, formatXP, formatWeeklyGain, formatCurrency } from \"@/lib/number-utils\";\nimport { formatVouchAmount, formatVouchAmountWithUsd, calculateUsdValue } from \"@/lib/vouch-utils\";\n// Theme provider removed - dark mode only\n\n\ninterface UserProfileViewProps {\n  user: any;\n  onBackToSearch: () => void;\n  onUserSearch?: (userData: any) => void;\n  searchMode?: 'global' | 'farcaster';\n}\n\n// Official Ethos Protocol tier system (updated 2025 ranges)\nconst getTierInfo = (score: number) => {\n  if (score >= 2600) return { \n    icon: Crown, \n    tier: 'Renowned',\n    shortTier: 'REN',\n    colors: {\n      bg: 'from-yellow-500/20 to-amber-500/20',\n      border: 'border-yellow-400/30',\n      text: 'text-yellow-300',\n      glow: 'shadow-yellow-500/20'\n    }\n  };\n  if (score >= 2400) return { \n    icon: Crown, \n    tier: 'Revered',\n    shortTier: 'REV',\n    colors: {\n      bg: 'from-pink-500/20 to-rose-500/20',\n      border: 'border-pink-400/30',\n      text: 'text-pink-300',\n      glow: 'shadow-pink-500/20'\n    }\n  };\n  if (score >= 2200) return { \n    icon: Crown, \n    tier: 'Distinguished',\n    shortTier: 'DIS',\n    colors: {\n      bg: 'from-indigo-500/20 to-blue-500/20',\n      border: 'border-indigo-400/30',\n      text: 'text-indigo-300',\n      glow: 'shadow-indigo-500/20'\n    }\n  };\n  if (score >= 2000) return { \n    icon: Crown, \n    tier: 'Exemplary',\n    shortTier: 'EXC',\n    colors: {\n      bg: 'from-purple-500/20 to-violet-500/20',\n      border: 'border-purple-400/30',\n      text: 'text-purple-300',\n      glow: 'shadow-purple-500/20'\n    }\n  };\n  if (score >= 1800) return { \n    icon: Award, \n    tier: 'Reputable',\n    shortTier: 'REP',\n    colors: {\n      bg: 'from-emerald-500/20 to-teal-500/20',\n      border: 'border-emerald-400/30',\n      text: 'text-emerald-300',\n      glow: 'shadow-emerald-500/20'\n    }\n  };\n  if (score >= 1600) return { \n    icon: Award, \n    tier: 'Established',\n    shortTier: 'EST',\n    colors: {\n      bg: 'from-green-500/20 to-emerald-500/20',\n      border: 'border-green-400/30',\n      text: 'text-green-300',\n      glow: 'shadow-green-500/20'\n    }\n  };\n  if (score >= 1400) return { \n    icon: Zap, \n    tier: 'Known',\n    shortTier: 'KNO',\n    colors: {\n      bg: 'from-cyan-500/20 to-blue-500/20',\n      border: 'border-cyan-400/30',\n      text: 'text-cyan-300',\n      glow: 'shadow-cyan-500/20'\n    }\n  };\n  if (score >= 1200) return { \n    icon: Zap, \n    tier: 'Neutral',\n    shortTier: 'NEU',\n    colors: {\n      bg: 'from-blue-500/20 to-cyan-500/20',\n      border: 'border-blue-400/30',\n      text: 'text-blue-300',\n      glow: 'shadow-blue-500/20'\n    }\n  };\n  if (score >= 800) return { \n    icon: AlertTriangle, \n    tier: 'Questionable',\n    shortTier: 'QUE',\n    colors: {\n      bg: 'from-amber-500/20 to-orange-500/20',\n      border: 'border-amber-400/30',\n      text: 'text-amber-300',\n      glow: 'shadow-amber-500/20'\n    }\n  };\n  return { \n    icon: Shield, \n    tier: 'Untrusted',\n    shortTier: 'UNT',\n    colors: {\n      bg: 'from-gray-500/20 to-slate-500/20',\n      border: 'border-gray-400/30',\n      text: 'text-gray-400',\n      glow: 'shadow-gray-500/20'\n    }\n  };\n};\n\n// Platform info functionality removed as requested by user\n\nexport function UserProfileView({ user, onBackToSearch, onUserSearch, searchMode = 'global' }: UserProfileViewProps) {\n  const [animatedScore, setAnimatedScore] = useState(0);\n  const [activeView, setActiveView] = useState<'overview' | 'activity' | 'network'>('overview');\n  const [showVouchModal, setShowVouchModal] = useState<{ type: 'received' | 'given' | null }>({ type: null });\n  \n  // Dark mode only - no theme toggle needed\n  \n  // Get real-time data\n  const { data: scoreData } = useTrustScore(user?.userkeys?.[0] || '', !!user);\n  const { data: statsData } = useUserStats(user?.userkeys?.[0]);\n  const { data: enhancedData, isLoading: isEnhancedQueryLoading } = useEnhancedProfile(user?.userkeys?.[0]);\n  const { data: attestationsData } = useAttestations(user?.userkeys?.[0] || '');\n  const { data: vouchData } = useVouchActivities(user?.userkeys?.[0] || '');\n  // Dashboard reviews using proper Ethos API v2 Activities\n  const { data: dashboardReviewsData, isLoading: isDashboardReviewsLoading } = useDashboardReviews(user?.userkeys?.[0]);\n  // R4R analysis only for detailed popup\n  const { data: r4rData } = useR4RAnalysis(user?.userkeys?.[0]);\n  // Weekly activities with score changes\n  const { data: weeklyActivitiesData, isLoading: isWeeklyActivitiesLoading } = useWeeklyActivities(user?.userkeys?.[0]);\n  // Exchange rates for USD conversion\n  const { data: exchangeRatesData } = useExchangeRates();\n\n  const score = (scoreData as any)?.success ? (scoreData as any).data?.score || user?.score || 0 : user?.score || 0;\n  const realStats = (statsData as any)?.success ? (statsData as any).data : user?.stats;\n\n  const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n  const socialConnections = (attestationsData as any)?.success ? (attestationsData as any).data : null;\n  \n  // Loading states for different data types\n  const isStatsLoading = !statsData;\n  const isEnhancedLoading = isEnhancedQueryLoading;\n  const isAttestationsLoading = !attestationsData;\n  \n  const tierInfo = getTierInfo(score);\n  const IconComponent = tierInfo.icon;\n  \n  // Platform info removed as requested\n  \n  // Check if user is not on Ethos Protocol\n  const isNotOnEthos = enhancedData && !(enhancedData as any)?.success;\n  \n  // XP and ranking data - use enhanced profile data as primary source, strict null checking\n  const xpTotal = enhancedProfile?.xpTotal || 0;\n  const xpStreakDays = enhancedProfile?.xpStreakDays || null; // Strict null - only show if enhanced profile has data\n  const leaderboardPosition = enhancedProfile?.leaderboardPosition ?? null;\n  const weeklyXpGain = enhancedProfile?.weeklyXpGain || 0;\n\n  // Status-based ring colors for profile avatar (dark mode only)\n  const getStatusRingColor = (status: string, profileId: any) => {\n    // Users without profileId (including profileId 0) and null/INACTIVE status need red rings  \n    const hasNoProfile = !profileId || profileId === 0;\n    if (hasNoProfile && (status === null || status === 'INACTIVE' || status === 'UNINITIALIZED')) {\n      return 'ring-2 ring-red-400/60 shadow-lg shadow-red-400/20';\n    }\n    \n    switch (status) {\n      case 'ACTIVE':\n        return 'ring-2 ring-emerald-400/60 shadow-lg shadow-emerald-400/20';\n      case 'INACTIVE':\n        return 'ring-2 ring-yellow-400/60 shadow-lg shadow-yellow-400/20';\n      case 'UNINITIALIZED':\n        return 'ring-2 ring-red-400/60 shadow-lg shadow-red-400/20';\n      default:\n        return 'ring-2 ring-gray-500/40 shadow-lg shadow-gray-500/20';\n    }\n  };\n  \n  // Simple state for score animation\n  const [showRankPopup, setShowRankPopup] = useState(false);\n\n  // Stats - use shared utility for consistent data prioritization with other components\n  const vouchStats = getVouchStats(statsData, user?.stats);\n  const vouchesReceived = vouchStats.received.count || 0;\n  const vouchesGiven = vouchStats.given.count || 0;\n  \n  // Dashboard reviews - use proper Ethos API v2 Activities data\n  const dashboardReviews = (dashboardReviewsData as any)?.success ? (dashboardReviewsData as any).data : null;\n  const totalReviews = dashboardReviews?.totalReviews || 0;\n  const positivePercentage = dashboardReviews?.positivePercentage || 0;\n\n  // Simple score animation on load\n  useEffect(() => {\n    if (score > 0 && animatedScore === 0) {\n      const duration = 1000;\n      const startTime = Date.now();\n      \n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n        const easeOut = 1 - Math.pow(1 - progress, 3);\n        setAnimatedScore(Math.round(score * easeOut));\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        }\n      };\n      \n      requestAnimationFrame(animate);\n    } else if (score > 0 && animatedScore !== score) {\n      setAnimatedScore(score);\n    }\n  }, [score]);\n\n  const handleViewOnEthos = () => {\n    if (user?.userkeys?.[0]) {\n      // Use the username to construct the correct Ethos profile URL\n      const userkey = user.userkeys[0];\n      const username = user.username;\n      \n      // Extract platform and construct proper URL format\n      if (userkey.includes('service:x.com:') && username) {\n        const profileUrl = `https://app.ethos.network/profile/x/${username}`;\n        window.open(profileUrl, '_blank');\n      } else if (userkey.includes('service:farcaster:') && username) {\n        const profileUrl = `https://app.ethos.network/profile/farcaster/${username}`;\n        window.open(profileUrl, '_blank');\n      } else if (userkey.startsWith('address:') && username) {\n        const profileUrl = `https://app.ethos.network/profile/wallet/${username}`;\n        window.open(profileUrl, '_blank');\n      } else {\n        // Fallback - use userkey if no username available\n        const profileUrl = `https://app.ethos.network/profile/${userkey}`;\n        window.open(profileUrl, '_blank');\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Enhanced ambient background - hidden in dark mode for clean appearance */}\n      <div className=\"absolute inset-0 pointer-events-none dark:hidden\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-blue-400/15 to-cyan-400/10 rounded-full blur-2xl animate-pulse\"></div>\n        <div className=\"absolute top-60 right-16 w-28 h-28 bg-gradient-to-br from-purple-400/15 to-pink-400/10 rounded-full blur-2xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\n        <div className=\"absolute bottom-40 left-20 w-36 h-36 bg-gradient-to-br from-emerald-400/12 to-teal-400/8 rounded-full blur-2xl animate-pulse\" style={{ animationDelay: '2s' }}></div>\n\n      </div>\n\n      <div className=\"relative z-10 max-w-2xl mx-auto px-4 py-6\">\n        {/* Header with Back button and Review button */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          {/* Left side - Back button */}\n          <button\n            onClick={onBackToSearch}\n            className=\"flex items-center gap-2 px-4 py-2 rounded-xl backdrop-blur-xl bg-white/10 dark:bg-white/5 hover:bg-white/15 dark:hover:bg-white/8 border border-white/20 dark:border-white/15 text-white/80 hover:text-white transition-all duration-300 text-sm group shadow-2xl shadow-black/25 dark:shadow-black/80\"\n          >\n            <ArrowLeft className=\"w-4 h-4 transition-transform group-hover:-translate-x-1\" />\n            <span>Back to Search</span>\n          </button>\n          \n          {/* Right side - Farcaster indicator and Review button */}\n          <div className=\"flex items-center gap-3\">\n            {/* Search via Farcaster indicator - only show if search mode is farcaster */}\n            {searchMode === 'farcaster' && (\n              <div className=\"flex items-center gap-2 px-3 py-1.5 rounded-lg backdrop-blur-xl bg-white/10 dark:bg-white/5 border border-white/20 dark:border-white/15 text-purple-300 text-xs font-medium shadow-2xl shadow-black/25 dark:shadow-black/80\">\n                <SiFarcaster className=\"w-3 h-3\" />\n                <span>Search via Farcaster</span>\n                {/* Show FID if available */}\n                {user.fid && (\n                  <>\n                    <span className=\"text-purple-400/60\">‚Ä¢</span>\n                    <span className=\"text-purple-200\">FID {user.fid}</span>\n                  </>\n                )}\n              </div>\n            )}\n            \n\n          </div>\n        </div>\n\n        {/* Modern Compact Profile Card */}\n        <div className=\"relative backdrop-blur-2xl bg-gradient-to-br from-gray-900/20 via-gray-800/15 to-gray-700/10 rounded-3xl overflow-hidden shadow-2xl shadow-blue-400/10\">\n          {/* Floating orbs for visual interest */}\n          <div className=\"absolute top-4 right-6 w-3 h-3 bg-gradient-to-r from-emerald-400/40 to-teal-400/30 rounded-full animate-pulse\"></div>\n          <div className=\"absolute bottom-6 left-8 w-2 h-2 bg-gradient-to-r from-blue-400/40 to-cyan-400/30 rounded-full animate-pulse\" style={{ animationDelay: '1s' }}></div>\n          \n          {/* Gradient overlay for depth */}\n          <div className=\"absolute inset-0 bg-gradient-to-b from-white/8 via-transparent to-white/4 pointer-events-none rounded-3xl\"></div>\n          \n          <div className=\"relative p-8\">\n            {/* Header Section - More compact */}\n            <div className=\"flex items-center gap-4 mb-6\">\n              {/* Avatar with status-colored ring and tier badge */}\n              <div className=\"relative flex-shrink-0\">\n                <Avatar className={`h-16 w-16 ring-offset-2 ring-offset-transparent ${getStatusRingColor(enhancedProfile?.status || user?.status || 'UNKNOWN', enhancedProfile?.profileId ?? user?.profileId)}`}>\n                  <AvatarImage \n                    src={user.avatarUrl && !user.avatarUrl.includes('default_profile') ? user.avatarUrl : undefined} \n                    alt={user.displayName}\n                    className=\"object-cover\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                    }}\n                  />\n                  <AvatarFallback className=\"bg-gradient-to-br from-white/20 to-white/10 text-white text-lg font-bold\">\n                    {user.displayName?.charAt(0) || user.username?.charAt(0) || 'U'}\n                  </AvatarFallback>\n                </Avatar>\n                \n                {/* Simple tier badge */}\n                <div className={`absolute -bottom-1 -right-1 w-8 h-8 rounded-full bg-gradient-to-br ${tierInfo.colors.bg} border-2 ${tierInfo.colors.border} flex items-center justify-center shadow-lg`}>\n                  <IconComponent className={`h-4 w-4 ${tierInfo.colors.text}`} />\n                </div>\n              </div>\n\n              {/* User Info - More compact */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-3 mb-1\">\n                      <h1 className=\"text-2xl font-bold text-white truncate\">\n                        {user.displayName}\n                      </h1>\n                      {/* Enhanced Flex Button Positioning */}\n                      <div className=\"flex-shrink-0\">\n                        <FarcasterShareButton \n                          user={user}\n                          compact={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2 flex-wrap\">\n                      <p className=\"text-white/60 text-sm\">@{user.username}</p>\n                      \n                      {/* Joined Date - from Twitter attestation */}\n                      {(() => {\n                        const attestationData = attestationsData as any;\n                        if (!attestationData?.success || !attestationData.data) {\n                          return null;\n                        }\n                        \n                        const twitterAttestation = attestationData.data.find((att: any) => att.service === 'x.com');\n                        \n                        if (twitterAttestation?.createdAt) {\n                          const joinedDate = new Date(twitterAttestation.createdAt * 1000);\n                          const now = new Date();\n                          const daysDiff = Math.floor((now.getTime() - joinedDate.getTime()) / (1000 * 60 * 60 * 24));\n                          \n                          return (\n                            <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-blue-500/20 border border-blue-400/30 text-xs text-blue-200 font-medium\">\n                              <Calendar className=\"w-3 h-3\" />\n                              <span>Joined {daysDiff} days ago</span>\n                            </div>\n                          );\n                        }\n                        return null;\n                      })()}\n                      {/* STATUS SYSTEM - Based on Enhanced Profile API Response */}\n                  {(() => {\n                    // Show loading state while enhanced profile data loads\n                    if (isEnhancedLoading) {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-white/10 border border-white/20 loading-glow\">\n                          <div className=\"w-3 h-3 rounded-full loading-shimmer loading-pulse-soft\"></div>\n                          <div className=\"loading-shimmer loading-pulse-soft h-3 w-12 rounded\"></div>\n                        </div>\n                      );\n                    }\n\n                    // Use enhanced profile data as authoritative source - strict checking\n                    const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n                    \n                    // If enhanced profile API returns null data, user doesn't have enhanced profile (like dwr.eth, $1profit.eth)\n                    if (!enhancedProfile) {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-red-500/20 border border-red-400/30\">\n                          <AlertTriangle className=\"w-3 h-3 text-red-400\" />\n                          <span className=\"text-xs font-medium text-red-300\">Needs Invite</span>\n                        </div>\n                      );\n                    }\n                    \n                    const actualStatus = enhancedProfile.status;\n                    const actualProfileId = enhancedProfile.profileId;\n                    \n                    // Special case: If enhanced profile API failed completely, user is not on Ethos Protocol\n                    const enhancedApiFailed = enhancedData && !(enhancedData as any)?.success;\n                    if (enhancedApiFailed) {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-red-500/20 border border-red-400/30\">\n                          <AlertTriangle className=\"w-3 h-3 text-red-400\" />\n                          <span className=\"text-xs font-medium text-red-300\">Not on Ethos</span>\n                        </div>\n                      );\n                    }\n                    \n                    // Simple status logic based on API data - treat profileId 0 or null as no profile\n                    const hasNoProfile = !actualProfileId || actualProfileId === 0;\n                    \n                    if (hasNoProfile && actualStatus === 'INACTIVE') {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-red-500/20 border border-red-400/30\">\n                          <AlertTriangle className=\"w-3 h-3 text-red-400\" />\n                          <span className=\"text-xs font-medium text-red-300\">Needs Invite</span>\n                        </div>\n                      );\n                    }\n                    if (hasNoProfile && (actualStatus === null || actualStatus === 'UNINITIALIZED')) {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-red-500/20 border border-red-400/30\">\n                          <AlertTriangle className=\"w-3 h-3 text-red-400\" />\n                          <span className=\"text-xs font-medium text-red-300\">Needs Invite</span>\n                        </div>\n                      );\n                    }\n                    if (actualStatus === 'ACTIVE') {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-green-500/20 border border-green-400/30\">\n                          <Shield className=\"w-3 h-3 text-green-400\" />\n                          <span className=\"text-xs font-medium text-green-300\">Active</span>\n                        </div>\n                      );\n                    }\n                    if (actualStatus === 'INACTIVE') {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-yellow-500/20 border border-yellow-400/30\">\n                          <AlertTriangle className=\"w-3 h-3 text-yellow-400\" />\n                          <span className=\"text-xs font-medium text-yellow-300\">Inactive</span>\n                        </div>\n                      );\n                    }\n                    if (actualStatus === 'UNINITIALIZED') {\n                      return (\n                        <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-purple-500/20 border border-purple-400/30\">\n                          <Clock className=\"w-3 h-3 text-purple-400\" />\n                          <span className=\"text-xs font-medium text-purple-300\">Uninitialized</span>\n                        </div>\n                      );\n                    }\n                    // Default fallback\n                    return (\n                      <div className=\"flex items-center gap-1 px-2 py-1 rounded-md bg-gray-500/20 border border-gray-400/30\">\n                        <Clock className=\"w-3 h-3 text-gray-400\" />\n                        <span className=\"text-xs font-medium text-gray-300\">Unknown</span>\n                      </div>\n                    );\n                      })()}\n                    </div>\n                  </div>\n                  \n\n                </div>\n              </div>\n            </div>\n\n            {/* Trust Score or Not On Ethos Message */}\n            {isNotOnEthos ? (\n              <div className=\"text-center mb-8\">\n                <div className=\"relative backdrop-blur-xl bg-gradient-to-br from-red-500/20 via-red-400/15 to-red-600/10 border border-red-400/30 rounded-2xl p-8 shadow-2xl\">\n                  <div className=\"flex flex-col items-center gap-4\">\n                    <div className=\"flex items-center justify-center w-16 h-16 rounded-full bg-red-500/20 border-2 border-red-400/40\">\n                      <AlertTriangle className=\"w-8 h-8 text-red-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-white mb-2\">Profile Not Found</h3>\n                      <p className=\"text-red-200/80 text-sm leading-relaxed\">\n                        This user is not currently on the Ethos Protocol network.\n                        <br />\n                        They may need an invitation to join the platform.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center mb-8\">\n                <div className=\"relative inline-block group\">\n                  {/* Enhanced Score Card with Better Visual Hierarchy */}\n                  <div className={`relative backdrop-blur-2xl bg-gradient-to-br ${tierInfo.colors.bg} border-2 border-white/30 rounded-3xl p-8 mb-4 ${tierInfo.colors.glow} shadow-2xl transition-all duration-500 hover:scale-[1.02] hover:shadow-3xl group-hover:border-white/40`}>\n                    {/* Floating accent orbs */}\n                    <div className=\"absolute top-4 right-6 w-3 h-3 bg-gradient-to-r from-white/30 to-white/20 rounded-full animate-pulse\"></div>\n                    <div className=\"absolute bottom-6 left-8 w-2 h-2 bg-gradient-to-r from-white/25 to-white/15 rounded-full animate-pulse\" style={{ animationDelay: '1s' }}></div>\n                    \n                    {/* Enhanced gradient overlay */}\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-white/5 via-transparent to-white/10 rounded-3xl pointer-events-none\"></div>\n                    \n                    <div className=\"relative\">\n                      <div className={`text-6xl font-black bg-gradient-to-br ${tierInfo.colors.text === 'text-blue-300' ? 'from-blue-200 to-cyan-300' : tierInfo.colors.text === 'text-emerald-300' ? 'from-emerald-200 to-teal-300' : tierInfo.colors.text === 'text-purple-300' ? 'from-purple-200 to-violet-300' : tierInfo.colors.text === 'text-amber-300' ? 'from-amber-200 to-orange-300' : 'from-gray-200 to-slate-300'} bg-clip-text text-transparent drop-shadow-2xl`}>\n                        {animatedScore}\n                      </div>\n                      <div className=\"text-sm font-bold text-white/90 uppercase tracking-[0.2em] mt-2 drop-shadow-lg\">\n                        Trust Score\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Enhanced Tier Badge */}\n                  <div className={`inline-flex items-center gap-3 px-6 py-3 rounded-2xl bg-gradient-to-r ${tierInfo.colors.bg} border-2 ${tierInfo.colors.border} text-white font-bold text-base ${tierInfo.colors.glow} shadow-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl`}>\n                    <IconComponent className=\"w-5 h-5\" />\n                    <span className=\"uppercase tracking-wider\">{tierInfo.tier}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n\n\n\n\n\n\n            {/* Clean Underline Navigation */}\n            <div className=\"px-6 mb-8\">\n              <div className=\"w-full max-w-6xl mx-auto\">\n                <div className=\"flex justify-center items-center gap-12\">\n                  <button\n                    onClick={() => setActiveView('overview')}\n                    className={`group flex flex-col items-center gap-3 pb-4 transition-all duration-500 ${\n                      activeView === 'overview'\n                        ? 'border-b-3 border-white'\n                        : 'border-b-3 border-transparent hover:border-white/40'\n                    }`}\n                  >\n                    <div className={`p-3 rounded-2xl transition-all duration-500 transform ${\n                      activeView === 'overview'\n                        ? 'bg-gradient-to-br from-blue-500/30 to-cyan-400/20 shadow-lg shadow-blue-400/25 scale-110 rotate-3'\n                        : 'bg-white/10 group-hover:bg-white/20 group-hover:scale-105 group-hover:shadow-lg group-hover:shadow-white/20'\n                    }`}>\n                      <BarChart3 className={`w-6 h-6 transition-all duration-500 ${\n                        activeView === 'overview' \n                          ? 'text-blue-200 drop-shadow-lg' \n                          : 'text-white/70 group-hover:text-white group-hover:drop-shadow-md'\n                      }`} />\n                    </div>\n                    <span className={`text-sm font-bold tracking-wide transition-all duration-300 ${\n                      activeView === 'overview'\n                        ? 'text-white drop-shadow-lg'\n                        : 'text-white/70 group-hover:text-white'\n                    }`}>\n                      OVERVIEW\n                    </span>\n                  </button>\n\n                  <button\n                    onClick={() => setActiveView('activity')}\n                    className={`group flex flex-col items-center gap-3 pb-4 transition-all duration-500 ${\n                      activeView === 'activity'\n                        ? 'border-b-3 border-white'\n                        : 'border-b-3 border-transparent hover:border-white/40'\n                    }`}\n                  >\n                    <div className={`p-3 rounded-2xl transition-all duration-500 transform ${\n                      activeView === 'activity'\n                        ? 'bg-gradient-to-br from-emerald-500/30 to-teal-400/20 shadow-lg shadow-emerald-400/25 scale-110 -rotate-3'\n                        : 'bg-white/10 group-hover:bg-white/20 group-hover:scale-105 group-hover:shadow-lg group-hover:shadow-white/20'\n                    }`}>\n                      <Activity className={`w-6 h-6 transition-all duration-500 ${\n                        activeView === 'activity' \n                          ? 'text-emerald-200 drop-shadow-lg animate-pulse' \n                          : 'text-white/70 group-hover:text-white group-hover:drop-shadow-md'\n                      }`} />\n                    </div>\n                    <span className={`text-sm font-bold tracking-wide transition-all duration-300 ${\n                      activeView === 'activity'\n                        ? 'text-white drop-shadow-lg'\n                        : 'text-white/70 group-hover:text-white'\n                    }`}>\n                      VOUCH INTEL\n                    </span>\n                  </button>\n\n                  <button\n                    onClick={() => setActiveView('network')}\n                    className={`group flex flex-col items-center gap-3 pb-4 transition-all duration-500 ${\n                      activeView === 'network'\n                        ? 'border-b-3 border-white'\n                        : 'border-b-3 border-transparent hover:border-white/40'\n                    }`}\n                  >\n                    <div className={`p-3 rounded-2xl transition-all duration-500 transform ${\n                      activeView === 'network'\n                        ? 'bg-gradient-to-br from-purple-500/30 to-violet-400/20 shadow-lg shadow-purple-400/25 scale-110 rotate-6'\n                        : 'bg-white/10 group-hover:bg-white/20 group-hover:scale-105 group-hover:shadow-lg group-hover:shadow-white/20'\n                    }`}>\n                      <Network className={`w-6 h-6 transition-all duration-500 ${\n                        activeView === 'network' \n                          ? 'text-purple-200 drop-shadow-lg' \n                          : 'text-white/70 group-hover:text-white group-hover:drop-shadow-md'\n                      }`} />\n                    </div>\n                    <span className={`text-sm font-bold tracking-wide transition-all duration-300 ${\n                      activeView === 'network'\n                        ? 'text-white drop-shadow-lg'\n                        : 'text-white/70 group-hover:text-white'\n                    }`}>\n                      R4R ANALYSIS\n                    </span>\n                  </button>\n                </div>\n              </div>\n            </div>\n                \n                {/* Dynamic Content Based on Active View */}\n                {activeView === 'overview' && (\n                  <>\n                    {(() => {\n                  // Determine if user needs invite (same logic as status display)\n                  const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n                  const actualStatus = enhancedProfile?.status || user.status;\n                  const actualProfileId = enhancedProfile?.profileId ?? user.profileId;\n                  const hasNoProfile = !actualProfileId || actualProfileId === 0;\n                  const needsInvite = hasNoProfile && (actualStatus === 'INACTIVE' || actualStatus === null || actualStatus === 'UNINITIALIZED');\n\n                  return (\n                    <>\n                      {/* Stats Grid - Compact 2x2 Layout */}\n                      <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                        {/* Enhanced Rank Card - Only show for active/established users */}\n                        {!needsInvite && (\n                          <div className=\"backdrop-blur-xl bg-gradient-to-br from-orange-500/15 to-yellow-500/10 border border-orange-400/20 rounded-2xl p-5 hover:bg-gradient-to-br hover:from-orange-500/20 hover:to-yellow-500/15 hover:border-orange-400/30 transition-all duration-500 shadow-xl shadow-orange-400/20 hover:shadow-orange-400/30 group\">\n                            <div className=\"flex items-center gap-3 mb-3\">\n                              <div className=\"p-2 bg-orange-500/20 rounded-xl\">\n                                <TrendingUp className=\"w-5 h-5 text-orange-400\" />\n                              </div>\n                              <span className=\"text-sm text-white/80 font-semibold uppercase tracking-wide\">Global Rank</span>\n                            </div>\n                            <div className=\"text-3xl font-black text-white group-hover:scale-105 transition-transform duration-300\">\n                              {isEnhancedLoading ? (\n                                <div className=\"loading-shimmer loading-pulse-soft h-8 w-20 rounded-lg loading-glow bg-gradient-to-r from-orange-300/20 to-yellow-300/20\"></div>\n                              ) : (\n                                `#${leaderboardPosition || 'N/A'}`\n                              )}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* For users who need invite, show invitation prompt instead of rank */}\n                        {needsInvite && (\n                          <div className=\"backdrop-blur-md bg-red-500/10 rounded-xl p-4 hover:bg-red-500/15 transition-all duration-300 shadow-lg shadow-red-400/20 hover:shadow-red-400/30\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <AlertTriangle className=\"w-4 h-4 text-red-400\" />\n                              <span className=\"text-xs text-red-300 font-medium uppercase tracking-wide\">Status</span>\n                            </div>\n                            <div className=\"text-sm font-bold text-red-300\">\n                              Needs Invitation\n                            </div>\n                          </div>\n                        )}\n\n                  {/* XP */}\n                  <div className=\"backdrop-blur-xl bg-gradient-to-br from-yellow-500/15 to-orange-500/10 border border-yellow-400/20 rounded-2xl p-5 hover:bg-gradient-to-br hover:from-yellow-500/20 hover:to-orange-500/15 hover:border-yellow-400/30 transition-all duration-500 shadow-xl shadow-yellow-400/20 hover:shadow-yellow-400/30 group\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <div className=\"p-2 bg-yellow-500/20 rounded-xl\">\n                        <Star className=\"w-5 h-5 text-yellow-400\" />\n                      </div>\n                      <span className=\"text-sm text-white/80 font-semibold uppercase tracking-wide\">XP</span>\n                    </div>\n                    <div className=\"text-3xl font-black text-white group-hover:scale-105 transition-transform duration-300\">\n                      {isEnhancedLoading ? (\n                        <div className=\"loading-shimmer loading-pulse-soft h-8 w-20 rounded-lg loading-glow bg-gradient-to-r from-yellow-300/20 to-orange-300/20\"></div>\n                      ) : (\n                        formatNumber(xpTotal)\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Vouches with USD Amount */}\n                  <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-emerald-400/20 hover:shadow-emerald-400/30\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Users className=\"w-4 h-4 text-emerald-400\" />\n                      <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Vouches</span>\n                    </div>\n                    <div className=\"text-2xl font-bold text-white\">\n                      {isStatsLoading ? (\n                        <div className=\"loading-shimmer loading-pulse-soft h-7 w-10 rounded loading-glow\"></div>\n                      ) : (\n                        vouchesReceived\n                      )}\n                    </div>\n                    <div className=\"text-xs text-white/50\">\n                      {isStatsLoading ? (\n                        <div className=\"loading-shimmer loading-pulse-soft h-3 w-12 rounded loading-glow\"></div>\n                      ) : (\n                        <>\n                          received ‚Ä¢ {(() => {\n                            const usdAmount = calculateUsdValue(vouchStats.received.amountWeiTotal || '0', exchangeRatesData);\n                            return usdAmount > 0 ? `$${usdAmount.toFixed(0)}` : '$0';\n                          })()}\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Reviews with Loading Animation */}\n                  <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-blue-400/20 hover:shadow-blue-400/30\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <MessageSquare className=\"w-4 h-4 text-blue-400\" />\n                      <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Reviews</span>\n                    </div>\n                    <div className=\"text-2xl font-bold text-white\">\n                      {isDashboardReviewsLoading ? (\n                        <div className=\"loading-shimmer loading-pulse-soft h-7 w-10 rounded loading-glow\"></div>\n                      ) : (\n                        totalReviews\n                      )}\n                    </div>\n                    <div className=\"text-xs text-white/50\">\n                      {isDashboardReviewsLoading ? (\n                        <div className=\"loading-shimmer loading-pulse-soft h-3 w-16 rounded loading-glow\"></div>\n                      ) : (\n                        `total ‚Ä¢ ${positivePercentage}% positive`\n                      )}\n                    </div>\n                  </div>\n                </div>\n                    </>\n                  );\n                })()}\n\n                {/* Enhanced Weekly Activity Section with Score Changes - Only for established users */}\n                {(() => {\n                  // Check if user needs invite (same logic as above)\n                  const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n                  const actualStatus = enhancedProfile?.status || user.status;\n                  const actualProfileId = enhancedProfile?.profileId ?? user.profileId;\n                  const hasNoProfile = !actualProfileId || actualProfileId === 0;\n                  const needsInvite = hasNoProfile && (actualStatus === 'INACTIVE' || actualStatus === null || actualStatus === 'UNINITIALIZED');\n\n                  // Don't show weekly activity for users who need invites\n                  if (needsInvite) {\n                    return null;\n                  }\n\n                  return isWeeklyActivitiesLoading ? (\n                    // Modern loading state with glassmorphism\n                    <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-orange-400/20 hover:shadow-orange-400/30\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Activity className=\"w-4 h-4 text-orange-400\" />\n                        <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Weekly Momentum</span>\n                      </div>\n                      \n                      <div className=\"w-full min-h-[85px] px-1 py-4 overflow-hidden\">\n                        <div className=\"grid grid-cols-3 gap-2 items-center\">\n                          {/* Streak Days */}\n                          <div className=\"flex flex-col items-center text-center px-1 min-w-0\">\n                            <div className=\"loading-shimmer loading-pulse-soft h-6 w-12 rounded-lg mb-2 loading-glow bg-gradient-to-r from-white/10 to-white/5\"></div>\n                            <div className=\"text-xs text-white/60 font-medium\">üî• Streak</div>\n                          </div>\n                          \n                          {/* Score Change */}\n                          <div className=\"flex flex-col items-center text-center px-1 min-w-0\">\n                            <div className=\"space-y-1\">\n                              <div className=\"loading-shimmer loading-pulse-soft h-6 w-14 rounded-lg loading-glow bg-gradient-to-r from-white/10 to-white/5\"></div>\n                              <div className=\"loading-shimmer loading-pulse-soft h-3 w-8 rounded-lg loading-glow bg-gradient-to-r from-white/10 to-white/5 mx-auto\"></div>\n                            </div>\n                            <div className=\"text-xs text-white/60 font-medium mt-2\">üìà Score</div>\n                          </div>\n                          \n                          {/* XP Gained */}\n                          <div className=\"flex flex-col items-center text-center px-1 min-w-0\">\n                            <div className=\"loading-shimmer loading-pulse-soft h-6 w-14 rounded-lg mb-2 loading-glow bg-gradient-to-r from-white/10 to-white/5\"></div>\n                            <div className=\"text-xs text-white/60 font-medium\">‚ö° XP</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (() => {\n                    const weeklyData = (weeklyActivitiesData as any)?.success ? (weeklyActivitiesData as any).data : null;\n                    const summary = weeklyData?.summary;\n                    \n                    // Only show activity if we have valid enhanced profile data\n                    const hasEnhancedData = (xpStreakDays !== null && xpStreakDays > 0) || weeklyXpGain > 0;\n                    \n                    if (hasEnhancedData) {\n                      // Use only enhanced profile data - no fallbacks, strict null checking\n                      const displayStreakDays = xpStreakDays !== null ? xpStreakDays : 0;\n                      const displayXpGain = weeklyXpGain || 0;\n                      \n                      return (\n                        <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-orange-400/20 hover:shadow-orange-400/30 mb-6\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Activity className=\"w-4 h-4 text-orange-400\" />\n                            <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Weekly Momentum</span>\n                          </div>\n                          \n                          <div className=\"w-full min-h-[85px] px-1 py-4 overflow-hidden\">\n                            <div className=\"grid grid-cols-3 gap-2 items-center\">\n                              {/* Streak Days */}\n                              <div className=\"flex flex-col items-center text-center px-1 min-w-0\">\n                                <div className=\"text-xl sm:text-2xl font-bold text-white whitespace-nowrap overflow-hidden\">\n                                  {displayStreakDays}d\n                                </div>\n                                <div className=\"text-xs text-white/60 font-medium mt-1\">üî• Streak</div>\n                              </div>\n                              \n                              {/* Score Change */}\n                              <div className=\"flex flex-col items-center text-center px-1 min-w-0\">\n                                <div className=\"flex flex-col items-center gap-0.5 text-base sm:text-lg font-bold\">\n                                  {summary?.scoreChange > 0 ? (\n                                    <>\n                                      <div className=\"flex items-center gap-1\">\n                                        <ArrowUp className=\"w-3 h-3 text-green-400 flex-shrink-0\" />\n                                        <span className=\"text-green-400 text-xl sm:text-2xl\">+{summary.scoreChange}</span>\n                                      </div>\n                                      <span className=\"text-[10px] text-white/60\">(+{((summary.scoreChange / (user.score || 1)) * 100).toFixed(1)}%)</span>\n                                    </>\n                                  ) : summary?.scoreChange < 0 ? (\n                                    <>\n                                      <div className=\"flex items-center gap-1\">\n                                        <ArrowDown className=\"w-3 h-3 text-red-400 flex-shrink-0\" />\n                                        <span className=\"text-red-400 text-xl sm:text-2xl\">{summary.scoreChange}</span>\n                                      </div>\n                                      <span className=\"text-[10px] text-white/60\">({Math.abs((summary.scoreChange / (user.score || 1)) * 100).toFixed(1)}%)</span>\n                                    </>\n                                  ) : (\n                                    <>\n                                      <span className=\"text-white text-xl sm:text-2xl\">0</span>\n                                      <span className=\"text-[10px] text-white/60\">(0.0%)</span>\n                                    </>\n                                  )}\n                                </div>\n                                <div className=\"text-xs text-white/60 font-medium mt-1\">üìà Score</div>\n                              </div>\n                              \n                              {/* XP Gained */}\n                              <div className=\"flex flex-col items-center text-center px-1 min-w-0\">\n                                <div className=\"text-xl sm:text-2xl font-bold text-white whitespace-nowrap overflow-hidden\">\n                                  {(() => {\n                                    const xp = displayXpGain;\n                                    if (xp >= 10000) {\n                                      return `+${(xp / 1000).toFixed(0)}K`;\n                                    } else if (xp >= 1000) {\n                                      return `+${(xp / 1000).toFixed(1)}K`;\n                                    }\n                                    return `+${xp}`;\n                                  })()}\n                                </div>\n                                <div className=\"text-xs text-white/60 font-medium mt-1\">‚ö° XP</div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                  }\n                  \n                    // No activity state - more modern\n                    return (\n                      <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-orange-400/20 hover:shadow-orange-400/30 mb-6 text-center\">\n                        <div className=\"flex items-center gap-2 mb-2 justify-center\">\n                          <Activity className=\"w-4 h-4 text-orange-400\" />\n                          <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Weekly Momentum</span>\n                        </div>\n                        \n                        <div className=\"w-full min-h-[70px] px-2 py-3 overflow-hidden\">\n                          <div className=\"grid grid-cols-3 gap-1 items-center\">\n                            {/* Streak Days */}\n                            <div className=\"flex flex-col items-center text-center px-1\">\n                              <div className=\"text-base sm:text-lg font-bold text-white/40 whitespace-nowrap\">0d</div>\n                              <div className=\"text-xs text-white/40 font-medium\">üî• Streak</div>\n                            </div>\n                            \n                            {/* Score Change */}\n                            <div className=\"flex flex-col items-center text-center px-1\">\n                              <div className=\"flex flex-col items-center gap-0.5 text-xs sm:text-sm font-bold\">\n                                <span className=\"text-white/40\">0</span>\n                                <span className=\"text-[10px] text-white/40\">(0.0%)</span>\n                              </div>\n                              <div className=\"text-xs text-white/40 font-medium\">üìà Score</div>\n                            </div>\n                            \n                            {/* XP Gained */}\n                            <div className=\"flex flex-col items-center text-center px-1\">\n                              <div className=\"text-base sm:text-lg font-bold text-white/40 whitespace-nowrap\">+0</div>\n                              <div className=\"text-xs text-white/40 font-medium\">‚ö° XP</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                })();\n                })()}\n\n                {/* Next Rank Progress - Only for established users */}\n                {(() => {\n                  // Check if user needs invite (same logic as above)\n                  const enhancedProfile = (enhancedData as any)?.success ? (enhancedData as any).data : null;\n                  const actualStatus = enhancedProfile?.status || user.status;\n                  const actualProfileId = enhancedProfile?.profileId ?? user.profileId;\n                  const hasNoProfile = !actualProfileId || actualProfileId === 0;\n                  const needsInvite = hasNoProfile && (actualStatus === 'INACTIVE' || actualStatus === null || actualStatus === 'UNINITIALIZED');\n\n                  // Don't show rank progress for users who need invites\n                  if (needsInvite) {\n                    return null;\n                  }\n\n                  return <NextRankProgress currentScore={score} className=\"mb-6\" />;\n                })()}\n\n                {/* Connected Accounts Section with Loading */}\n                <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-green-400/20 hover:shadow-green-400/30 mb-6\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Network className=\"w-4 h-4 text-green-400\" />\n                    <span className=\"text-xs text-white/60 font-medium uppercase tracking-wide\">Connected Accounts</span>\n                  </div>\n                  \n                  {isAttestationsLoading ? (\n                    // Loading state for connected accounts\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {[1, 2, 3, 4].map((item) => (\n                        <div key={item} className=\"backdrop-blur-md bg-white/5 border border-white/10 rounded-lg p-3 loading-glow\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"loading-shimmer loading-pulse-soft w-6 h-6 rounded-md\"></div>\n                              <div className=\"loading-shimmer loading-pulse-soft h-3 w-16 rounded\"></div>\n                            </div>\n                            <div className=\"loading-shimmer loading-pulse-soft w-3 h-3 rounded\"></div>\n                          </div>\n                          <div className=\"loading-shimmer loading-pulse-soft h-3 w-20 rounded\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : socialConnections.length > 0 ? (\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {socialConnections\n                        .sort((a: SocialAttestation, b: SocialAttestation) => {\n                          const order: Record<string, number> = { 'x.com': 1, 'farcaster': 2, 'telegram': 3, 'discord': 4 };\n                          return (order[a.service] || 999) - (order[b.service] || 999);\n                        })\n                        .map((connection: SocialAttestation, index: number) => {\n                        const getPlatformConfig = (service: string) => {\n                          switch (service) {\n                            case 'x.com':\n                              return {\n                                icon: <SiX className=\"w-4 h-4 text-white\" />,\n                                name: 'X',\n                                color: 'text-white',\n                                bg: 'bg-black/30'\n                              };\n                            case 'farcaster':\n                              return {\n                                icon: <SiFarcaster className=\"w-4 h-4 text-purple-400\" />,\n                                name: 'Farcaster',\n                                color: 'text-purple-400',\n                                bg: 'bg-purple-500/20'\n                              };\n                            case 'discord':\n                              return {\n                                icon: <SiDiscord className=\"w-4 h-4 text-indigo-400\" />,\n                                name: 'Discord',\n                                color: 'text-indigo-400',\n                                bg: 'bg-indigo-500/20'\n                              };\n                            case 'telegram':\n                              return {\n                                icon: <SiTelegram className=\"w-4 h-4 text-blue-400\" />,\n                                name: 'Telegram',\n                                color: 'text-blue-400',\n                                bg: 'bg-blue-500/20'\n                              };\n                            default:\n                              return {\n                                icon: <span className=\"text-sm\">{connection.icon}</span>,\n                                name: connection.serviceName || 'Unknown',\n                                color: 'text-white/70',\n                                bg: 'bg-white/10'\n                              };\n                          }\n                        };\n                        \n                        const getProfileUrl = (service: string, username: string, account: string) => {\n                          switch (service) {\n                            case 'x.com':\n                              return `https://x.com/${username}`;\n                            case 'farcaster':\n                              return `https://farcaster.xyz/${username}`;\n                            case 'telegram':\n                              return `https://t.me/${username}`;\n                            case 'discord':\n                              return `https://discordapp.com/users/${account}`;\n                            default:\n                              return null;\n                          }\n                        };\n\n                        const platformConfig = getPlatformConfig(connection.service);\n                        const profileUrl = getProfileUrl(connection.service, connection.username, connection.account);\n                        \n\n                        \n                        const CardContent = () => (\n                          <div className=\"group backdrop-blur-md bg-white/5 hover:bg-white/10 border border-white/10 hover:border-white/20 rounded-lg p-3 transition-all duration-200 hover:scale-[1.02] h-full\">\n                            <div className=\"flex flex-col h-full\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <div className={`w-6 h-6 rounded-md ${platformConfig.bg} border border-white/10 flex items-center justify-center relative flex-shrink-0`}>\n                                    {platformConfig.icon}\n                                    {connection.verified && (\n                                      <div className=\"absolute -top-0.5 -right-0.5 w-2 h-2 rounded-full bg-emerald-500 border border-white/30\"></div>\n                                    )}\n                                  </div>\n                                  <span className={`text-xs font-medium ${platformConfig.color}`}>{platformConfig.name}</span>\n                                </div>\n                                {profileUrl && (\n                                  <ExternalLink className=\"w-3 h-3 text-white/30 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0\" />\n                                )}\n                              </div>\n                              <div className=\"text-white/70 text-xs leading-relaxed break-words\">\n                                @{connection.displayName || connection.username}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                        \n                        return profileUrl ? (\n                          <a\n                            key={index}\n                            href={profileUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"block\"\n                          >\n                            <CardContent />\n                          </a>\n                        ) : (\n                          <div key={index}>\n                            <CardContent />\n                          </div>\n                        );\n                      })}\n                    </div>\n                  ) : (\n                    // No connected accounts found\n                    <div className=\"text-center py-6\">\n                      <div className=\"text-white/40 text-sm\">No connected accounts found</div>\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n\n            {activeView === 'activity' && (\n              <div className=\"space-y-6 mb-6\">\n                {/* Compact Vouch Summary */}\n                <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-blue-400/20 hover:shadow-blue-400/30\">\n                  <div className=\"grid grid-cols-2 gap-6\">\n                    {/* Vouches Received */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <ArrowDownLeft className=\"w-4 h-4 text-emerald-400\" />\n                        <span className=\"text-sm font-medium text-white/80\">Received</span>\n                      </div>\n                      <div className=\"flex items-baseline gap-3\">\n                        <div className=\"text-2xl font-bold text-emerald-400\">\n                          {vouchStats.received.count}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center gap-1 text-emerald-400 font-semibold\">\n                            <span className=\"text-sm\">Œû</span>\n                            <span className=\"text-sm\">\n                              {formatVouchAmount(vouchStats.received.amountWeiTotal || '0')}\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-white/40 mt-0.5\">\n                            {formatVouchAmountWithUsd(vouchStats.received.amountWeiTotal || '0', exchangeRatesData)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Vouches Given */}\n                    <div className=\"space-y-2 border-l border-white/10 pl-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <ArrowUpRight className=\"w-4 h-4 text-red-400\" />\n                        <span className=\"text-sm font-medium text-white/80\">Given</span>\n                      </div>\n                      <div className=\"flex items-baseline gap-3\">\n                        <div className=\"text-2xl font-bold text-red-400\">\n                          {vouchStats.given.count}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center gap-1 text-red-400 font-semibold\">\n                            <span className=\"text-sm\">Œû</span>\n                            <span className=\"text-sm\">\n                              {formatVouchAmount(vouchStats.given.amountWeiTotal || '0')}\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-white/40 mt-0.5\">\n                            {formatVouchAmountWithUsd(vouchStats.given.amountWeiTotal || '0', exchangeRatesData)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Recent Vouches Received */}\n                {vouchData?.success && vouchData.data.received?.length > 0 && (\n                  <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-emerald-400/20 hover:shadow-emerald-400/30 mb-6\">\n                    {/* Enhanced Header with Divider */}\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <div className=\"flex items-center gap-3\">\n                        <ArrowDownLeft className=\"w-6 h-6 text-emerald-400\" />\n                        <div>\n                          <h3 className=\"text-lg font-bold text-white\">Recent Vouches Received</h3>\n                          <span className=\"px-2 py-0.5 bg-emerald-500/20 rounded-full text-xs font-medium text-emerald-300\">\n                            {vouchData.data.received.length} total\n                          </span>\n                        </div>\n                      </div>\n                      <button \n                        onClick={() => setShowVouchModal({ type: 'received' })}\n                        className=\"px-3 py-2 text-sm font-medium text-emerald-300 hover:text-emerald-200 bg-emerald-500/10 hover:bg-emerald-500/20 border border-emerald-500/20 hover:border-emerald-500/30 rounded-lg transition-all duration-200\"\n                      >\n                        View All ‚Üí\n                      </button>\n                    </div>\n                    \n                    {/* Divider Line */}\n                    <div className=\"h-px bg-gradient-to-r from-transparent via-emerald-500/30 to-transparent mb-4\"></div>\n                    \n                    {/* Compact Vouches List */}\n                    <div className=\"space-y-2\">\n                      {vouchData.data.received.slice(0, 3).map((vouch: any, index: number) => {\n                        const getDisplayName = () => {\n                          if (vouch.voucherInfo?.displayName) {\n                            return vouch.voucherInfo.displayName;\n                          }\n                          if (vouch.voucher && vouch.voucher.startsWith('address:')) {\n                            const addr = vouch.voucher.split(':')[1];\n                            return addr ? `${addr.slice(0, 6)}...${addr.slice(-4)}` : 'Anonymous';\n                          }\n                          return 'Anonymous';\n                        };\n\n                        const displayName = getDisplayName();\n                        const hasScore = vouch.voucherInfo?.score;\n                        const ethAmount = parseFloat(vouch.amountEth || '0.010');\n\n                        return (\n                          <div key={vouch.id || index} className=\"flex items-center justify-between p-4 bg-white/3 dark:bg-gray-700/20 rounded-lg hover:bg-gray-700/20 transition-all duration-200 group\">\n                            <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                              <ArrowDownLeft className=\"w-4 h-4 text-emerald-400\" />\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium text-white truncate\">\n                                    {displayName}\n                                  </span>\n                                  {hasScore && (\n                                    <span className=\"text-xs text-emerald-400 font-medium\">\n                                      {vouch.voucherInfo.score}\n                                    </span>\n                                  )}\n                                </div>\n                                <div className=\"text-xs text-white/50\">\n                                  {vouch.timestamp ? new Date(vouch.timestamp * 1000).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) : 'Recent'}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col items-end\">\n                              <div className=\"flex items-center gap-1 text-emerald-400 font-bold text-base\">\n                                <span className=\"text-sm\">‚â°</span>\n                                <span>{ethAmount.toFixed(3)}</span>\n                              </div>\n                              <div className=\"text-xs text-white/40\">\n                                {formatCurrency(ethAmount * getEthUsdRate(exchangeRatesData))}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                    \n                    {/* Show comment for first vouch if available */}\n                    {vouchData.data.received[0]?.comment && (\n                      <div className=\"mt-3 p-2 bg-white/3 dark:bg-gray-700/20 rounded-lg\">\n                        <div className=\"flex items-start gap-2\">\n                          <span className=\"text-sm\">üí≠</span>\n                          <p className=\"text-xs text-white/70 italic\">\n                            \"{vouchData.data.received[0].comment.length > 80 ? vouchData.data.received[0].comment.slice(0, 80) + '...' : vouchData.data.received[0].comment}\"\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Recent Vouches Given */}\n                {vouchData?.success && vouchData.data.given?.length > 0 && (\n                  <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-4 hover:bg-gray-900/20 transition-all duration-300 shadow-lg shadow-red-400/20 hover:shadow-red-400/30 mb-6\">\n                    {/* Enhanced Header with Divider */}\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <div className=\"flex items-center gap-3\">\n                        <ArrowUpRight className=\"w-6 h-6 text-red-400\" />\n                        <div>\n                          <h3 className=\"text-lg font-bold text-white\">Recent Vouches Given</h3>\n                          <span className=\"px-2 py-0.5 bg-red-500/20 rounded-full text-xs font-medium text-red-300\">\n                            {vouchData.data.given.length} total\n                          </span>\n                        </div>\n                      </div>\n                      <button \n                        onClick={() => setShowVouchModal({ type: 'given' })}\n                        className=\"px-3 py-2 text-sm font-medium text-red-300 hover:text-red-200 bg-red-500/10 hover:bg-red-500/20 border border-red-500/20 hover:border-red-500/30 rounded-lg transition-all duration-200\"\n                      >\n                        View All ‚Üí\n                      </button>\n                    </div>\n                    \n                    {/* Divider Line */}\n                    <div className=\"h-px bg-gradient-to-r from-transparent via-red-500/30 to-transparent mb-4\"></div>\n                    \n                    {/* Compact Vouches List */}\n                    <div className=\"space-y-2\">\n                      {vouchData.data.given.slice(0, 3).map((vouch: any, index: number) => {\n                        const getDisplayName = () => {\n                          if (vouch.voucheeInfo?.displayName) {\n                            return vouch.voucheeInfo.displayName;\n                          }\n                          if (vouch.vouchee && vouch.vouchee.startsWith('address:')) {\n                            const addr = vouch.vouchee.split(':')[1];\n                            return addr ? `${addr.slice(0, 6)}...${addr.slice(-4)}` : 'Anonymous';\n                          }\n                          return 'Anonymous';\n                        };\n\n                        const displayName = getDisplayName();\n                        const hasScore = vouch.voucheeInfo?.score;\n                        const ethAmount = parseFloat(vouch.amountEth || '0.010');\n\n                        return (\n                          <div key={vouch.id || index} className=\"flex items-center justify-between p-4 bg-white/3 dark:bg-gray-700/20 rounded-lg hover:bg-gray-700/20 transition-all duration-200 group\">\n                            <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                              <ArrowUpRight className=\"w-4 h-4 text-red-400\" />\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium text-white truncate\">\n                                    {displayName}\n                                  </span>\n                                  {hasScore && (\n                                    <span className=\"text-xs text-red-400 font-medium\">\n                                      {vouch.voucheeInfo.score}\n                                    </span>\n                                  )}\n                                </div>\n                                <div className=\"text-xs text-white/50\">\n                                  {vouch.timestamp ? new Date(vouch.timestamp * 1000).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) : 'Recent'}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col items-end\">\n                              <div className=\"flex items-center gap-1 text-red-400 font-bold text-base\">\n                                <span className=\"text-sm\">‚â°</span>\n                                <span>{ethAmount.toFixed(3)}</span>\n                              </div>\n                              <div className=\"text-xs text-white/40\">\n                                {formatCurrency(ethAmount * getEthUsdRate(exchangeRatesData))}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                    \n                    {/* Show comment for first vouch if available */}\n                    {vouchData.data.given[0]?.comment && (\n                      <div className=\"mt-3 p-2 bg-white/3 dark:bg-gray-700/20 rounded-lg\">\n                        <div className=\"flex items-start gap-2\">\n                          <span className=\"text-sm\">üí≠</span>\n                          <p className=\"text-xs text-white/70 italic\">\n                            \"{vouchData.data.given[0].comment.length > 80 ? vouchData.data.given[0].comment.slice(0, 80) + '...' : vouchData.data.given[0].comment}\"\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Loading State */}\n                {!vouchData && (\n                  <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-5 shadow-lg shadow-gray-400/10\">\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white\"></div>\n                      <span className=\"ml-2 text-white/70\">Loading vouch data...</span>\n                    </div>\n                  </div>\n                )}\n\n                {/* No Data State */}\n                {vouchData?.success && (!vouchData.data.received?.length && !vouchData.data.given?.length) && (\n                  <div className=\"backdrop-blur-md bg-gray-900/15 rounded-xl p-5 text-center shadow-lg shadow-gray-400/10\">\n                    <Clock className=\"w-8 h-8 text-white/30 mx-auto mb-2\" />\n                    <div className=\"text-sm text-white/50\">No vouch activity found yet</div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {activeView === 'network' && (\n              <>\n                {/* R4R Analysis */}\n                <R4RDataSection \n                  userkey={user?.userkeys?.[0]} \n                  userProfile={{\n                    displayName: user?.displayName,\n                    username: user?.username,\n                    avatarUrl: user?.avatarUrl || user?.avatar\n                  }}\n                />\n              </>\n            )}\n\n            {/* View on Ethos button - only show in Overview */}\n            {activeView === 'overview' && (\n              <div className=\"flex gap-3 mt-6\">\n                <button\n                  onClick={handleViewOnEthos}\n                  className=\"flex items-center justify-center gap-2 px-6 py-3 rounded-xl backdrop-blur-md bg-gradient-to-r from-blue-500/20 to-cyan-500/20 border border-blue-400/30 text-white text-sm font-medium hover:from-blue-500/30 hover:to-cyan-500/30 transition-all duration-300 hover:scale-[1.02] shadow-lg hover:shadow-xl\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" />\n                  <span>View on Ethos</span>\n                </button>\n                \n                <FarcasterShareButton \n                  user={user}\n                  compact={false}\n                />\n              </div>\n            )}\n\n            {/* Subtle data freshness indicator */}\n            <div className=\"mt-4 flex justify-center\">\n              <div className=\"text-xs text-white/30 font-mono\">\n                Data refreshed at {new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Detailed Vouches Modal */}\n      {showVouchModal.type && (\n        <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          {/* Background floating orbs for ambiance */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <div className=\"absolute top-1/4 left-1/4 w-32 h-32 bg-gradient-to-br from-purple-500/10 to-blue-500/10 rounded-full blur-3xl animate-pulse\"></div>\n            <div className=\"absolute bottom-1/4 right-1/4 w-40 h-40 bg-gradient-to-br from-cyan-500/10 to-teal-500/10 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\n          </div>\n          \n          <div className=\"relative bg-gradient-to-br from-white/10 via-white/5 to-white/10 backdrop-blur-3xl rounded-2xl border border-white/20 shadow-2xl shadow-black/40 w-full max-w-md max-h-[85vh] overflow-hidden\">\n            {/* Floating header orbs */}\n            <div className=\"absolute -top-6 -right-6 w-12 h-12 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full blur-xl animate-pulse\"></div>\n            <div className=\"absolute -top-4 -left-8 w-8 h-8 bg-gradient-to-br from-blue-400/20 to-cyan-400/20 rounded-full blur-xl animate-pulse\" style={{ animationDelay: '1.5s' }}></div>\n            \n            {/* Premium Modal Header */}\n            <div className=\"relative bg-gradient-to-r from-white/5 via-white/10 to-white/5 backdrop-blur-xl border-b border-white/10 p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div className={`p-3 rounded-2xl backdrop-blur-sm border ${\n                    showVouchModal.type === 'received' \n                      ? 'bg-emerald-500/10 border-emerald-400/30 text-emerald-300' \n                      : 'bg-red-500/10 border-red-400/30 text-red-300'\n                  }`}>\n                    {showVouchModal.type === 'received' ? (\n                      <ArrowDownLeft className=\"w-6 h-6\" />\n                    ) : (\n                      <ArrowUpRight className=\"w-6 h-6\" />\n                    )}\n                  </div>\n                  <div>\n                    <h2 className=\"text-2xl font-bold bg-gradient-to-r from-white via-white to-white/80 bg-clip-text text-transparent\">\n                      All Vouches {showVouchModal.type === 'received' ? 'Received' : 'Given'}\n                    </h2>\n                    <p className=\"text-white/60 mt-1 flex items-center gap-2\">\n                      <span className={`inline-flex items-center gap-1.5 px-3 py-1 rounded-full text-xs font-medium ${\n                        showVouchModal.type === 'received' \n                          ? 'bg-emerald-500/20 text-emerald-300' \n                          : 'bg-red-500/20 text-red-300'\n                      }`}>\n                        <span className=\"w-1.5 h-1.5 rounded-full bg-current animate-pulse\"></span>\n                        {showVouchModal.type === 'received' \n                          ? vouchData?.data.received?.length || 0 \n                          : vouchData?.data.given?.length || 0} total vouches\n                      </span>\n                    </p>\n                  </div>\n                </div>\n                <button \n                  onClick={() => setShowVouchModal({ type: null })}\n                  className=\"group p-3 hover:bg-white/10 rounded-2xl transition-all duration-300 hover:scale-105 min-h-[44px] min-w-[44px] flex items-center justify-center\"\n                >\n                  <X className=\"w-7 h-7 text-white/80 group-hover:text-white transition-colors stroke-2\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Compact Modal Content with Profile Navigation */}\n            <div className=\"p-4 overflow-y-auto max-h-[calc(85vh-120px)] modal-scroll\">\n              <div className=\"space-y-3\">\n                {(showVouchModal.type === 'received' ? vouchData?.data.received : vouchData?.data.given)?.map((vouch: any, index: number) => {\n                  const getDisplayName = () => {\n                    const userInfo = showVouchModal.type === 'received' ? vouch.voucherInfo : vouch.voucheeInfo;\n                    \n                    // First priority: displayName from userInfo\n                    if (userInfo?.displayName) return userInfo.displayName;\n                    \n                    // Second priority: username from userInfo\n                    if (userInfo?.username) return `@${userInfo.username}`;\n                    \n                    // Third priority: name from userInfo\n                    if (userInfo?.name) return userInfo.name;\n                    \n                    // Fallback: format userkey nicely\n                    const userkey = showVouchModal.type === 'received' ? vouch.voucher : vouch.vouchee;\n                    if (userkey) {\n                      if (userkey.startsWith('address:')) {\n                        const addr = userkey.split(':')[1];\n                        return addr ? `${addr.slice(0, 6)}...${addr.slice(-4)}` : 'Anonymous';\n                      } else if (userkey.startsWith('service:x.com:') || userkey.startsWith('service:twitter.com:')) {\n                        return 'Twitter User';\n                      } else if (userkey.startsWith('service:farcaster:')) {\n                        return 'Farcaster User';\n                      } else if (userkey.startsWith('profileId:')) {\n                        return `Profile ${userkey.split(':')[1]}`;\n                      }\n                    }\n                    return 'Anonymous';\n                  };\n\n                  const displayName = getDisplayName();\n                  const userInfo = showVouchModal.type === 'received' ? vouch.voucherInfo : vouch.voucheeInfo;\n                  const hasScore = userInfo?.score;\n                  const ethAmount = parseFloat(vouch.amountEth || '0.010');\n                  const targetUserkey = showVouchModal.type === 'received' ? vouch.voucher : vouch.vouchee;\n\n                  // Navigation handler for profile clicks\n                  const handleProfileClick = async (e: React.MouseEvent) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    \n                    if (!targetUserkey || targetUserkey === user?.userkeys?.[0]) return;\n                    \n                    try {\n                      // Check if we already have user info from the vouch data\n                      const existingUserInfo = showVouchModal.type === 'received' ? vouch.voucherInfo : vouch.voucheeInfo;\n                      \n                      if (existingUserInfo && existingUserInfo.displayName && existingUserInfo.score !== undefined) {\n                        // Use the existing user info if we have it\n                        const userData = {\n                          id: existingUserInfo.profileId || 0,\n                          profileId: existingUserInfo.profileId || 0,\n                          displayName: existingUserInfo.displayName,\n                          username: existingUserInfo.username || '',\n                          avatarUrl: existingUserInfo.avatarUrl || '',\n                          description: existingUserInfo.description || '',\n                          score: existingUserInfo.score,\n                          status: \"ACTIVE\",\n                          userkeys: [targetUserkey],\n                          xpTotal: 0,\n                          xpStreakDays: 0,\n                          links: {\n                            profile: `https://app.ethos.network/profile/${targetUserkey}`,\n                            scoreBreakdown: `https://app.ethos.network/profile/${targetUserkey}/score`\n                          },\n                          stats: {\n                            review: { received: { negative: 0, neutral: 0, positive: 0 } },\n                            vouch: { given: { amountWeiTotal: \"0\", count: 0 }, received: { amountWeiTotal: \"0\", count: 0 } }\n                          }\n                        };\n                        \n                        // Close the modal and navigate immediately\n                        setShowVouchModal({ type: null });\n                        \n                        setTimeout(() => {\n                          const newUrl = `/?user=${encodeURIComponent(JSON.stringify(userData))}`;\n                          window.history.pushState({}, '', newUrl);\n                          \n                          if (onUserSearch) {\n                            onUserSearch(userData);\n                          }\n                        }, 100);\n                        return;\n                      }\n                      \n                      // Fall back to API search if we don't have enough info\n                      const response = await fetch('/api/search', {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({ query: targetUserkey })\n                      });\n                      \n                      const contentType = response.headers.get('content-type');\n                      if (!contentType || !contentType.includes('application/json')) {\n                        throw new Error('Invalid response format');\n                      }\n                      \n                      const result = await response.json();\n                      \n                      if (result.success && result.data) {\n                        setShowVouchModal({ type: null });\n                        \n                        setTimeout(() => {\n                          const newUrl = `/?user=${encodeURIComponent(JSON.stringify(result.data))}`;\n                          window.history.pushState({}, '', newUrl);\n                          \n                          if (onUserSearch) {\n                            onUserSearch(result.data);\n                          }\n                        }, 100);\n                      }\n                    } catch (error) {\n                      // Silent error handling\n                    }\n                  };\n\n                  return (\n                    <div key={vouch.id || index} className=\"group relative\">\n                      <div className=\"relative bg-gradient-to-br from-white/8 via-white/4 to-white/8 backdrop-blur-xl rounded-xl border border-white/10 p-4 hover:border-white/20 hover:bg-gray-700/20 transition-all duration-300\">\n                        <div className=\"flex items-center justify-between gap-4\">\n                          {/* Compact User Info */}\n                          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                            <div className={`p-2 rounded-lg backdrop-blur-sm border flex-shrink-0 ${\n                              showVouchModal.type === 'received' \n                                ? 'bg-emerald-500/10 border-emerald-400/30 text-emerald-300' \n                                : 'bg-red-500/10 border-red-400/30 text-red-300'\n                            }`}>\n                              {showVouchModal.type === 'received' ? (\n                                <ArrowDownLeft className=\"w-4 h-4\" />\n                              ) : (\n                                <ArrowUpRight className=\"w-4 h-4\" />\n                              )}\n                            </div>\n                            \n                            <div className=\"flex-1 min-w-0\">\n                              {/* Name and Score Row */}\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <button\n                                  onClick={handleProfileClick}\n                                  className=\"group/name text-base font-bold bg-gradient-to-r from-white to-white/90 bg-clip-text text-transparent hover:from-cyan-200 hover:to-blue-200 transition-all duration-300 cursor-pointer flex items-center gap-1.5 truncate\"\n                                  disabled={!targetUserkey || targetUserkey === user?.userkeys?.[0]}\n                                >\n                                  <span className=\"truncate\">{displayName}</span>\n                                  {targetUserkey && targetUserkey !== user?.userkeys?.[0] && (\n                                    <ExternalLink className=\"w-3 h-3 text-white/50 group-hover/name:text-cyan-300 transition-colors opacity-0 group-hover:opacity-100 flex-shrink-0\" />\n                                  )}\n                                </button>\n                                \n                                {hasScore && (\n                                  <span className={`px-2 py-0.5 rounded-lg text-xs font-medium backdrop-blur-sm border flex-shrink-0 ${\n                                    userInfo.score >= 2000 \n                                      ? 'bg-purple-500/15 border-purple-400/30 text-purple-300' \n                                      : userInfo.score >= 1600 \n                                      ? 'bg-emerald-500/15 border-emerald-400/30 text-emerald-300'\n                                      : userInfo.score >= 1200\n                                      ? 'bg-blue-500/15 border-blue-400/30 text-blue-300'\n                                      : userInfo.score >= 800\n                                      ? 'bg-amber-500/15 border-amber-400/30 text-amber-300'\n                                      : 'bg-red-500/15 border-red-400/30 text-red-300'\n                                  }`}>\n                                    {userInfo.score}\n                                  </span>\n                                )}\n                              </div>\n                              \n                              {/* Date Row */}\n                              <div className=\"text-xs text-white/50\">\n                                {vouch.timestamp \n                                  ? new Date(vouch.timestamp * 1000).toLocaleDateString('en-US', {\n                                      month: 'short',\n                                      day: 'numeric',\n                                      year: 'numeric'\n                                    }) + ' at ' + new Date(vouch.timestamp * 1000).toLocaleTimeString('en-US', {\n                                      hour: '2-digit',\n                                      minute: '2-digit'\n                                    })\n                                  : 'Recent'\n                                }\n                              </div>\n                              \n                              {/* Comment (if exists) */}\n                              {vouch.comment && vouch.comment.trim() && (\n                                <div className=\"mt-2 bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-sm rounded-lg border border-white/10 p-2\">\n                                  <div className=\"flex items-start gap-2\">\n                                    <MessageSquare className=\"w-3 h-3 text-white/60 mt-0.5 flex-shrink-0\" />\n                                    <p className=\"text-xs text-white/80 leading-relaxed\">\n                                      \"{vouch.comment}\"\n                                    </p>\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {/* Compact Amount Display */}\n                          <div className=\"text-right flex-shrink-0\">\n                            <div className=\"flex items-center gap-1 font-bold text-lg text-white\">\n                              <span className=\"text-sm\">Œû</span>\n                              <span>{ethAmount.toFixed(3)}</span>\n                            </div>\n                            <div className=\"text-xs text-white/50 mt-0.5\">\n                              {formatCurrency(ethAmount * getEthUsdRate(exchangeRatesData))} USD\n                            </div>\n                            <div className={`text-xs mt-1 px-1.5 py-0.5 rounded-md backdrop-blur-sm ${\n                              showVouchModal.type === 'received' \n                                ? 'bg-emerald-500/20 text-emerald-300' \n                                : 'bg-red-500/20 text-red-300'\n                            }`}>\n                              {showVouchModal.type === 'received' ? 'Received' : 'Given'}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":92761},"client/src/components/user-vouch-intelligence.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { HandHeart, TrendingUp, Users, Coins } from \"lucide-react\";\nimport { useUserProfile, useUserStats } from \"@/hooks/use-ethos-api\";\nimport { useExchangeRates, getEthUsdRate } from \"@/hooks/use-exchange-rates\";\nimport { formatVouchAmount, calculateUsdValue, getVouchStats } from \"@/lib/vouch-utils\";\n\ninterface VouchDetail {\n  voucher: string;\n  vouchee: string;\n  amount: string;\n  amountEth: string;\n  timestamp: string;\n  comment?: string;\n  platform?: string;\n  voucherInfo?: {\n    displayName?: string;\n    username?: string;\n    userkey: string;\n    profileId?: number;\n    score?: number;\n  };\n  voucheeInfo?: {\n    displayName?: string;\n    username?: string;\n    userkey: string;\n    profileId?: number;\n    score?: number;\n  };\n}\n\ninterface UserVouchIntelligenceProps {\n  className?: string;\n  user?: any; // Accept user as prop\n}\n\nexport function UserVouchIntel({ className = \"\", user: propUser }: UserVouchIntelligenceProps) {\n  const { user: contextUser } = useUserProfile();\n  const user = propUser || contextUser; // Use prop user if provided, otherwise context user\n  const { data: userStats } = useUserStats(user?.userkeys?.[0]);\n  const { data: exchangeRatesData } = useExchangeRates();\n  const [vouchDetails, setVouchDetails] = useState<{\n    received: VouchDetail[];\n    given: VouchDetail[];\n    loading: boolean;\n    ethUsdRate?: number;\n  }>({\n    received: [],\n    given: [],\n    loading: true,\n  });\n  const [showGiven, setShowGiven] = useState(false);\n\n  useEffect(() => {\n    if (user?.userkeys?.[0]) {\n      fetchUserVouches();\n    }\n  }, [user]);\n\n  const fetchUserVouches = async () => {\n    if (!user?.userkeys?.[0]) return;\n\n    setVouchDetails(prev => ({ ...prev, loading: true }));\n\n    try {\n      const response = await fetch(`/api/user-vouch-activities/${encodeURIComponent(user.userkeys[0])}`);\n      const data = await response.json();\n\n      if (data.success) {\n        setVouchDetails({\n          received: data.data.received || [],\n          given: data.data.given || [],\n          loading: false,\n          ethUsdRate: data.data.ethUsdRate || 3400,\n        });\n      } else {\n\n        setVouchDetails({\n          received: [],\n          given: [],\n          loading: false,\n          ethUsdRate: 3400,\n        });\n      }\n    } catch (error) {\n\n      setVouchDetails({\n        received: [],\n        given: [],\n        loading: false,\n        ethUsdRate: 3400,\n      });\n    }\n  };\n\n  // Use shared utility function for consistency\n\n  const formatTimestamp = (timestamp: string | number) => {\n    let date: Date;\n    if (typeof timestamp === 'string') {\n      if (timestamp.includes('T')) {\n        date = new Date(timestamp);\n      } else {\n        date = new Date(parseInt(timestamp) * 1000);\n      }\n    } else {\n      date = new Date(timestamp * 1000);\n    }\n    \n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className={`space-y-3 ${className}`}>\n        <div className=\"text-center py-4\">\n          <HandHeart className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n          <div className=\"text-sm text-muted-foreground\">\n            Search for a user first to view their vouch intel\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Use shared utility for consistent data prioritization - same as Farcaster card\n  const vouchStats = getVouchStats(userStats, user?.stats);\n  const receivedStats = vouchStats.received;\n  const givenStats = vouchStats.given;\n\n  return (\n    <div className={`space-y-4 animate-slide-up miniapp-optimized ${className}`} style={{ animationDelay: '0.6s' }}>\n      {/* Ultra Modern Header with Floating Effect */}\n      <div className=\"relative\">\n        {/* Floating orb animation background */}\n        <div className=\"absolute -inset-2 bg-gradient-to-r from-cyan-400/20 via-purple-500/20 to-pink-500/20 rounded-3xl blur-xl opacity-70 animate-pulse\"></div>\n        \n        <div className=\"relative flex items-center justify-between p-4 backdrop-blur-xl bg-white/10 dark:bg-white/5 rounded-2xl border border-white/20 dark:border-white/15 shadow-2xl shadow-black/25 dark:shadow-black/80\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative p-2 bg-gradient-to-br from-pink-500/20 to-purple-600/20 rounded-xl backdrop-blur-sm\">\n              <HandHeart className=\"h-5 w-5 text-pink-400 animate-pulse\" />\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-r from-pink-400 to-rose-500 rounded-full animate-ping\"></div>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-bold bg-gradient-to-r from-pink-400 via-purple-400 to-cyan-400 bg-clip-text text-transparent\">\n                Vouch Intel\n              </h3>\n              <p className=\"text-xs text-white/60 dark:text-gray-400\">Trust Network Analysis</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 rounded-full bg-emerald-400 animate-pulse shadow-lg shadow-emerald-400/50\"></div>\n            <span className=\"text-xs font-medium text-white/80 dark:text-gray-300\">Live Data</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Redesigned Summary Cards with Premium Glassmorphism */}\n      <div className=\"relative\">\n        {/* Multi-layer background animation */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-emerald-500/10 via-blue-600/10 to-purple-600/10 rounded-3xl blur-xl animate-pulse\"></div>\n        <div className=\"absolute inset-1 bg-gradient-to-br from-cyan-400/5 via-transparent to-pink-400/5 rounded-2xl\"></div>\n        \n        <div className=\"relative p-5 bg-white/10 dark:bg-black/20 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-white/10 shadow-2xl\">\n          <div className=\"grid grid-cols-2 gap-6\">\n            {/* Received Section */}\n            <div className=\"text-center space-y-3\">\n              <div className=\"relative\">\n                <div className=\"p-3 bg-gradient-to-br from-emerald-500/20 to-green-600/20 rounded-xl backdrop-blur-sm border border-emerald-400/20\">\n                  <div className=\"text-2xl font-bold text-emerald-300 dark:text-emerald-400\">\n                    {receivedStats?.count || 0}\n                  </div>\n                  <div className=\"text-xs font-semibold text-emerald-400/80 dark:text-emerald-300/80 uppercase tracking-wider\">\n                    üíö Received\n                  </div>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-center space-x-1\">\n                  <Coins className=\"w-4 h-4 text-amber-400\" />\n                  <span className=\"text-sm font-bold text-white dark:text-gray-200\">\n                    {receivedStats?.amountWeiTotal ? formatVouchAmount(receivedStats.amountWeiTotal) : '0.000'} ETH\n                  </span>\n                </div>\n                {(() => {\n                  const currentEthRate = getEthUsdRate(exchangeRatesData) || vouchDetails.ethUsdRate || 3400;\n                  const amount = receivedStats?.amountWeiTotal ? parseFloat(formatVouchAmount(receivedStats.amountWeiTotal).replace('<', '')) : 0;\n                  const usdValue = amount * currentEthRate;\n                  return usdValue > 0 ? (\n                    <div className=\"text-xs text-emerald-400 dark:text-emerald-300 font-medium\">\n                      ${usdValue.toFixed(2)} USD\n                    </div>\n                  ) : null;\n                })()}\n              </div>\n            </div>\n            \n            {/* Vertical Divider */}\n            <div className=\"relative\">\n              <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 h-16 w-px bg-gradient-to-b from-transparent via-white/30 to-transparent\"></div>\n              \n              {/* Given Section */}\n              <div className=\"text-center space-y-3 pl-6\">\n                <div className=\"relative\">\n                  <div className=\"p-3 bg-gradient-to-br from-blue-500/20 to-indigo-600/20 rounded-xl backdrop-blur-sm border border-blue-400/20\">\n                    <div className=\"text-2xl font-bold text-blue-300 dark:text-blue-400\">\n                      {givenStats?.count || 0}\n                    </div>\n                    <div className=\"text-xs font-semibold text-blue-400/80 dark:text-blue-300/80 uppercase tracking-wider\">\n                      ü§ù Given\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-center space-x-1\">\n                    <Coins className=\"w-4 h-4 text-amber-400\" />\n                    <span className=\"text-sm font-bold text-white dark:text-gray-200\">\n                      {givenStats?.amountWeiTotal ? formatVouchAmount(givenStats.amountWeiTotal) : '0.000'} ETH\n                    </span>\n                  </div>\n                  {(() => {\n                    const currentEthRate = getEthUsdRate(exchangeRatesData) || vouchDetails.ethUsdRate || 3400;\n                    const amount = givenStats?.amountWeiTotal ? parseFloat(formatVouchAmount(givenStats.amountWeiTotal).replace('<', '')) : 0;\n                    const usdValue = amount * currentEthRate;\n                    return usdValue > 0 ? (\n                      <div className=\"text-xs text-blue-400 dark:text-blue-300 font-medium\">\n                        ${usdValue.toFixed(2)} USD\n                      </div>\n                    ) : null;\n                  })()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Ultra Modern Toggle with Floating Pills */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/10 via-pink-500/10 to-orange-500/10 rounded-2xl blur-lg\"></div>\n        \n        <div className=\"relative flex items-center justify-center p-2 bg-white/10 dark:bg-black/20 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-white/10\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowGiven(false)}\n            className={`h-10 px-4 text-sm rounded-xl transition-all duration-500 font-medium ${\n              !showGiven \n                ? 'bg-gradient-to-r from-emerald-500 to-green-600 text-white shadow-xl shadow-emerald-500/25 scale-105 border border-emerald-400/30' \n                : 'text-white/70 hover:text-white hover:bg-white/10'\n            }`}\n          >\n            <TrendingUp className=\"w-4 h-4 mr-2\" />\n            üíö Received ({receivedStats?.count || 0})\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowGiven(true)}\n            className={`h-10 px-4 text-sm rounded-xl transition-all duration-500 font-medium ${\n              showGiven \n                ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-xl shadow-blue-500/25 scale-105 border border-blue-400/30' \n                : 'text-white/70 hover:text-white hover:bg-white/10'\n            }`}\n          >\n            <Users className=\"w-4 h-4 mr-2\" />\n            ü§ù Given ({givenStats?.count || 0})\n          </Button>\n        </div>\n      </div>\n\n      {/* Premium Vouch Details with Enhanced Glassmorphism */}\n      <div className=\"relative\">\n        {vouchDetails.loading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"relative\">\n              <div className=\"w-8 h-8 border-3 border-pink-500/30 border-t-pink-500 rounded-full animate-spin\"></div>\n              <div className=\"absolute inset-0 w-8 h-8 border-3 border-transparent border-b-purple-500 rounded-full animate-spin animate-reverse\"></div>\n            </div>\n            <span className=\"ml-3 text-sm text-white/80 dark:text-gray-300 font-medium\">Loading vouches...</span>\n          </div>\n        ) : (\n          <div className=\"space-y-3 max-h-80 overflow-y-auto scrollbar-thin scrollbar-thumb-purple-400/50 scrollbar-track-transparent\">\n            {(showGiven ? vouchDetails.given : vouchDetails.received).length === 0 ? (\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-gray-400/10 to-gray-600/10 rounded-3xl blur-xl\"></div>\n                <div className=\"relative text-center py-8 space-y-4 bg-white/5 dark:bg-black/10 backdrop-blur-lg rounded-2xl border border-white/10\">\n                  <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-gray-300/20 to-gray-500/20 rounded-2xl flex items-center justify-center backdrop-blur-sm\">\n                    <HandHeart className=\"w-8 h-8 text-gray-400 dark:text-gray-500\" />\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-semibold text-white/80 dark:text-gray-300 mb-2\">\n                      {showGiven ? 'No vouches given yet' : 'No vouches received yet'}\n                    </div>\n                    <div className=\"text-xs text-white/60 dark:text-gray-500\">\n                      {showGiven ? 'Start vouching for others to build your giving history' : 'Build your reputation to start receiving vouches'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              (showGiven ? vouchDetails.given : vouchDetails.received).map((vouch, index) => {\n                const userInfo = showGiven ? vouch.voucheeInfo : vouch.voucherInfo;\n                const displayName = userInfo?.displayName || userInfo?.username || 'Anonymous';\n                const userScore = userInfo?.score;\n                const ethAmount = parseFloat(vouch.amountEth);\n                const usdAmount = vouchDetails.ethUsdRate ? ethAmount * vouchDetails.ethUsdRate : null;\n                \n                return (\n                  <div \n                    key={index} \n                    className=\"group relative\"\n                  >\n                    {/* Animated background */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-purple-500/10 to-pink-500/10 rounded-2xl blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    \n                    <div className=\"relative p-5 backdrop-blur-xl bg-white/10 dark:bg-white/5 rounded-2xl border border-white/20 dark:border-white/15 hover:border-white/25 dark:hover:border-white/20 transition-all duration-300 shadow-2xl shadow-black/25 dark:shadow-black/80 hover:shadow-2xl hover:scale-[1.02]\">\n                      {/* Header with enhanced styling */}\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${showGiven ? 'bg-blue-400 shadow-lg shadow-blue-400/50' : 'bg-emerald-400 shadow-lg shadow-emerald-400/50'} animate-pulse`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-bold text-white dark:text-gray-100 mb-1\">\n                              {showGiven ? 'üéØ Vouched:' : '‚ú® From:'} {displayName}\n                            </div>\n                            {userScore && (\n                              <div className=\"flex items-center space-x-1\">\n                                <div className=\"text-xs bg-gradient-to-r from-purple-400/20 to-pink-400/20 text-purple-300 px-2 py-0.5 rounded-full border border-purple-400/20\">\n                                  Trust Score: {userScore}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Enhanced Amount Display */}\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center space-x-2 p-2 bg-gradient-to-br from-amber-500/20 to-orange-500/20 rounded-xl backdrop-blur-sm border border-amber-400/20\">\n                            <Coins className=\"w-4 h-4 text-amber-300\" />\n                            <span className=\"text-sm font-bold text-amber-200\">ü™ô {ethAmount.toFixed(3)}</span>\n                          </div>\n                          {usdAmount && (\n                            <div className=\"text-xs text-white/60 dark:text-gray-400 mt-1\">\n                              ${usdAmount.toFixed(2)} USD\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Bottom section with enhanced styling */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"text-xs text-white/60 dark:text-gray-400 bg-white/10 px-2 py-1 rounded-lg\">\n                            üìÖ {formatTimestamp(vouch.timestamp)}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          {vouch.platform && (\n                            <div className=\"px-3 py-1 bg-gradient-to-r from-gray-500/20 to-gray-600/20 rounded-lg text-xs font-medium text-white border border-gray-400/20 backdrop-blur-sm\">\n                              {vouch.platform === 'x.com' ? 'ùïè Twitter' : vouch.platform}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Enhanced Comment Section */}\n                      {vouch.comment && vouch.comment.trim() && (\n                        <div className=\"mt-4 pt-4 border-t border-white/10\">\n                          <div className=\"p-3 bg-white/5 dark:bg-black/10 rounded-xl border border-white/10 backdrop-blur-sm\">\n                            <div className=\"text-xs text-white/80 dark:text-gray-300 leading-relaxed\">\n                              üí≠ \"{vouch.comment.length > 120 ? vouch.comment.slice(0, 120) + '...' : vouch.comment}\"\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Enhanced Trust Insights */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500/10 via-purple-500/10 to-pink-500/10 rounded-3xl blur-xl\"></div>\n        <div className=\"relative p-5 bg-white/10 dark:bg-black/20 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-white/10 shadow-2xl\">\n          {receivedStats?.count && givenStats?.count ? (\n            <div className=\"space-y-4\">\n              <div className=\"text-center mb-4\">\n                <h4 className=\"text-sm font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-1\">\n                  üéØ Trust Analytics\n                </h4>\n                <p className=\"text-xs text-white/60 dark:text-gray-400\">Advanced network insights</p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-xl backdrop-blur-sm border border-purple-400/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 rounded-full bg-gradient-to-r from-purple-400 to-pink-500\"></div>\n                      <span className=\"text-xs font-medium text-white/90\">Trust Ratio</span>\n                    </div>\n                  </div>\n                  <div className=\"mt-2 text-lg font-bold bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent\">\n                    {Math.round((receivedStats.count / (givenStats.count + receivedStats.count)) * 100)}%\n                  </div>\n                  <div className=\"text-xs text-white/60\">received</div>\n                </div>\n                \n                <div className=\"p-3 bg-gradient-to-br from-orange-500/20 to-yellow-500/20 rounded-xl backdrop-blur-sm border border-orange-400/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 rounded-full bg-gradient-to-r from-orange-400 to-yellow-500\"></div>\n                      <span className=\"text-xs font-medium text-white/90\">Avg Amount</span>\n                    </div>\n                  </div>\n                  <div className=\"mt-2 text-lg font-bold bg-gradient-to-r from-orange-300 to-yellow-300 bg-clip-text text-transparent\">\n                    {formatVouchAmount(((parseFloat((receivedStats.amountWeiTotal || 0).toString()) + parseFloat((givenStats.amountWeiTotal || 0).toString())) / (receivedStats.count + givenStats.count)).toString())}\n                  </div>\n                  <div className=\"text-xs text-white/60\">ETH per vouch</div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              <div className=\"w-12 h-12 mx-auto bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl flex items-center justify-center mb-3\">\n                <HandHeart className=\"w-6 h-6 text-blue-400\" />\n              </div>\n              <div className=\"text-sm font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent mb-2\">\n                üöÄ Building Trust Network\n              </div>\n              <div className=\"text-xs text-white/60 dark:text-gray-400\">\n                Start vouching to unlock advanced analytics\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22400},"client/src/components/v1-score-breakdown.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, TrendingDown, Zap, Shield, Users, MessageSquare, Award, Coins } from \"lucide-react\";\n\ninterface V1ScoreBreakdownProps {\n  userkey: string;\n  className?: string;\n}\n\ninterface V1ApiResponse {\n  data: {\n    data: {\n      score: number;\n      elements: { [key: string]: any };\n    };\n  };\n}\n\nexport function V1ScoreBreakdown({ userkey, className = \"\" }: V1ScoreBreakdownProps) {\n  const { data: v1Score, isLoading } = useQuery<V1ApiResponse>({\n    queryKey: ['/api/v1-score', userkey],\n    enabled: !!userkey,\n  });\n\n  if (isLoading) {\n    return (\n      <div className={`bg-gradient-to-br from-white/80 to-white/60 dark:from-zinc-900/80 dark:to-zinc-800/60 backdrop-blur-xl rounded-3xl p-6 border border-white/20 dark:border-zinc-700/30 shadow-xl ${className}`}>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-zinc-200 dark:bg-zinc-700 rounded\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-zinc-200 dark:bg-zinc-700 rounded\"></div>\n            <div className=\"h-4 bg-zinc-200 dark:bg-zinc-700 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-zinc-200 dark:bg-zinc-700 rounded w-1/2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!v1Score?.data?.data?.elements) {\n    return (\n      <div className={`bg-gradient-to-br from-white/80 to-white/60 dark:from-zinc-900/80 dark:to-zinc-800/60 backdrop-blur-xl rounded-3xl p-6 border border-white/20 dark:border-zinc-700/30 shadow-xl ${className}`}>\n        <div className=\"text-center py-8\">\n          <Shield className=\"w-12 h-12 mx-auto mb-4 text-zinc-400\" />\n          <h3 className=\"text-lg font-semibold text-zinc-800 dark:text-zinc-200 mb-2\">Score Analysis Unavailable</h3>\n          <p className=\"text-zinc-600 dark:text-zinc-400 text-sm\">V1 score breakdown not available for this user</p>\n        </div>\n      </div>\n    );\n  }\n\n  const elements = v1Score.data.data.elements;\n  const totalScore = v1Score.data.data.score;\n\n  const getElementIcon = (name: string) => {\n    if (name.includes('Review')) return <MessageSquare className=\"w-4 h-4\" />;\n    if (name.includes('Vouch') || name.includes('Ethereum')) return <Coins className=\"w-4 h-4\" />;\n    if (name.includes('Social') || name.includes('Twitter')) return <Users className=\"w-4 h-4\" />;\n    if (name.includes('Reputation')) return <Award className=\"w-4 h-4\" />;\n    return <Zap className=\"w-4 h-4\" />;\n  };\n\n  const getElementColor = (weighted: number) => {\n    if (weighted > 100) return 'text-green-600 dark:text-green-400';\n    if (weighted > 50) return 'text-blue-600 dark:text-blue-400';\n    if (weighted > 0) return 'text-yellow-600 dark:text-yellow-400';\n    if (weighted < 0) return 'text-red-600 dark:text-red-400';\n    return 'text-zinc-600 dark:text-zinc-400';\n  };\n\n  const sortedElements = Object.entries(elements)\n    .map(([name, element]: [string, any]) => ({ name, element, weighted: element.weighted, raw: element.raw }))\n    .sort((a, b) => Math.abs(b.weighted) - Math.abs(a.weighted));\n\n  return (\n    <div className={`bg-gradient-to-br from-white/80 to-white/60 dark:from-zinc-900/80 dark:to-zinc-800/60 backdrop-blur-xl rounded-3xl p-6 border border-white/20 dark:border-zinc-700/30 shadow-xl ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center gap-3 mb-6\">\n        <div className=\"w-3 h-3 bg-emerald-500 rounded-full animate-pulse\"></div>\n        <h3 className=\"text-lg font-semibold text-zinc-800 dark:text-zinc-200\">V1 Score Analysis</h3>\n        <Badge variant=\"secondary\" className=\"ml-auto\">\n          Total: {totalScore}\n        </Badge>\n      </div>\n\n      {/* Score Elements */}\n      <div className=\"space-y-4\">\n        {sortedElements.map(({ name, weighted, raw, element }) => {\n          const maxRange = element.range?.max || Math.max(100, Math.abs(weighted) * 1.2);\n          const percentage = Math.min(100, (Math.abs(weighted) / maxRange) * 100);\n          \n          return (\n            <Card key={name} className=\"p-4 bg-white/40 dark:bg-zinc-800/40 border-white/20 dark:border-zinc-700/20\">\n              <div className=\"flex items-start gap-3\">\n                <div className={`mt-1 ${getElementColor(weighted)}`}>\n                  {getElementIcon(name)}\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200 truncate\">\n                      {name.replace(' Impact', '').replace(' Penalty', '')}\n                    </h4>\n                    <div className=\"flex items-center gap-2\">\n                      {weighted > 0 ? (\n                        <TrendingUp className=\"w-3 h-3 text-green-500\" />\n                      ) : weighted < 0 ? (\n                        <TrendingDown className=\"w-3 h-3 text-red-500\" />\n                      ) : null}\n                      <span className={`text-sm font-semibold ${getElementColor(weighted)}`}>\n                        {weighted > 0 ? '+' : ''}{weighted}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <Progress \n                    value={percentage} \n                    className=\"h-2 mb-2\"\n                  />\n                  \n                  <div className=\"flex items-center justify-between text-xs text-zinc-600 dark:text-zinc-400\">\n                    <span>Raw: {raw}</span>\n                    {element.range && (\n                      <span>Range: {element.range.min} to {element.range.max}</span>\n                    )}\n                  </div>\n                  \n                  {/* Metadata highlights */}\n                  {element.metadata && (\n                    <div className=\"mt-2 flex flex-wrap gap-1\">\n                      {element.metadata.positiveReviewCount > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {element.metadata.positiveReviewCount} reviews\n                        </Badge>\n                      )}\n                      {element.metadata.vouches > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {element.metadata.vouches} vouches\n                        </Badge>\n                      )}\n                      {element.metadata.stakedEth > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {element.metadata.stakedEth.toFixed(4)} ETH\n                        </Badge>\n                      )}\n                      {element.metadata.mutualVouches > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {element.metadata.mutualVouches} mutual\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Summary */}\n      <div className=\"mt-6 pt-4 border-t border-white/20 dark:border-zinc-700/20\">\n        <div className=\"grid grid-cols-2 gap-4 text-center\">\n          <div>\n            <div className=\"text-sm text-zinc-600 dark:text-zinc-400\">Elements</div>\n            <div className=\"text-lg font-semibold text-zinc-800 dark:text-zinc-200\">\n              {Object.keys(elements).length}\n            </div>\n          </div>\n          <div>\n            <div className=\"text-sm text-zinc-600 dark:text-zinc-400\">Active</div>\n            <div className=\"text-lg font-semibold text-emerald-600 dark:text-emerald-400\">\n              {sortedElements.filter(e => e.weighted !== 0).length}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7994},"client/src/components/wallet-scanner.tsx":{"content":"import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { debounce } from '@/utils/performance';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Sparkles, Zap, ChevronDown } from \"lucide-react\";\nimport { useSearchUser, useSearchUserByFarcaster, useUserProfile } from \"@/hooks/use-ethos-api\";\nimport { LoadingOverlay } from \"@/components/loading-overlay\";\nimport { SearchSuggestions } from \"@/components\";\nimport { SiFarcaster } from \"react-icons/si\";\n\nconst SEARCH_TYPES = [\n  { \n    type: 'auto', \n    label: 'Smart Search', \n    icon: 'üîç',\n    description: 'AI-powered detection',\n    placeholder: 'Enter wallet address, ENS, username, or handle...'\n  },\n  { \n    type: 'farcaster', \n    label: 'Farcaster', \n    icon: <SiFarcaster className=\"w-3 h-3\" />,\n    description: 'Search by Farcaster username',\n    placeholder: 'Enter Farcaster username (e.g., vitalik.eth)...'\n  }\n];\n\nexport function WalletScanner() {\n  const [query, setQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"auto\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [showTypeSelector, setShowTypeSelector] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [farcasterMode, setFarcasterMode] = useState(false);\n  const [showFarcasterAnimation, setShowFarcasterAnimation] = useState(false);\n  const searchMutation = useSearchUser();\n  const farcasterSearchMutation = useSearchUserByFarcaster();\n  const { user, setUser } = useUserProfile();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Show compact version when user data is loaded\n  const isCompactMode = !!user;\n  const DEBOUNCE_DELAY = 500; // Match ethos-r4r approach\n  const MIN_SEARCH_LENGTH = 3; // Match ethos-r4r approach\n\n  const selectedTypeInfo = SEARCH_TYPES.find(t => t.type === selectedType) || SEARCH_TYPES[0];\n\n\n\n  const handleSearch = async () => {\n    if (!query.trim()) return;\n    setShowSuggestions(false);\n\n    let result;\n    \n    if (farcasterMode || selectedType === 'farcaster') {\n      result = await farcasterSearchMutation.mutateAsync({\n        farcasterUsername: query.trim(),\n      });\n    } else {\n      result = await searchMutation.mutateAsync({\n        query: query.trim(),\n        searchType: selectedType === 'auto' ? undefined : selectedType,\n      });\n    }\n\n    if (result.success && result.data) {\n      const searchMode = (farcasterMode || selectedType === 'farcaster') ? 'farcaster' : 'global';\n      setUser(result.data, searchMode);\n    }\n  };\n\n  const toggleFarcasterMode = () => {\n    const newFarcasterMode = !farcasterMode;\n    setFarcasterMode(newFarcasterMode);\n    \n    if (newFarcasterMode) {\n      // Switching to Farcaster mode - trigger subtle animation and clear query\n      setShowFarcasterAnimation(true);\n      setQuery(\"\");\n      setShowSuggestions(false);\n      inputRef.current?.focus();\n      \n      // Hide animation after 2 seconds - shorter and more subtle\n      setTimeout(() => {\n        setShowFarcasterAnimation(false);\n      }, 2000);\n    } else {\n      // Switching from Farcaster mode back to global search\n      setShowSuggestions(false);\n      setShowFarcasterAnimation(false);\n    }\n  };\n\n  const handleSuggestionSelect = async (suggestion: { userkey: string; displayName: string; username: string; avatarUrl?: string; score?: number; description?: string }) => {\n    setQuery(suggestion.displayName || suggestion.username || suggestion.userkey);\n    setShowSuggestions(false);\n    \n    // Convert suggestion directly to user object with basic data, stats will be fetched separately\n    const userData = {\n      id: 0,\n      profileId: 0,\n      displayName: suggestion.displayName,\n      username: suggestion.username,\n      avatarUrl: suggestion.avatarUrl || '',\n      description: suggestion.description || '',\n      score: suggestion.score || 0,\n      status: \"ACTIVE\",\n      userkeys: [suggestion.userkey],\n      xpTotal: Math.floor((suggestion.score || 0) * 1.2),\n      xpStreakDays: Math.floor(Math.random() * 30),\n      links: {\n        profile: `https://app.ethos.network/profile/${suggestion.userkey}`,\n        scoreBreakdown: `https://app.ethos.network/profile/${suggestion.userkey}/score`\n      },\n      stats: {\n        review: {\n          received: { positive: 0, neutral: 0, negative: 0 }\n        },\n        vouch: {\n          given: { amountWeiTotal: 0, count: 0 },\n          received: { amountWeiTotal: 0, count: 0 }\n        }\n      }\n    };\n\n    const searchMode = farcasterMode ? 'farcaster' : 'global';\n    setUser(userData, searchMode);\n  };\n\n  // Optimized input handler for fast typing scenarios\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setQuery(value);\n    \n    // Clear existing timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n    \n    // Show suggestions immediately for responsive typing experience\n    const minLength = farcasterMode ? 1 : 2; // Reduced minimum for faster suggestions\n    if (value.length >= minLength) {\n      setShowSuggestions(true);\n    } else {\n      setShowSuggestions(false);\n    }\n  }, [farcasterMode]);\n\n  const handleInputFocus = () => {\n    setIsFocused(true);\n    const minLength = farcasterMode ? 1 : 2; // Reduced for faster response\n    if (query.length >= minLength) setShowSuggestions(true);\n  };\n\n  const handleInputBlur = () => {\n    setIsFocused(false);\n    // Delay hiding suggestions to allow for clicks\n    setTimeout(() => setShowSuggestions(false), 200);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  // Compact glass search bar for when user is loaded\n  if (isCompactMode) {\n    return (\n      <>\n        <div className=\"glass-compact-search relative\">\n          {/* Floating orbs for compact search */}\n          <div className=\"absolute top-1 right-2 w-4 h-4 bg-gradient-to-r from-emerald-400/30 to-teal-400/20 dark:from-gray-400/30 dark:to-gray-500/20 rounded-full floating-orb floating-orb-1\"></div>\n          <div className=\"absolute bottom-1 left-16 w-3 h-3 bg-gradient-to-r from-rose-400/25 to-pink-400/15 dark:from-gray-500/25 dark:to-gray-600/15 rounded-full floating-orb floating-orb-2\"></div>\n          \n          <div className=\"glass-search-wrapper\">\n            <div className=\"glass-search-icon\">\n              {searchMutation.isPending ? (\n                <div className=\"glass-spinner\"></div>\n              ) : (\n                <Search className=\"w-4 h-4 text-white/70 dark:text-gray-600\" />\n              )}\n            </div>\n            \n            <Input\n              ref={inputRef}\n              type=\"text\"\n              placeholder=\"Search another user...\"\n              value={query}\n              onChange={handleInputChange}\n              onKeyPress={handleKeyPress}\n              onFocus={handleInputFocus}\n              onBlur={handleInputBlur}\n              style={{\n                background: 'rgba(255, 255, 255, 0.1)',\n                backdropFilter: 'blur(10px)',\n                WebkitBackdropFilter: 'blur(10px)'\n              }}\n              className=\"glass-search-input flex-1 border-none text-white/90 dark:text-gray-700 placeholder:text-white/50 dark:placeholder:text-gray-500 focus-visible:ring-0 focus-visible:ring-offset-0 rounded-xl pr-12\"\n            />\n            \n            <button\n              onClick={handleSearch}\n              disabled={!query.trim() || searchMutation.isPending}\n              className={`\n                glass-search-button transition-all duration-500 ease-out\n                ${query.trim() ? 'hover:scale-105 active:scale-95' : ''}\n              `}\n              style={{\n                filter: query.trim() \n                  ? 'drop-shadow(0 0 6px rgba(59, 130, 246, 0.6))'\n                  : 'none'\n              }}\n            >\n              <Zap className={`w-4 h-4 transition-all duration-500 ease-out ${\n                query.trim() \n                  ? 'text-white dark:text-gray-700 animate-pulse' \n                  : 'text-white/80 dark:text-gray-600'\n              }`}\n              style={{\n                fill: query.trim() ? 'rgba(255, 255, 255, 0.9)' : 'transparent'\n              }}\n              />\n            </button>\n          </div>\n          \n          {/* Search suggestions positioned directly under the search wrapper */}\n          <SearchSuggestions\n            query={query}\n            onSelect={handleSuggestionSelect}\n            isVisible={showSuggestions}\n            onVisibilityChange={setShowSuggestions}\n            farcasterMode={farcasterMode}\n            inputRef={inputRef}\n          />\n        </div>\n        \n        <LoadingOverlay \n          isVisible={searchMutation.isPending}\n        />\n      </>\n    );\n  }\n\n  // Full modern search interface for initial state\n  return (\n    <>\n      <div className=\"w-full max-w-full\">\n        <div className=\"search-container relative backdrop-blur-md bg-white/12 light:bg-white/15 dark:bg-white/12 border border-white/18 light:border-white/25 dark:border-white/18 rounded-3xl p-6 md:p-6 px-5 transition-all duration-500 w-full max-w-full pb-7 shadow-2xl shadow-black/20 light:shadow-black/30 dark:shadow-black/15 space-y-4 z-50\">\n          {/* Enhanced floating background elements */}\n          <div className=\"absolute -top-6 -right-6 w-12 h-12 bg-gradient-to-br from-blue-400/15 to-cyan-400/12 light:from-gray-600/12 light:to-gray-700/10 rounded-full blur-xl animate-pulse\"></div>\n          <div className=\"absolute -bottom-4 -left-4 w-8 h-8 bg-gradient-to-br from-purple-400/12 to-pink-400/10 light:from-gray-500/12 light:to-gray-600/10 rounded-full blur-xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\n          \n          {/* Main container inner border glow */}\n          <div className=\"absolute inset-0 rounded-3xl border border-white/15 pointer-events-none\"></div>\n            \n          {/* Redesigned Search Bar */}\n          <div className=\"relative mb-4 z-[100]\">\n            <div className=\"group relative\">\n              {/* Main search container with enhanced glassmorphism + Farcaster mode */}\n              <div className={`\n                relative backdrop-blur-sm bg-white/10 dark:bg-white/8 light:bg-white/12\n                border border-white/20 dark:border-white/15 light:border-white/22 rounded-2xl overflow-hidden \n                transition-all duration-300 ease-out group\n                shadow-xl shadow-black/15 dark:shadow-black/25 light:shadow-black/20\n                hover:bg-white/12 dark:hover:bg-white/10 light:hover:bg-white/15\n                hover:border-white/25 dark:hover:border-white/18 light:hover:border-white/28\n                hover:shadow-2xl hover:shadow-black/20 dark:hover:shadow-black/30 light:hover:shadow-black/25\n                hover:scale-[1.01]\n                ${farcasterMode \n                  ? 'border-purple-500/70 shadow-lg shadow-purple-500/20 bg-gradient-to-r from-purple-500/15 dark:from-purple-900/20 via-purple-400/8 dark:via-purple-800/15 to-purple-500/15 dark:to-purple-900/20' + \n                    (showFarcasterAnimation ? ' shadow-xl shadow-purple-500/30' : '')\n                  : ''\n                }\n              `}>\n                \n                {/* Enhanced glassmorphism overlays */}\n                <div className=\"search-input-overlays\"></div>\n                \n                {/* Input field */}\n                <div className=\"relative\">\n                  <Input\n                    ref={inputRef}\n                    type=\"text\"\n                    placeholder={farcasterMode ? \"Enter Farcaster username (e.g., vitalik.eth)\" : \"Enter @username to search\"}\n                    value={query}\n                    onChange={handleInputChange}\n                    onKeyPress={handleKeyPress}\n                    onFocus={handleInputFocus}\n                    onBlur={handleInputBlur}\n\n                    autoComplete=\"off\"\n                    autoCorrect=\"off\"\n                    autoCapitalize=\"off\"\n                    spellCheck=\"false\"\n                    style={{\n                      background: 'rgba(255, 255, 255, 0.02)',\n                      backdropFilter: 'none',\n                      WebkitBackdropFilter: 'none',\n                      textShadow: document.documentElement.classList.contains('dark') ? 'none' : '1px 1px 2px rgba(0,0,0,0.5)'\n                    }}\n                    className={`\n                      w-full px-4 py-3 pr-12 border-none \n                      text-white dark:text-slate-900 light:text-gray-300 text-lg font-medium dark:font-extrabold light:font-normal\n                      placeholder:font-medium placeholder-gray-400 dark:placeholder:text-slate-600 dark:placeholder:font-semibold\n                      focus-visible:ring-0 focus-visible:ring-offset-0 focus:outline-none\n                      transition-all duration-200 rounded-2xl min-h-[50px]\n                      ${farcasterMode \n                        ? 'placeholder:text-purple-200/90 dark:placeholder:text-purple-800' \n                        : 'placeholder-gray-400 dark:placeholder:text-slate-600'\n                      }\n                      ${isFocused ? 'placeholder:text-gray-300 dark:placeholder:text-slate-500' : ''}\n                    `}\n                  />\n                  \n                  {/* Loading indicator */}\n                  {searchMutation.isPending && (\n                    <div className=\"absolute right-4 md:right-4 right-3 top-1/2 transform -translate-y-1/2\">\n                      <div className={`w-5 h-5 md:w-5 md:h-5 w-4 h-4 border-2 rounded-full animate-spin ${\n                        farcasterMode \n                          ? 'border-purple-400/20 border-t-purple-300/80 dark:border-purple-600/20 dark:border-t-purple-400/80' \n                          : 'border-white/20 border-t-white/80 dark:border-gray-600/20 dark:border-t-gray-400/80'\n                      }`}></div>\n                    </div>\n                  )}\n                  \n                  {/* Enhanced Search Bolt Icon with Dynamic Fill Animation */}\n                  {!searchMutation.isPending && (\n                    <div className=\"absolute right-1 top-1/2 transform -translate-y-1/2 z-50\">\n                      <button\n                        onClick={handleSearch}\n                        disabled={!query.trim()}\n                        className={`\n                          p-2 transition-all duration-300 ease-out\n                          ${!query.trim() \n                            ? 'opacity-40 cursor-not-allowed' \n                            : 'opacity-100 hover:scale-110'\n                          }\n                        `}\n                        style={{\n                          background: 'transparent',\n                          border: 'none',\n                          backdropFilter: 'none',\n                          WebkitBackdropFilter: 'none'\n                        }}\n                      >\n                        <Zap className={`w-6 h-6 transition-all duration-500 ease-out ${\n                          query.trim() \n                            ? farcasterMode \n                              ? 'text-purple-300 drop-shadow-lg animate-pulse fill-purple-300' \n                              : 'text-yellow-300 drop-shadow-lg animate-pulse fill-yellow-300'\n                            : farcasterMode \n                              ? 'text-purple-200/50' \n                              : 'text-gray-300/50 dark:text-white/50'\n                        }`} \n                        style={{\n                          filter: query.trim() \n                            ? farcasterMode\n                              ? 'drop-shadow(0 0 8px rgba(147, 51, 234, 0.6))'\n                              : 'drop-shadow(0 0 8px rgba(234, 179, 8, 0.6))'\n                            : 'none',\n                          fill: query.trim() \n                            ? farcasterMode\n                              ? 'rgba(147, 51, 234, 0.8)'\n                              : 'rgba(234, 179, 8, 0.8)'\n                            : 'transparent'\n                        }}\n                        />\n                      </button>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Bottom subtle glow */}\n                <div className={`\n                  absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1/2 h-px \n                  bg-gradient-to-r from-transparent via-gray-400/40 dark:via-white/30 to-transparent\n                  transition-opacity duration-500\n                  ${isFocused ? 'opacity-100' : 'opacity-0'}\n                `}></div>\n                \n              </div>\n              \n              {/* Search suggestions positioned directly under the input field */}\n              <div className=\"relative z-[9999]\">\n                <SearchSuggestions\n                  query={query}\n                  onSelect={handleSuggestionSelect}\n                  isVisible={showSuggestions}\n                  onVisibilityChange={setShowSuggestions}\n                  farcasterMode={farcasterMode}\n                  inputRef={inputRef}\n                />\n              </div>\n              \n              {/* Floating particles for enhanced aesthetics */}\n              <div className={`absolute -top-2 -right-2 w-3 h-3 rounded-full blur-sm animate-pulse opacity-60 ${\n                farcasterMode ? 'bg-purple-400/30 dark:bg-purple-300/25' : 'bg-white/20'\n              }`}></div>\n              <div className={`absolute -bottom-2 -left-2 w-2 h-2 rounded-full blur-sm animate-pulse opacity-40 ${\n                farcasterMode ? 'bg-purple-300/25 dark:bg-purple-200/20' : 'bg-white/20'\n              }`} style={{ animationDelay: '1s' }}></div>\n              \n              {/* Farcaster activation - subtle glow ring */}\n              {showFarcasterAnimation && (\n                <div className=\"absolute -inset-1 rounded-2xl bg-gradient-to-r from-purple-500/20 via-purple-400/10 to-purple-500/20 dark:from-purple-400/15 dark:via-purple-300/8 dark:to-purple-400/15 animate-pulse opacity-60\"></div>\n              )}\n            </div>\n            \n\n\n            {/* Compact Farcaster Toggle */}\n            <div className=\"flex justify-center mb-1 mt-2\">\n              <button\n                onClick={() => setFarcasterMode(!farcasterMode)}\n                className={`\n                  backdrop-blur-xl bg-white/10 dark:bg-white/20 border border-white/20 dark:border-white/30\n                  rounded-xl px-3 py-1.5 flex items-center gap-2 transition-all duration-300 \n                  shadow-lg hover:shadow-xl hover:scale-105\n                  ${farcasterMode \n                    ? 'bg-purple-600/80 dark:bg-purple-400/30 border-purple-500/50 dark:border-purple-400/50 shadow-purple-500/25' \n                    : 'hover:bg-white/15 dark:hover:bg-white/25'\n                  }\n                `}\n              >\n                <SiFarcaster className={`w-3 h-3 transition-colors duration-300 ${\n                  farcasterMode ? 'text-white dark:text-gray-800' : 'text-purple-400 dark:text-purple-600'\n                }`} />\n                <span className={`text-sm font-medium transition-colors duration-300 ${\n                  farcasterMode ? 'text-white dark:text-gray-800' : 'text-white/80 dark:text-gray-600'\n                }`}>\n                  {farcasterMode ? 'Farcaster Mode' : 'Switch to Farcaster'}\n                </span>\n                {farcasterMode && (\n                  <span className=\"text-[8px] font-bold px-1.5 py-0.5 bg-white/20 dark:bg-gray-600/40 text-white/90 dark:text-gray-200 rounded-md\">\n                    Œ≤\n                  </span>\n                )}\n              </button>\n            </div>\n            \n            {/* Optimized Farcaster Beta Notice */}\n            {farcasterMode && (\n              <div className=\"flex justify-center mb-1\">\n                <div className=\"flex items-center gap-2 px-3 py-1 backdrop-blur-md bg-blue-900/15 dark:bg-blue-400/20 border border-blue-500/20 dark:border-blue-400/30 rounded-xl text-blue-200/80 dark:text-blue-700 text-xs\">\n                  <span className=\"w-1.5 h-1.5 bg-blue-400 dark:bg-blue-600 rounded-full animate-pulse\"></span>\n                  <span>Experimental feature</span>\n                </div>\n              </div>\n            )}\n            \n\n\n          </div>\n          \n\n            \n\n\n          {searchMutation.error && (\n            <div className=\"glass-error-message\">\n              {searchMutation.error.message}\n            </div>\n          )}\n          \n          {/* Reduced auto-detection component space */}\n          <div className=\"h-8\"></div>\n\n          {/* Built On Ethos Network text at bottom edge */}\n          <div className=\"absolute bottom-2 left-6 right-6\">\n            <div className=\"flex items-center justify-center gap-2 text-white/60 text-sm\">\n              <span className=\"text-white/60 dark:text-gray-600\">Built On Ethos Network</span>\n              <img \n                src=\"https://i.ibb.co/jPDG2NX5/ethos-network1719934757538-removebg-preview.png\" \n                alt=\"Ethos Logo\" \n                className=\"w-5 h-5 opacity-60 rounded-full\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <LoadingOverlay \n        isVisible={searchMutation.isPending}\n      />\n    </>\n  );\n}\n","size_bytes":21747},"client/src/hooks/use-attestations.ts":{"content":"import { useQuery } from '@tanstack/react-query';\n\nexport interface SocialAttestation {\n  service: string;\n  serviceName: string;\n  icon: string;\n  account: string;\n  username: string;\n  displayName: string;\n  avatar: string;\n  website: string;\n  followers: number;\n  verified: boolean;\n  createdAt: number;\n  joinedAt?: number | null;\n}\n\nexport function useAttestations(userkey: string, enabled = true) {\n  return useQuery({\n    queryKey: ['/api/attestations', userkey],\n    enabled: enabled && !!userkey,\n    staleTime: 30 * 1000, // 30 seconds for faster loading\n    retry: 0,\n    networkMode: 'online',\n  });\n}","size_bytes":614},"client/src/hooks/use-dashboard-reviews.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface DashboardReviewsData {\n  totalReviews: number;\n  positiveReviews: number;\n  neutralReviews: number;\n  negativeReviews: number;\n  positivePercentage: number;\n}\n\nexport function useDashboardReviews(userkey: string | undefined) {\n  return useQuery({\n    queryKey: ['/api/dashboard-reviews', userkey],\n    enabled: !!userkey,\n    staleTime: 30 * 1000, // 30 seconds for faster loading\n    gcTime: 60 * 1000, // 1 minute\n    retry: 0,\n    networkMode: 'online',\n  });\n}","size_bytes":532},"client/src/hooks/use-debounced-search.ts":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { debounce } from '@/utils/performance';\n\nexport function useDebouncedSearch(query: string, delay: number = 300) {\n  const [debouncedQuery, setDebouncedQuery] = useState(query);\n\n  const debouncedSetQuery = useMemo(\n    () => debounce((newQuery: string) => {\n      setDebouncedQuery(newQuery);\n    }, delay),\n    [delay]\n  );\n\n  useEffect(() => {\n    debouncedSetQuery(query);\n  }, [query, debouncedSetQuery]);\n\n  return debouncedQuery;\n}","size_bytes":499},"client/src/hooks/use-ethos-api.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { searchUser, searchUserByFarcaster, getTrustScore, generateShareContent, EthosUser, TrustScore } from \"@/lib/ethos-client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useSearchUser() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ query, searchType }: { query: string; searchType?: string }) =>\n      searchUser(query, searchType),\n    onError: (error: Error) => {\n      toast({\n        title: \"Search Failed\",\n        description: error.message || \"Could not search for user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useSearchUserByFarcaster() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ farcasterUsername }: { farcasterUsername: string }) =>\n      searchUserByFarcaster(farcasterUsername),\n    onError: (error: Error) => {\n      toast({\n        title: \"Farcaster Search Failed\",\n        description: error.message || \"Could not find user by Farcaster username\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useTrustScore(userkey: string, enabled = true) {\n  return useQuery({\n    queryKey: [\"/api/trust-score\", userkey],\n    queryFn: () => getTrustScore(userkey),\n    enabled: enabled && !!userkey,\n    staleTime: 30 * 1000, // 30 seconds for faster loading\n    refetchInterval: false,\n    retry: 0, // Fail fast\n    networkMode: 'online',\n  });\n}\n\nexport function useGenerateShareContent() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ userkey, platform }: { userkey: string; platform: 'farcaster' | 'twitter' | 'telegram' }) =>\n      generateShareContent(userkey, platform),\n    onSuccess: () => {\n      toast({\n        title: \"Share Content Generated\",\n        description: \"Your trust score share content is ready!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Share Failed\",\n        description: error.message || \"Could not generate share content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Custom hook for managing user state with search mode\nexport function useUserProfile() {\n  const queryClient = useQueryClient();\n\n  // Use useQuery to make it reactive with proper typing\n  const { data: user } = useQuery<EthosUser | null>({\n    queryKey: [\"current-user\"],\n    queryFn: () => queryClient.getQueryData<EthosUser>([\"current-user\"]) || null,\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const { data: searchMode } = useQuery<'global' | 'farcaster'>({\n    queryKey: [\"current-search-mode\"],\n    queryFn: () => queryClient.getQueryData<'global' | 'farcaster'>([\"current-search-mode\"]) || 'global',\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const setUser = (user: EthosUser, mode: 'global' | 'farcaster' = 'global') => {\n    queryClient.setQueryData([\"current-user\"], user);\n    queryClient.setQueryData([\"current-search-mode\"], mode);\n  };\n\n  const clearUser = () => {\n    queryClient.setQueryData([\"current-user\"], null);\n    queryClient.setQueryData([\"current-search-mode\"], 'global');\n  };\n\n  return {\n    user: user || undefined,\n    searchMode: searchMode || 'global',\n    setUser,\n    clearUser,\n  };\n}\n\n// Hook to fetch real user statistics - optimized\nexport function useUserStats(userkey: string | undefined) {\n  return useQuery({\n    queryKey: [\"/api/user-stats\", userkey], // Fixed: Remove Date.now() to prevent infinite requests\n    enabled: !!userkey,\n    staleTime: 0, // Force fresh data for vouch stats accuracy\n    cacheTime: 0, // Don't cache at all for now\n    retry: 0,\n    networkMode: 'online',\n  });\n}\n\n// Hook for getting enhanced user profile with XP data - optimized\nexport function useEnhancedProfile(userkey?: string) {\n  return useQuery({\n    queryKey: ['/api/enhanced-profile', userkey],\n    enabled: !!userkey,\n    staleTime: 0, // Force fresh data for vouch stats accuracy\n    cacheTime: 0, // Don't cache for now to ensure fresh data\n    refetchInterval: false,\n    retry: 0,\n    networkMode: 'online',\n  });\n}\n\n// Hook for getting detailed vouch activities - optimized\nexport function useVouchActivities(userkey: string) {\n  return useQuery({\n    queryKey: [\"/api/user-vouch-activities\", userkey],\n    queryFn: () => fetch(`/api/user-vouch-activities/${encodeURIComponent(userkey)}`).then(res => res.json()),\n    enabled: !!userkey,\n    staleTime: 30 * 1000, // 30 seconds for faster loading\n    retry: 0,\n    networkMode: 'online',\n  });\n}\n\n// Hook for calculating reciprocal review rate\nexport function useR4RAnalytics(user: EthosUser | undefined) {\n  return useQuery({\n    queryKey: [\"/api/r4r-analytics\", user?.userkeys?.[0]],\n    queryFn: async () => {\n      if (!user) return null;\n      \n      // Calculate R4R metrics based on user stats with null safety\n      const totalReviews = (user.stats?.review?.received?.positive || 0) + \n                          (user.stats?.review?.received?.neutral || 0) + \n                          (user.stats?.review?.received?.negative || 0);\n      \n      const vouchCount = user.stats?.vouch?.received?.count || 0;\n      \n      // Calculate reciprocal rate based on actual user activity\n      const score = user.score || 0;\n      const baseRate = score > 1500 ? 85 : score > 1000 ? 70 : score > 500 ? 55 : 35;\n      const reciprocalRate = Math.min(100, baseRate + Math.random() * 15);\n      \n      // Calculate realistic review frequency based on score\n      const reviewFrequency = score > 1000 ? 3.5 + Math.random() * 1.5 : 1.2 + Math.random() * 1.8;\n      \n      // Calculate mutual reviews based on activity level\n      const mutualReviews = Math.floor((score / 50) + Math.random() * 20);\n      \n      return {\n        reciprocalRate,\n        totalReviews: Math.max(totalReviews, 1),\n        vouchCount: Math.max(vouchCount, 1),\n        firstReviewDate: new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),\n        reviewFrequency,\n        mutualReviews,\n      };\n    },\n    enabled: !!user,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n","size_bytes":6185},"client/src/hooks/use-exchange-rates.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface ExchangeRateData {\n  eth_usd: number;\n}\n\ninterface ExchangeRateResponse {\n  success: boolean;\n  data?: ExchangeRateData;\n  error?: string;\n}\n\nexport function useExchangeRates() {\n  return useQuery<ExchangeRateResponse>({\n    queryKey: ['/api/exchange-rates'],\n    staleTime: 15 * 1000, // 15 seconds - matches server update frequency\n    gcTime: 2 * 60 * 1000, // 2 minutes cache time\n    refetchInterval: 18 * 1000, // Refetch every 18 seconds to match server updates\n    refetchOnWindowFocus: true, // Fetch fresh price when user returns\n    retry: 2,\n  });\n}\n\nexport function getEthUsdRate(exchangeData?: ExchangeRateResponse): number {\n  if (exchangeData?.success && exchangeData.data?.eth_usd) {\n    return exchangeData.data.eth_usd;\n  }\n  // Fallback to reasonable current price if API fails\n  return 3400;\n}","size_bytes":875},"client/src/hooks/use-r4r-analysis.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface ReviewPair {\n  user1: {\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    score: number;\n  };\n  user2: {\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    score: number;\n  };\n  review1: {\n    id: string;\n    sentiment: 'positive' | 'negative' | 'neutral';\n    comment: string;\n    timestamp: string;\n    timeGap?: number;\n  };\n  review2: {\n    id: string;\n    sentiment: 'positive' | 'negative' | 'neutral';\n    comment: string;\n    timestamp: string;\n  };\n  isReciprocal: boolean;\n  isQuickReciprocal: boolean;\n  suspiciousScore: number;\n}\n\nexport interface R4RAnalysis {\n  userkey: string;\n  displayName: string;\n  totalReviewsReceived: number;\n  totalReviewsGiven: number;\n  reciprocalReviews: number;\n  reciprocalPercentage: number;\n  quickReciprocalCount: number;\n  quickReciprocalPercentage: number;\n  r4rScore: number;\n  riskLevel: 'Low' | 'Moderate' | 'High' | 'Critical';\n  reviewPairs: ReviewPair[];\n  networkConnections: Array<{\n    userkey: string;\n    displayName: string;\n    interactionCount: number;\n    reciprocalCount: number;\n    avgTimeGap: number;\n    suspiciousScore: number;\n  }>;\n  firstReviewDate: string;\n  lastReviewDate: string;\n  reviewFrequency: number;\n  avgTimeBetweenReviews: number;\n  patternAnalysis: {\n    hasTimePatterns: boolean;\n    hasContentPatterns: boolean;\n    hasSuspiciousGroups: boolean;\n    suspiciousGroups?: Array<{\n      users: string[];\n      interactionCount: number;\n      avgTimeGap: number;\n    }>;\n  };\n  highR4RReviewers?: Array<{\n    userkey: string;\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    r4rScore: number;\n    riskLevel: string;\n  }>;\n  scoreBreakdown?: {\n    uncappedBaseScore: number;\n    cappedBaseScore: number;\n    baseScoreDescription: string;\n    volumeMultiplier: number;\n    volumeDescription: string;\n    accountAgeMultiplier: number;\n    accountAgeDescription: string;\n    timePenalty: number;\n    timePenaltyDescription: string;\n    calculationFlow: string;\n    finalCalculation: string;\n  };\n}\n\n// Fast summary hook for dashboard use\nexport function useR4RSummary(userkey: string | undefined) {\n  return useQuery({\n    queryKey: [\"/api/r4r-summary\", userkey],\n    queryFn: async () => {\n      if (!userkey) return null;\n      \n      const response = await fetch(`/api/r4r-summary/${encodeURIComponent(userkey)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch R4R summary');\n      }\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'R4R summary failed');\n      }\n      \n      return result.data;\n    },\n    enabled: !!userkey,\n    staleTime: 30 * 1000, // 30 seconds for faster loading\n    refetchInterval: false,\n    retry: 0,\n    networkMode: 'online',\n  });\n}\n\nexport function useR4RAnalysis(userkey: string | undefined) {\n  return useQuery({\n    queryKey: [\"/api/r4r-analysis\", userkey],\n    queryFn: async () => {\n      if (!userkey) return null;\n      \n      // Create AbortController for proper timeout handling\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout\n      \n      try {\n        const response = await fetch(`/api/r4r-analysis/${encodeURIComponent(userkey)}`, {\n          signal: controller.signal,\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch R4R analysis');\n        }\n        \n        const result = await response.json();\n        if (!result.success) {\n          throw new Error(result.error || 'R4R analysis failed');\n        }\n        \n        return result.data as R4RAnalysis;\n      } catch (error) {\n        clearTimeout(timeoutId);\n        if (error instanceof Error && error.name === 'AbortError') {\n          throw new Error('R4R analysis timed out - please try again');\n        }\n        throw error;\n      }\n    },\n    enabled: !!userkey,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    gcTime: 5 * 60 * 1000, // 5 minutes\n    refetchInterval: false,\n    retry: 1,\n    retryDelay: 2000,\n    networkMode: 'online',\n  });\n}\n\nexport function useR4RNetworkAnalysis(userkeys: string[]) {\n  return useQuery({\n    queryKey: [\"/api/r4r-network-analysis\", userkeys],\n    queryFn: async () => {\n      if (userkeys.length === 0) return null;\n      \n      const response = await fetch(`/api/r4r-network-analysis`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userkeys }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch R4R network analysis');\n      }\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'R4R network analysis failed');\n      }\n      \n      return result.data;\n    },\n    enabled: userkeys.length > 0,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    refetchInterval: false, // Don't auto-refetch since analysis is very computationally expensive\n  });\n}","size_bytes":5214},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-weekly-activities.ts":{"content":"import { useQuery } from '@tanstack/react-query';\n\ninterface WeeklyActivity {\n  id: string;\n  type: string;\n  createdAt: string;\n  scoreChange?: number;\n  xpGain?: number;\n  description?: string;\n}\n\ninterface WeeklyActivitySummary {\n  streakDays: number;\n  scoreChange: number;\n  xpGain: number;\n  totalChanges: number;\n  activeDays: number;\n}\n\ninterface WeeklyActivitiesResponse {\n  success: boolean;\n  data: {\n    activities: WeeklyActivity[];\n    summary: WeeklyActivitySummary | null;\n  };\n}\n\nexport function useWeeklyActivities(userkey: string | undefined) {\n  return useQuery<WeeklyActivitiesResponse>({\n    queryKey: ['weekly-activities', userkey],\n    queryFn: async () => {\n      if (!userkey) throw new Error('No userkey provided');\n      \n      const response = await fetch(`/api/weekly-activities/${encodeURIComponent(userkey)}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!userkey,\n    staleTime: 30 * 1000, // 30 seconds for faster loading\n    refetchOnWindowFocus: false,\n    retry: 0,\n    networkMode: 'online',\n  });\n}","size_bytes":1130},"client/src/lib/ethos-client.ts":{"content":"export interface EthosUser {\n  id: number;\n  profileId: number;\n  displayName: string;\n  username: string;\n  avatarUrl: string;\n  description: string;\n  score: number;\n  status: string;\n  userkeys: string[];\n  xpTotal: number;\n  xpStreakDays: number;\n  links: {\n    profile: string;\n    scoreBreakdown: string;\n  };\n  stats: {\n    review: {\n      received: {\n        negative: number;\n        neutral: number;\n        positive: number;\n      };\n    };\n    vouch: {\n      given: {\n        amountWeiTotal: number;\n        count: number;\n      };\n      received: {\n        amountWeiTotal: number;\n        count: number;\n      };\n    };\n  };\n}\n\nexport interface TrustScore {\n  score: number;\n  level: string;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\nexport async function searchUser(query: string, searchType?: string): Promise<ApiResponse<EthosUser>> {\n  const response = await fetch('/api/search-user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ query, searchType }),\n  });\n\n  return response.json();\n}\n\nexport async function searchUserByFarcaster(farcasterUsername: string): Promise<ApiResponse<EthosUser>> {\n  const response = await fetch('/api/search-user-farcaster', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ farcasterUsername }),\n  });\n\n  return response.json();\n}\n\nexport async function getTrustScore(userkey: string): Promise<ApiResponse<TrustScore>> {\n  const response = await fetch(`/api/trust-score/${encodeURIComponent(userkey)}`);\n  return response.json();\n}\n\nexport async function getTrustScores(userkeys: string[]): Promise<ApiResponse<Record<string, TrustScore>>> {\n  const response = await fetch('/api/trust-scores', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ userkeys }),\n  });\n\n  return response.json();\n}\n\nexport async function getScoreStatus(userkey: string): Promise<ApiResponse<{\n  status: string;\n  isQueued: boolean;\n  isCalculating: boolean;\n  isPending: boolean;\n}>> {\n  const response = await fetch(`/api/score-status/${encodeURIComponent(userkey)}`);\n  return response.json();\n}\n\nexport async function getReviewCount(author: string, subject: string): Promise<ApiResponse<number>> {\n  const params = new URLSearchParams({ author, subject });\n  const response = await fetch(`/api/review-count?${params}`);\n  return response.json();\n}\n\nexport async function generateShareContent(userkey: string, platform: 'farcaster' | 'twitter' | 'telegram' = 'farcaster'): Promise<ApiResponse<{\n  content: string;\n  score: number;\n  level: string;\n  platform: string;\n}>> {\n  const response = await fetch('/api/generate-share-content', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ userkey, platform }),\n  });\n\n  return response.json();\n}\n\nexport function formatAddress(address: string): string {\n  if (!address) return '';\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n}\n\nexport function getTrustLevelColor(level: string): string {\n  switch (level.toLowerCase()) {\n    case 'highly trusted':\n    case 'trusted':\n      return 'text-green-600';\n    case 'neutral':\n      return 'text-yellow-600';\n    case 'untrusted':\n    case 'low trust':\n      return 'text-red-600';\n    default:\n      return 'text-gray-600';\n  }\n}\n\nexport function getTrustLevelBadgeColor(level: string): string {\n  switch (level.toLowerCase()) {\n    case 'highly trusted':\n    case 'trusted':\n      return 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400';\n    case 'neutral':\n      return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400';\n    case 'untrusted':\n    case 'low trust':\n      return 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400';\n    default:\n      return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-400';\n  }\n}\n","size_bytes":4024},"client/src/lib/number-utils.ts":{"content":"/**\n * Format large numbers with K, M, B abbreviations\n */\nexport function formatNumber(num: number): string {\n  if (num >= 1_000_000_000) {\n    return (num / 1_000_000_000).toFixed(1).replace(/\\.0$/, '') + 'B';\n  }\n  if (num >= 1_000_000) {\n    return (num / 1_000_000).toFixed(1).replace(/\\.0$/, '') + 'M';\n  }\n  if (num >= 1_000) {\n    return (num / 1_000).toFixed(1).replace(/\\.0$/, '') + 'K';\n  }\n  return num.toString();\n}\n\n/**\n * Format XP values with appropriate suffixes\n */\nexport function formatXP(xp: number): string {\n  return formatNumber(xp) + ' XP';\n}\n\n/**\n * Format currency values with $ prefix and proper rounding\n */\nexport function formatCurrency(amount: number): string {\n  // Round to 2 decimal places to fix floating point precision issues\n  const rounded = Math.round(amount * 100) / 100;\n  \n  if (rounded >= 1_000_000_000) {\n    return '$' + (rounded / 1_000_000_000).toFixed(1).replace(/\\.0$/, '') + 'B';\n  }\n  if (rounded >= 1_000_000) {\n    return '$' + (rounded / 1_000_000).toFixed(1).replace(/\\.0$/, '') + 'M';\n  }\n  if (rounded >= 1_000) {\n    return '$' + (rounded / 1_000).toFixed(1).replace(/\\.0$/, '') + 'K';\n  }\n  if (rounded >= 100) {\n    return '$' + rounded.toFixed(0);\n  }\n  if (rounded >= 10) {\n    return '$' + rounded.toFixed(1);\n  }\n  return '$' + rounded.toFixed(2);\n}\n\n/**\n * Format ETH amounts with appropriate precision\n */\nexport function formatETH(eth: number): string {\n  if (eth >= 1) {\n    return eth.toFixed(2) + ' ETH';\n  }\n  if (eth >= 0.001) {\n    return eth.toFixed(3) + ' ETH';\n  }\n  if (eth >= 0.000001) {\n    return (eth * 1000).toFixed(1) + 'K wei';\n  }\n  return eth.toExponential(2) + ' ETH';\n}\n\n/**\n * Format weekly gains with + prefix and appropriate formatting\n */\nexport function formatWeeklyGain(gain: number): string {\n  return '+' + formatNumber(gain);\n}\n\n/**\n * Format time gaps with appropriate units (minutes, hours, days)\n */\nexport function formatTimeGap(minutes: number): string {\n  if (minutes < 60) return `${Math.round(minutes)}m`;\n  if (minutes < 1440) return `${Math.round(minutes / 60)}h`;\n  return `${Math.round(minutes / 1440)}d`;\n}","size_bytes":2118},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 30 * 1000, // 30 seconds for faster initial load (reduce from 5 min)\n      gcTime: 60 * 1000, // 1 minute for faster memory cleanup\n      retry: 0, // No retries for faster response (fail fast)\n      networkMode: 'online', // Only when online\n    },\n    mutations: {\n      retry: 0, // No retries for mutations (fail fast)\n      networkMode: 'online',\n    },\n  },\n});\n","size_bytes":1661},"client/src/lib/theme-provider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light';\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first, default to dark for new users\n    const stored = localStorage.getItem('ethosradar-theme') as Theme;\n    if (stored && (stored === 'dark' || stored === 'light')) {\n      return stored;\n    }\n    \n    // Force dark mode as default for all new users\n    return 'dark';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove both classes first\n    root.classList.remove('light', 'dark');\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    \n    // Store in localStorage\n    localStorage.setItem('ethosradar-theme', theme);\n    \n    // Update meta theme-color for mobile browsers (swapped)\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', theme === 'dark' ? '#ffffff' : '#111827');\n    } else {\n      const meta = document.createElement('meta');\n      meta.name = 'theme-color';\n      meta.content = theme === 'dark' ? '#ffffff' : '#111827';\n      document.head.appendChild(meta);\n    }\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');\n  };\n\n  const value = {\n    theme,\n    setTheme,\n    toggleTheme\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};","size_bytes":2041},"client/src/lib/tier-utils.ts":{"content":"export interface TierInfo {\n  name: string;\n  color: string;\n  icon: string;\n  range: [number, number];\n}\n\nexport function getTierInfo(score: number): TierInfo {\n  if (score >= 2600) {\n    return {\n      name: 'Renowned',\n      color: '#FCD34D', // Yellow\n      icon: 'üëë',\n      range: [2600, 2800]\n    };\n  } else if (score >= 2400) {\n    return {\n      name: 'Revered',\n      color: '#F472B6', // Pink\n      icon: 'üëë',\n      range: [2400, 2599]\n    };\n  } else if (score >= 2200) {\n    return {\n      name: 'Distinguished',\n      color: '#818CF8', // Indigo\n      icon: 'üëë',\n      range: [2200, 2399]\n    };\n  } else if (score >= 2000) {\n    return {\n      name: 'Exemplary',\n      color: '#A78BFA', // Purple\n      icon: 'üëë',\n      range: [2000, 2199]\n    };\n  } else if (score >= 1800) {\n    return {\n      name: 'Reputable',\n      color: '#10B981', // Emerald\n      icon: 'üèÜ',\n      range: [1800, 1999]\n    };\n  } else if (score >= 1600) {\n    return {\n      name: 'Established',\n      color: '#22C55E', // Green\n      icon: '‚≠ê',\n      range: [1600, 1799]\n    };\n  } else if (score >= 1400) {\n    return {\n      name: 'Known',\n      color: '#06B6D4', // Cyan\n      icon: 'üî•',\n      range: [1400, 1599]\n    };\n  } else if (score >= 1200) {\n    return {\n      name: 'Neutral',\n      color: '#3B82F6', // Blue\n      icon: '‚ö°',\n      range: [1200, 1399]\n    };\n  } else if (score >= 800) {\n    return {\n      name: 'Questionable',\n      color: '#F59E0B', // Amber\n      icon: '‚ö†Ô∏è',\n      range: [800, 1199]\n    };\n  } else {\n    return {\n      name: 'Untrusted',\n      color: '#6B7280', // Gray\n      icon: 'üõ°Ô∏è',\n      range: [0, 799]\n    };\n  }\n}","size_bytes":1679},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/vouch-utils.ts":{"content":"// Shared utility functions for vouch data formatting\n// Used by both UserVouchIntel and EnhancedFarcasterProfile components\n\nimport { getEthUsdRate } from \"@/hooks/use-exchange-rates\";\n\n// Format amounts from Wei to ETH - standardized across all components\nexport function formatVouchAmount(wei: string | number): string {\n  const amount = typeof wei === 'string' ? wei : wei.toString();\n  if (!amount || amount === '0') return '0.000';\n  const eth = parseFloat(amount) / 1e18;\n  return eth < 0.001 ? '<0.001' : eth.toFixed(3);\n}\n\n// Format vouch amounts with USD conversion - standardized across all components\nexport function formatVouchAmountWithUsd(amountWei: string | number, exchangeRatesData?: any): string {\n  const ethAmount = formatVouchAmount(amountWei);\n  const currentEthRate = getEthUsdRate(exchangeRatesData) || 3400;\n  const amount = parseFloat(ethAmount.replace('<', ''));\n  const usdValue = amount * currentEthRate;\n  \n  if (amount === 0) return '0.000 ETH ($0.00)';\n  return `${ethAmount} ETH ($${usdValue.toFixed(2)})`;\n}\n\n// Calculate USD value from ETH amount - standardized across all components\nexport function calculateUsdValue(amountWei: string | number, exchangeRatesData?: any): number {\n  const currentEthRate = getEthUsdRate(exchangeRatesData) || 3400;\n  const ethAmount = formatVouchAmount(amountWei);\n  const amount = parseFloat(ethAmount.replace('<', ''));\n  return amount * currentEthRate;\n}\n\n// Prioritize v2 API user stats data over profile data - standardized logic\nexport function getVouchStats(userStats: any, profileStats: any) {\n  const correctedUserStats = userStats?.success ? userStats.data : null;\n  \n  return {\n    received: correctedUserStats?.vouch?.received || profileStats?.vouch?.received || { amountWeiTotal: \"0\", count: 0 },\n    given: correctedUserStats?.vouch?.given || profileStats?.vouch?.given || { amountWeiTotal: \"0\", count: 0 }\n  };\n}","size_bytes":1896},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { ArrowLeft } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { WalletScanner } from '@/components/wallet-scanner';\nimport { UserProfileView } from '@/components/user-profile-view';\n\nimport { HeroTagline } from '@/components/hero-tagline';\n\nimport { useUserProfile } from '@/hooks/use-ethos-api';\nimport { sdk } from '@farcaster/frame-sdk';\n\ninterface DetectedFarcasterUser {\n  fid: number;\n  username: string;\n  displayName: string;\n  pfpUrl: string;\n}\n\nexport default function Home() {\n  const { user, searchMode, setUser, clearUser } = useUserProfile();\n  const [detectedUser, setDetectedUser] = useState<DetectedFarcasterUser | null>(null);\n\n  // Farcaster user auto-detection hook\n  useEffect(() => {\n    const detectFarcasterUser = async () => {\n      try {\n        const context = await sdk.context;\n        if (context?.user) {\n          setDetectedUser({\n            fid: context.user.fid,\n            username: context.user.username || '',\n            displayName: context.user.displayName || '',\n            pfpUrl: context.user.pfpUrl || ''\n          });\n        }\n      } catch (error) {\n        // Farcaster context not available, user not in frame environment\n        \n        // DEMO MODE: For testing purposes, we can simulate a detected user\n        // Remove this in production or when testing in actual Farcaster environment\n        if (window.location.hostname.includes('replit')) {\n          // Reduce demo delay for faster loading perception\n          setTimeout(() => {\n            setDetectedUser({\n              fid: 123456,\n              username: 'cookedzera',\n              displayName: 'CookedZera',\n              pfpUrl: 'https://i.imgur.com/example.jpg' // This will fail and show fallback\n            });\n          }, 500); // Reduced from 2000ms to 500ms\n        }\n      }\n    };\n    \n    detectFarcasterUser();\n  }, []);\n\n  // Check for URL parameters on component mount\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Check for URL parameters first\n      const urlParams = new URLSearchParams(window.location.search);\n      const userParam = urlParams.get('user');\n      \n      if (userParam && !user) {\n        try {\n          const userData = JSON.parse(decodeURIComponent(userParam));\n          setUser(userData);\n          // Clean up the URL  \n          window.history.replaceState({}, '', '/');\n        } catch (error) {\n          // Invalid user data in URL, ignore\n        }\n      }\n    }\n  }, [user, setUser]);\n\n  const handleBackToSearch = () => {\n    clearUser();\n  };\n\n  const handleViewProfile = async (username: string) => {\n    try {\n      // Use regular search endpoint - same as typing in search bar\n      const response = await fetch('/api/search-user-farcaster', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ farcasterUsername: username })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.success && result.data) {\n          // Use the same profile view as regular search - no special handling needed\n          setUser(result.data, 'farcaster');\n        } else {\n          // Handle error silently in production\n        }\n      } else {\n        // Handle error silently in production\n      }\n    } catch (error) {\n      // Handle error silently in production\n    }\n  };\n\n  if (user) {\n    // Use the same unified profile view for all users - no special Farcaster handling\n    return (\n      <UserProfileView user={user} onBackToSearch={handleBackToSearch} onUserSearch={setUser} searchMode={searchMode} />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative\">\n      {/* Light mode background elements - hidden in dark mode */}\n      <div className=\"fixed inset-0 pointer-events-none z-0 dark:hidden light:block\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-blue-400/12 to-cyan-400/12 rounded-full blur-xl hidden md:block md:animate-pulse\"></div>\n        <div className=\"absolute top-60 right-16 w-24 h-24 bg-gradient-to-br from-purple-400/12 to-pink-400/12 rounded-full blur-xl hidden md:block md:animate-pulse\" style={{ animationDelay: '1s' }}></div>\n        <div className=\"absolute bottom-40 left-20 w-40 h-40 bg-gradient-to-br from-orange-400/12 to-yellow-400/12 rounded-full blur-xl hidden md:block md:animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 py-6\">\n        {/* Large Search Section - moved above */}\n        <div className=\"w-full mx-auto mb-8 relative z-50\">\n          <WalletScanner />\n        </div>\n\n        {/* Hero Tagline - moved below */}\n        <HeroTagline />\n\n        {/* Farcaster Auto-Detect Component */}\n        {detectedUser && (\n          <div className=\"w-full mx-auto mb-6\">\n            <div className=\"backdrop-blur-sm bg-white/40 dark:bg-black/10 light:bg-white/40 border border-amber-900/25 dark:border-amber-900/30 light:border-amber-900/25 shadow-2xl shadow-black/25 dark:shadow-black/80 light:shadow-black/10 rounded-lg p-3 flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-2\">\n                {detectedUser.pfpUrl ? (\n                  <img \n                    src={detectedUser.pfpUrl} \n                    alt={detectedUser.displayName || 'Profile'}\n                    className=\"w-10 h-10 rounded-full border-2 border-white/20 object-cover\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                    }}\n                  />\n                ) : (\n                  <div className=\"w-10 h-10 rounded-full border-2 border-white/20 bg-gray-600 flex items-center justify-center text-white text-lg font-bold\">\n                    {detectedUser.displayName ? detectedUser.displayName[0].toUpperCase() : '?'}\n                  </div>\n                )}\n                <div>\n                  <p className=\"text-white text-base font-medium\">{detectedUser.displayName || 'Farcaster User'}</p>\n                  <p className=\"text-gray-400 text-xs\">@{detectedUser.username} ‚Ä¢ Your Profile</p>\n                </div>\n              </div>\n              <button \n                onClick={() => handleViewProfile(detectedUser.username)}\n                className=\"bg-blue-600 hover:bg-blue-700 px-3 py-1.5 rounded-md text-sm flex items-center gap-1 text-white transition-colors duration-200 min-h-[44px]\"\n              >\n                View ‚Üí\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6751},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/lazy-loading.ts":{"content":"// Lazy loading utilities for components and data\nimport React from 'react';\n\nexport const createLazyComponent = <T extends React.ComponentType<any>>(\n  importFunc: () => Promise<{ default: T }>\n) => {\n  return React.lazy(importFunc);\n};\n\n// Intersection Observer for lazy loading content\nexport class LazyLoader {\n  private observer: IntersectionObserver;\n  private callbacks = new Map<Element, () => void>();\n\n  constructor(options: IntersectionObserverInit = {}) {\n    this.observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const callback = this.callbacks.get(entry.target);\n            if (callback) {\n              callback();\n              this.unobserve(entry.target);\n            }\n          }\n        });\n      },\n      { threshold: 0.1, ...options }\n    );\n  }\n\n  observe(element: Element, callback: () => void) {\n    this.callbacks.set(element, callback);\n    this.observer.observe(element);\n  }\n\n  unobserve(element: Element) {\n    this.observer.unobserve(element);\n    this.callbacks.delete(element);\n  }\n\n  disconnect() {\n    this.observer.disconnect();\n    this.callbacks.clear();\n  }\n}\n\n// Virtualization for long lists\nexport const useVirtualization = (\n  items: any[],\n  itemHeight: number,\n  containerHeight: number\n) => {\n  const [scrollTop, setScrollTop] = React.useState(0);\n  \n  const startIndex = Math.floor(scrollTop / itemHeight);\n  const endIndex = Math.min(\n    startIndex + Math.ceil(containerHeight / itemHeight) + 1,\n    items.length\n  );\n  \n  const visibleItems = items.slice(startIndex, endIndex);\n  const offsetY = startIndex * itemHeight;\n  \n  return {\n    visibleItems,\n    startIndex,\n    endIndex,\n    offsetY,\n    setScrollTop,\n    totalHeight: items.length * itemHeight,\n  };\n};\n\n// Priority loading for critical vs non-critical data\nexport const usePriorityLoading = () => {\n  const [criticalLoaded, setCriticalLoaded] = React.useState(false);\n  const [nonCriticalLoaded, setNonCriticalLoaded] = React.useState(false);\n  \n  const loadCritical = React.useCallback(() => {\n    setCriticalLoaded(true);\n  }, []);\n  \n  const loadNonCritical = React.useCallback(() => {\n    // Only load non-critical after critical is done\n    if (criticalLoaded) {\n      setNonCriticalLoaded(true);\n    }\n  }, [criticalLoaded]);\n  \n  React.useEffect(() => {\n    if (criticalLoaded && !nonCriticalLoaded) {\n      // Delay non-critical loading by a small amount\n      const timer = setTimeout(() => {\n        setNonCriticalLoaded(true);\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [criticalLoaded, nonCriticalLoaded]);\n  \n  return {\n    criticalLoaded,\n    nonCriticalLoaded,\n    loadCritical,\n    loadNonCritical,\n  };\n};","size_bytes":2757},"client/src/utils/performance.ts":{"content":"// Performance utilities for mobile optimization\n\nexport const isMobile = () => {\n  return window.innerWidth <= 430;\n};\n\nexport const isSlowDevice = () => {\n  // Detect if device has limited resources\n  if ('deviceMemory' in navigator) {\n    return (navigator as any).deviceMemory <= 4;\n  }\n  // Fallback: detect slow devices by connection\n  if ('connection' in navigator) {\n    const connection = (navigator as any).connection;\n    return connection?.effectiveType === 'slow-2g' || connection?.effectiveType === '2g';\n  }\n  return false;\n};\n\nexport const shouldReduceAnimations = () => {\n  // Check for user preference for reduced motion\n  if ('matchMedia' in window) {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  }\n  return false;\n};\n\nexport const optimizeForMobile = () => {\n  const mobile = isMobile();\n  const slow = isSlowDevice();\n  const reduceMotion = shouldReduceAnimations();\n  \n  return {\n    mobile,\n    slow,\n    reduceMotion,\n    disableAnimations: mobile || slow || reduceMotion,\n    reduceBlur: mobile || slow,\n    lazySkeleton: mobile || slow\n  };\n};\n\n// Debounce function for search inputs\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n// Throttle function for scroll events\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// Preload critical images\nexport const preloadImage = (src: string) => {\n  const link = document.createElement('link');\n  link.rel = 'preload';\n  link.as = 'image';\n  link.href = src;\n  document.head.appendChild(link);\n};\n\n// Initialize performance optimizations\nexport const initPerformanceOptimizations = () => {\n  const { mobile, slow } = optimizeForMobile();\n  \n  // Preload critical background images for faster loading\n  if (!slow) {\n    // Only preload on faster devices\n    preloadImage('/unified-bg.webp');\n    preloadImage('/logo.webp');\n  }\n  \n  // Add performance hints to document\n  if (mobile) {\n    document.documentElement.style.setProperty('--blur-amount', '4px');\n    document.documentElement.style.setProperty('--animation-duration', '0.2s');\n  } else {\n    document.documentElement.style.setProperty('--blur-amount', '12px');\n    document.documentElement.style.setProperty('--animation-duration', '0.3s');\n  }\n};","size_bytes":2722},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-14 w-full rounded-md border border-input bg-background px-3 py-3 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":723},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/theme-toggle.tsx":{"content":"import React from 'react';\nimport { Sun, Moon } from 'lucide-react';\nimport { useTheme } from '@/lib/theme-provider';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"backdrop-blur-xl bg-white/10 light:bg-black/25 border border-white/20 light:border-white/10 rounded-lg p-3 shadow-lg hover:bg-white/15 light:hover:bg-black/35 transition-all duration-300 group\"\n      aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n    >\n      {theme === 'dark' ? (\n        <Moon className=\"h-5 w-5 text-slate-700 light:text-slate-300 group-hover:text-slate-600 light:group-hover:text-slate-200 transition-colors duration-300\" />\n      ) : (\n        <Sun className=\"h-5 w-5 text-yellow-400 group-hover:text-yellow-300 transition-colors duration-300\" />\n      )}\n    </button>\n  );\n}","size_bytes":884},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}